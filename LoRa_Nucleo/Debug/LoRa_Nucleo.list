
LoRa_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd8  08008bd8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008be0  08008be0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  20000078  08008c60  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001be8  08008c60  00021be8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb86  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa1  00000000  00000000  0003cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  000406c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  00042128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000407c  00000000  00000000  00043a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7bf  00000000  00000000  00047a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964a9  00000000  00000000  0006423b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa6e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f0  00000000  00000000  000fa734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008994 	.word	0x08008994

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08008994 	.word	0x08008994

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b090      	sub	sp, #64	; 0x40
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dbb      	adds	r3, r7, #6
 80004d6:	801a      	strh	r2, [r3, #0]
	char msg7[50];


	  if (GPIO_Pin == GPIO_PIN_10) {
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	881a      	ldrh	r2, [r3, #0]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d123      	bne.n	800052c <HAL_GPIO_EXTI_Callback+0x60>
		  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2202      	movs	r2, #2
 80004ea:	4013      	ands	r3, r2
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d10a      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x3a>
		  	  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004f0:	23a0      	movs	r3, #160	; 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2201      	movs	r2, #1
 80004f6:	2120      	movs	r1, #32
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 f8ae 	bl	800265a <HAL_GPIO_WritePin>
		  		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 80004fe:	2102      	movs	r1, #2
 8000500:	2001      	movs	r0, #1
 8000502:	f002 fec5 	bl	8003290 <HAL_PWR_EnterSTOPMode>


		  //sprintf(msg7, "ROTATION\r\n");
		  //HAL_UART_Transmit(&huart2, (uint8_t*)msg7, strlen(msg7), HAL_MAX_DELAY);

		  if (HAL_GetTick() - ContactBounceTime > 15 ) { // debounce the switch contact.
 8000506:	f001 f90d 	bl	8001724 <HAL_GetTick>
 800050a:	0002      	movs	r2, r0
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <HAL_GPIO_EXTI_Callback+0x90>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	2b0f      	cmp	r3, #15
 8000514:	d90a      	bls.n	800052c <HAL_GPIO_EXTI_Callback+0x60>

		  Rotations++;
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_GPIO_EXTI_Callback+0x94>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <HAL_GPIO_EXTI_Callback+0x94>)
 800051e:	601a      	str	r2, [r3, #0]

		 // sprintf(msg7, "rotations: %d\r\n", Rotations ); // mph * 100
		 // HAL_UART_Transmit(&huart2, (uint8_t*)msg7, strlen(msg7), HAL_MAX_DELAY);
		  ContactBounceTime = HAL_GetTick();
 8000520:	f001 f900 	bl	8001724 <HAL_GetTick>
 8000524:	0003      	movs	r3, r0
 8000526:	001a      	movs	r2, r3
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_GPIO_EXTI_Callback+0x90>)
 800052a:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (GPIO_Pin == GPIO_PIN_9) {
 800052c:	1dbb      	adds	r3, r7, #6
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	429a      	cmp	r2, r3
 8000536:	d10b      	bne.n	8000550 <HAL_GPIO_EXTI_Callback+0x84>

		  __SEV();
 8000538:	bf40      	sev
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f002 f889 	bl	800265a <HAL_GPIO_WritePin>
		  //sprintf(msg7, "PA9\r\n");
		  //HAL_UART_Transmit(&huart2, (uint8_t*)msg7, strlen(msg7), HAL_MAX_DELAY);
		  SystemClock_Config();
 8000548:	f000 f9da 	bl	8000900 <SystemClock_Config>

		  HAL_ResumeTick();
 800054c:	f001 f902 	bl	8001754 <HAL_ResumeTick>
	  }




}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b010      	add	sp, #64	; 0x40
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40007000 	.word	0x40007000
 800055c:	2000027c 	.word	0x2000027c
 8000560:	20000278 	.word	0x20000278

08000564 <i2c_readRegisterByte>:

uint8_t i2c_readRegisterByte(uint8_t deviceAddress, uint8_t registerAddress) {
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af04      	add	r7, sp, #16
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	1c0a      	adds	r2, r1, #0
 8000574:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c2, deviceAddress << 1, registerAddress, 1, &data, 1, HAL_MAX_DELAY);
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b29b      	uxth	r3, r3
 800057c:	18db      	adds	r3, r3, r3
 800057e:	b299      	uxth	r1, r3
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <i2c_readRegisterByte+0x48>)
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	2301      	movs	r3, #1
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	240f      	movs	r4, #15
 8000594:	193b      	adds	r3, r7, r4
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2301      	movs	r3, #1
 800059a:	f002 fa5b 	bl	8002a54 <HAL_I2C_Mem_Read>
    return data;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	781b      	ldrb	r3, [r3, #0]
}
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b005      	add	sp, #20
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	2000015c 	.word	0x2000015c

080005b0 <i2c_writeRegisterByte>:

uint8_t i2c_writeRegisterByte(uint8_t deviceAddress, uint8_t registerAddress, uint8_t MSB_RegisterByte, uint8_t LSB_RegisterByte) {
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	0005      	movs	r5, r0
 80005b8:	000c      	movs	r4, r1
 80005ba:	0010      	movs	r0, r2
 80005bc:	0019      	movs	r1, r3
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	1c2a      	adds	r2, r5, #0
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	1c22      	adds	r2, r4, #0
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	1d7b      	adds	r3, r7, #5
 80005cc:	1c02      	adds	r2, r0, #0
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	1c0a      	adds	r2, r1, #0
 80005d4:	701a      	strb	r2, [r3, #0]
    uint8_t data[2] = {MSB_RegisterByte, LSB_RegisterByte};
 80005d6:	240c      	movs	r4, #12
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	1d7a      	adds	r2, r7, #5
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	1d3a      	adds	r2, r7, #4
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	705a      	strb	r2, [r3, #1]
    return HAL_I2C_Mem_Write(&hi2c2, deviceAddress << 1, registerAddress, 1, data, 2, HAL_MAX_DELAY);
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	18db      	adds	r3, r3, r3
 80005f0:	b299      	uxth	r1, r3
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <i2c_writeRegisterByte+0x68>)
 80005fa:	2301      	movs	r3, #1
 80005fc:	425b      	negs	r3, r3
 80005fe:	9302      	str	r3, [sp, #8]
 8000600:	2302      	movs	r3, #2
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	193b      	adds	r3, r7, r4
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	f002 f8f5 	bl	80027f8 <HAL_I2C_Mem_Write>
 800060e:	0003      	movs	r3, r0
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	2000015c 	.word	0x2000015c

0800061c <ADPD188BI_StartSampling>:


void ADPD188BI_StartSampling(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // Set CLK32K_EN bit to 1 and force the device into program mode
    i2c_writeRegisterByte(ADPD188BI, SAMPLE_CLK, SAMPLE_CLK_ENABLED_MSB, SAMPLE_CLK_ENABLED_LSB);
 8000620:	2392      	movs	r3, #146	; 0x92
 8000622:	224c      	movs	r2, #76	; 0x4c
 8000624:	214b      	movs	r1, #75	; 0x4b
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f7ff ffc2 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, MODE, PROGRAM_MODE_MSB, PROGRAM_MODE_LSB);
 800062c:	2301      	movs	r3, #1
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f7ff ffbc 	bl	80005b0 <i2c_writeRegisterByte>

    // Recommended settings ADPD188BI (Table 26 from Data Sheet)
    i2c_writeRegisterByte(ADPD188BI, 0x11, 0x30, 0x68);
 8000638:	2368      	movs	r3, #104	; 0x68
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2111      	movs	r1, #17
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f7ff ffb6 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x12, 0x02, 0x00);
 8000644:	2300      	movs	r3, #0
 8000646:	2202      	movs	r2, #2
 8000648:	2112      	movs	r1, #18
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f7ff ffb0 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x14, 0x01, 0x1D);
 8000650:	231d      	movs	r3, #29
 8000652:	2201      	movs	r2, #1
 8000654:	2114      	movs	r1, #20
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f7ff ffaa 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x15, 0x00, 0x00);
 800065c:	2300      	movs	r3, #0
 800065e:	2200      	movs	r2, #0
 8000660:	2115      	movs	r1, #21
 8000662:	2064      	movs	r0, #100	; 0x64
 8000664:	f7ff ffa4 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x17, 0x00, 0x09);
 8000668:	2309      	movs	r3, #9
 800066a:	2200      	movs	r2, #0
 800066c:	2117      	movs	r1, #23
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f7ff ff9e 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x18, 0x00, 0x00);
 8000674:	2300      	movs	r3, #0
 8000676:	2200      	movs	r2, #0
 8000678:	2118      	movs	r1, #24
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f7ff ff98 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x19, 0x3F, 0xFF);
 8000680:	23ff      	movs	r3, #255	; 0xff
 8000682:	223f      	movs	r2, #63	; 0x3f
 8000684:	2119      	movs	r1, #25
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f7ff ff92 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x1A, 0x3F, 0xFF);
 800068c:	23ff      	movs	r3, #255	; 0xff
 800068e:	223f      	movs	r2, #63	; 0x3f
 8000690:	211a      	movs	r1, #26
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f7ff ff8c 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x1B, 0x3F, 0xFF);
 8000698:	23ff      	movs	r3, #255	; 0xff
 800069a:	223f      	movs	r2, #63	; 0x3f
 800069c:	211b      	movs	r1, #27
 800069e:	2064      	movs	r0, #100	; 0x64
 80006a0:	f7ff ff86 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x1D, 0x00, 0x09);
 80006a4:	2309      	movs	r3, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	211d      	movs	r1, #29
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f7ff ff80 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x1E, 0x00, 0x00);
 80006b0:	2300      	movs	r3, #0
 80006b2:	2200      	movs	r2, #0
 80006b4:	211e      	movs	r1, #30
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f7ff ff7a 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x1F, 0x3F, 0xFF);
 80006bc:	23ff      	movs	r3, #255	; 0xff
 80006be:	223f      	movs	r2, #63	; 0x3f
 80006c0:	211f      	movs	r1, #31
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f7ff ff74 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x20, 0x3F, 0xFF);
 80006c8:	23ff      	movs	r3, #255	; 0xff
 80006ca:	223f      	movs	r2, #63	; 0x3f
 80006cc:	2120      	movs	r1, #32
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f7ff ff6e 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x21, 0x3F, 0xFF);
 80006d4:	23ff      	movs	r3, #255	; 0xff
 80006d6:	223f      	movs	r2, #63	; 0x3f
 80006d8:	2121      	movs	r1, #33	; 0x21
 80006da:	2064      	movs	r0, #100	; 0x64
 80006dc:	f7ff ff68 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x22, 0x35, 0x39);
 80006e0:	2339      	movs	r3, #57	; 0x39
 80006e2:	2235      	movs	r2, #53	; 0x35
 80006e4:	2122      	movs	r1, #34	; 0x22
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f7ff ff62 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x23, 0x35, 0x36);
 80006ec:	2336      	movs	r3, #54	; 0x36
 80006ee:	2235      	movs	r2, #53	; 0x35
 80006f0:	2123      	movs	r1, #35	; 0x23
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f7ff ff5c 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x24, 0x15, 0x30);
 80006f8:	2330      	movs	r3, #48	; 0x30
 80006fa:	2215      	movs	r2, #21
 80006fc:	2124      	movs	r1, #36	; 0x24
 80006fe:	2064      	movs	r0, #100	; 0x64
 8000700:	f7ff ff56 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x25, 0x63, 0x0C);
 8000704:	230c      	movs	r3, #12
 8000706:	2263      	movs	r2, #99	; 0x63
 8000708:	2125      	movs	r1, #37	; 0x25
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f7ff ff50 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x30, 0x03, 0x20);
 8000710:	2320      	movs	r3, #32
 8000712:	2203      	movs	r2, #3
 8000714:	2130      	movs	r1, #48	; 0x30
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f7ff ff4a 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x31, 0x04, 0x0E);
 800071c:	230e      	movs	r3, #14
 800071e:	2204      	movs	r2, #4
 8000720:	2131      	movs	r1, #49	; 0x31
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f7ff ff44 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x35, 0x03, 0x20);
 8000728:	2320      	movs	r3, #32
 800072a:	2203      	movs	r2, #3
 800072c:	2135      	movs	r1, #53	; 0x35
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f7ff ff3e 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x36, 0x04, 0x0E);
 8000734:	230e      	movs	r3, #14
 8000736:	2204      	movs	r2, #4
 8000738:	2136      	movs	r1, #54	; 0x36
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f7ff ff38 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x39, 0x22, 0xF0);
 8000740:	23f0      	movs	r3, #240	; 0xf0
 8000742:	2222      	movs	r2, #34	; 0x22
 8000744:	2139      	movs	r1, #57	; 0x39
 8000746:	2064      	movs	r0, #100	; 0x64
 8000748:	f7ff ff32 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x3B, 0x22, 0xF0);
 800074c:	23f0      	movs	r3, #240	; 0xf0
 800074e:	2222      	movs	r2, #34	; 0x22
 8000750:	213b      	movs	r1, #59	; 0x3b
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f7ff ff2c 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x3C, 0x31, 0xC6);
 8000758:	23c6      	movs	r3, #198	; 0xc6
 800075a:	2231      	movs	r2, #49	; 0x31
 800075c:	213c      	movs	r1, #60	; 0x3c
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f7ff ff26 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x42, 0x1C, 0x34);
 8000764:	2334      	movs	r3, #52	; 0x34
 8000766:	221c      	movs	r2, #28
 8000768:	2142      	movs	r1, #66	; 0x42
 800076a:	2064      	movs	r0, #100	; 0x64
 800076c:	f7ff ff20 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x43, 0xAD, 0xA5);
 8000770:	23a5      	movs	r3, #165	; 0xa5
 8000772:	22ad      	movs	r2, #173	; 0xad
 8000774:	2143      	movs	r1, #67	; 0x43
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f7ff ff1a 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x44, 0x1C, 0x34);
 800077c:	2334      	movs	r3, #52	; 0x34
 800077e:	221c      	movs	r2, #28
 8000780:	2144      	movs	r1, #68	; 0x44
 8000782:	2064      	movs	r0, #100	; 0x64
 8000784:	f7ff ff14 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x45, 0xAD, 0xA5);
 8000788:	23a5      	movs	r3, #165	; 0xa5
 800078a:	22ad      	movs	r2, #173	; 0xad
 800078c:	2145      	movs	r1, #69	; 0x45
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f7ff ff0e 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x58, 0x05, 0x44);
 8000794:	2344      	movs	r3, #68	; 0x44
 8000796:	2205      	movs	r2, #5
 8000798:	2158      	movs	r1, #88	; 0x58
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f7ff ff08 	bl	80005b0 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(ADPD188BI, 0x11, 0x30, 0xA9);
 80007a0:	23a9      	movs	r3, #169	; 0xa9
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2111      	movs	r1, #17
 80007a6:	2064      	movs	r0, #100	; 0x64
 80007a8:	f7ff ff02 	bl	80005b0 <i2c_writeRegisterByte>

    // Start normal Sampling operation
    i2c_writeRegisterByte(ADPD188BI, MODE, NORMAL_MODE_MSB, NORMAL_MODE_LSB);
 80007ac:	2302      	movs	r3, #2
 80007ae:	2200      	movs	r2, #0
 80007b0:	2110      	movs	r1, #16
 80007b2:	2064      	movs	r0, #100	; 0x64
 80007b4:	f7ff fefc 	bl	80005b0 <i2c_writeRegisterByte>
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <iot_tracker_communication>:



// Function for SPI Communication to send data to IoT Tracker
int iot_tracker_communication(uint8_t* TX_Data, uint8_t*  RX_Data ) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
		//sprintf(spimsg,"----- Communication begin -----\r\n");
		//HAL_UART_Transmit(&huart2, (uint8_t*) spimsg, strlen(spimsg), HAL_MAX_DELAY);

		//SPI Communication

		status = HAL_SPI_TransmitReceive( &hspi1, (uint8_t *) TX_Data,(uint8_t *) RX_Data,1, 0xFFFFFFFFU);
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <iot_tracker_communication+0x84>)
 80007d0:	2301      	movs	r3, #1
 80007d2:	425b      	negs	r3, r3
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	f003 fdb6 	bl	8004348 <HAL_SPI_TransmitReceive>
 80007dc:	0003      	movs	r3, r0
 80007de:	60fb      	str	r3, [r7, #12]

		uint8_t i = *RX_Data;
 80007e0:	210b      	movs	r1, #11
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	701a      	strb	r2, [r3, #0]
		//NEED TO MAKE NORMILIZATION FOR THE SENSOR DATA
		if (i == 0 || i == 3){
 80007ea:	000a      	movs	r2, r1
 80007ec:	18bb      	adds	r3, r7, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <iot_tracker_communication+0x3c>
 80007f4:	18bb      	adds	r3, r7, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d109      	bne.n	8000810 <iot_tracker_communication+0x50>
			*TX_Data = SENSOR_DATA[i];
 80007fc:	230b      	movs	r3, #11
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <iot_tracker_communication+0x88>)
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	5ad3      	ldrh	r3, [r2, r3]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	e013      	b.n	8000838 <iot_tracker_communication+0x78>
			//sprintf(msg, "I got the command to send the %d st and i will send the value: %d \r\n", i, *TX_Data);
			//HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
		}
		else if (i>0 || i < 3){
 8000810:	220b      	movs	r2, #11
 8000812:	18bb      	adds	r3, r7, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d103      	bne.n	8000822 <iot_tracker_communication+0x62>
 800081a:	18bb      	adds	r3, r7, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d80a      	bhi.n	8000838 <iot_tracker_communication+0x78>
			*TX_Data = SENSOR_DATA[i]/16;
 8000822:	230b      	movs	r3, #11
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <iot_tracker_communication+0x88>)
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	5ad3      	ldrh	r3, [r2, r3]
 800082e:	091b      	lsrs	r3, r3, #4
 8000830:	b29b      	uxth	r3, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	701a      	strb	r2, [r3, #0]
			//sprintf(msg, "I got the command to send the %d st and i will send the value: %d \r\n", i, *TX_Data);
			//HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
		}


		return 0;
 8000838:	2300      	movs	r3, #0
	}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b004      	add	sp, #16
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000104 	.word	0x20000104
 8000848:	20000288 	.word	0x20000288

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 ff02 	bl	8001658 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f854 	bl	8000900 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 fa04 	bl	8000c64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800085c:	f000 f9d2 	bl	8000c04 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000860:	f000 f8c0 	bl	80009e4 <MX_ADC_Init>
  MX_DAC_Init();
 8000864:	f000 f930 	bl	8000ac8 <MX_DAC_Init>
  MX_TIM6_Init();
 8000868:	f000 f98e 	bl	8000b88 <MX_TIM6_Init>
  MX_SPI1_Init();
 800086c:	f000 f95a 	bl	8000b24 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000870:	f000 fc8a 	bl	8001188 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000874:	f004 fe56 	bl	8005524 <osKernelInitialize>
  evt_data = osEventFlagsNew(NULL);
 8000878:	2000      	movs	r0, #0
 800087a:	f004 ff53 	bl	8005724 <osEventFlagsNew>
 800087e:	0002      	movs	r2, r0
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <main+0x88>)
 8000882:	601a      	str	r2, [r3, #0]
  evt_sleep = osEventFlagsNew(NULL);
 8000884:	2000      	movs	r0, #0
 8000886:	f004 ff4d 	bl	8005724 <osEventFlagsNew>
 800088a:	0002      	movs	r2, r0
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <main+0x8c>)
 800088e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SendData */
  SendDataHandle = osThreadNew(SendDataTask, NULL, &SendData_attributes);
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <main+0x90>)
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <main+0x94>)
 8000894:	2100      	movs	r1, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f004 fea0 	bl	80055dc <osThreadNew>
 800089c:	0002      	movs	r2, r0
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <main+0x98>)
 80008a0:	601a      	str	r2, [r3, #0]

  /* creation of DataCollection */
  DataCollectionHandle = osThreadNew(DataCollectionTask, NULL, &DataCollection_attributes);
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <main+0x9c>)
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <main+0xa0>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f004 fe97 	bl	80055dc <osThreadNew>
 80008ae:	0002      	movs	r2, r0
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <main+0xa4>)
 80008b2:	601a      	str	r2, [r3, #0]

  /* creation of Command */
  CommandHandle = osThreadNew(CommandTask, NULL, &Command_attributes);
 80008b4:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <main+0xa8>)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <main+0xac>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f004 fe8e 	bl	80055dc <osThreadNew>
 80008c0:	0002      	movs	r2, r0
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <main+0xb0>)
 80008c4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c6:	f004 fe59 	bl	800557c <osKernelStart>
 80008ca:	2300      	movs	r3, #0

  /* We should never get here as control is now taken by the scheduler */

}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000280 	.word	0x20000280
 80008d8:	20000284 	.word	0x20000284
 80008dc:	08008aa4 	.word	0x08008aa4
 80008e0:	08000e35 	.word	0x08000e35
 80008e4:	2000026c 	.word	0x2000026c
 80008e8:	08008aec 	.word	0x08008aec
 80008ec:	08000ed5 	.word	0x08000ed5
 80008f0:	20000274 	.word	0x20000274
 80008f4:	08008ac8 	.word	0x08008ac8
 80008f8:	08000d79 	.word	0x08000d79
 80008fc:	20000270 	.word	0x20000270

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b09f      	sub	sp, #124	; 0x7c
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	2440      	movs	r4, #64	; 0x40
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2338      	movs	r3, #56	; 0x38
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f007 fbd6 	bl	80080c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000916:	232c      	movs	r3, #44	; 0x2c
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	2314      	movs	r3, #20
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f007 fbce 	bl	80080c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	0018      	movs	r0, r3
 800092a:	2328      	movs	r3, #40	; 0x28
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f007 fbc7 	bl	80080c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <SystemClock_Config+0xdc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a29      	ldr	r2, [pc, #164]	; (80009e0 <SystemClock_Config+0xe0>)
 800093a:	401a      	ands	r2, r3
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <SystemClock_Config+0xdc>)
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	0109      	lsls	r1, r1, #4
 8000942:	430a      	orrs	r2, r1
 8000944:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000946:	0021      	movs	r1, r4
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2202      	movs	r2, #2
 800094c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2210      	movs	r2, #16
 8000958:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	02d2      	lsls	r2, r2, #11
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	03d2      	lsls	r2, r2, #15
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	187b      	adds	r3, r7, r1
 8000978:	0018      	movs	r0, r3
 800097a:	f002 fce5 	bl	8003348 <HAL_RCC_OscConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000982:	f000 fbe5 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB a /* while (1)nd APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	212c      	movs	r1, #44	; 0x2c
 8000988:	187b      	adds	r3, r7, r1
 800098a:	220f      	movs	r2, #15
 800098c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2203      	movs	r2, #3
 8000992:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2101      	movs	r1, #1
 80009aa:	0018      	movs	r0, r3
 80009ac:	f003 f8a0 	bl	8003af0 <HAL_RCC_ClockConfig>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009b4:	f000 fbcc 	bl	8001150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2202      	movs	r2, #2
 80009bc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	0018      	movs	r0, r3
 80009c8:	f003 fab6 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009d0:	f000 fbbe 	bl	8001150 <Error_Handler>
  }
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b01f      	add	sp, #124	; 0x7c
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	40007000 	.word	0x40007000
 80009e0:	ffffe7ff 	.word	0xffffe7ff

080009e4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	003b      	movs	r3, r7
 80009ec:	0018      	movs	r0, r3
 80009ee:	2308      	movs	r3, #8
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f007 fb65 	bl	80080c2 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_ADC_Init+0xd8>)
 80009fa:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <MX_ADC_Init+0xdc>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	05d2      	lsls	r2, r2, #23
 8000a0a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a2e:	2221      	movs	r2, #33	; 0x21
 8000a30:	2100      	movs	r1, #0
 8000a32:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a3c:	22c2      	movs	r2, #194	; 0xc2
 8000a3e:	32ff      	adds	r2, #255	; 0xff
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a44:	222c      	movs	r2, #44	; 0x2c
 8000a46:	2100      	movs	r1, #0
 8000a48:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fe80 	bl	8001770 <HAL_ADC_Init>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000a74:	f000 fb6c 	bl	8001150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0152      	lsls	r2, r2, #5
 8000a84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a86:	003a      	movs	r2, r7
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_ADC_Init+0xd8>)
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 f91f 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000a96:	f000 fb5b 	bl	8001150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <MX_ADC_Init+0xe0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa0:	003a      	movs	r2, r7
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_ADC_Init+0xd8>)
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f912 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000ab0:	f000 fb4e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000094 	.word	0x20000094
 8000ac0:	40012400 	.word	0x40012400
 8000ac4:	04000002 	.word	0x04000002

08000ac8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f007 faf3 	bl	80080c2 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_DAC_Init+0x54>)
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <MX_DAC_Init+0x58>)
 8000ae0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_DAC_Init+0x54>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fbad 	bl	8002244 <HAL_DAC_Init>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000aee:	f000 fb2f 	bl	8001150 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000af2:	003b      	movs	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000afe:	0039      	movs	r1, r7
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_DAC_Init+0x54>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 fbc1 	bl	800228c <HAL_DAC_ConfigChannel>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000b0e:	f000 fb1f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	200000f0 	.word	0x200000f0
 8000b20:	40007400 	.word	0x40007400

08000b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <MX_SPI1_Init+0x60>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <MX_SPI1_Init+0x5c>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f003 fb57 	bl	8004220 <HAL_SPI_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000b76:	f000 faeb 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000104 	.word	0x20000104
 8000b84:	40013000 	.word	0x40013000

08000b88 <MX_TIM6_Init>:
  * @param None
  * @retval None
  *
  */
static void MX_TIM6_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	003b      	movs	r3, r7
 8000b90:	0018      	movs	r0, r3
 8000b92:	2308      	movs	r3, #8
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f007 fa93 	bl	80080c2 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <MX_TIM6_Init+0x70>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000ba4:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_TIM6_Init+0x74>)
 8000ba6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <MX_TIM6_Init+0x78>)
 8000bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f003 fe53 	bl	8004868 <HAL_TIM_Base_Init>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bc6:	f000 fac3 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bd6:	003a      	movs	r2, r7
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_TIM6_Init+0x6c>)
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 fee1 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000be6:	f000 fab3 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	200001a8 	.word	0x200001a8
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	00001f3f 	.word	0x00001f3f
 8000c00:	0000ffff 	.word	0x0000ffff

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART2_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c10:	22e1      	movs	r2, #225	; 0xe1
 8000c12:	0252      	lsls	r2, r2, #9
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f003 ff09 	bl	8004a60 <HAL_UART_Init>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 fa7d 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001e8 	.word	0x200001e8
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b08b      	sub	sp, #44	; 0x2c
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	2414      	movs	r4, #20
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2314      	movs	r3, #20
 8000c72:	001a      	movs	r2, r3
 8000c74:	2100      	movs	r1, #0
 8000c76:	f007 fa24 	bl	80080c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000c80:	2104      	movs	r1, #4
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000cc8:	2102      	movs	r1, #2
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_GPIO_Init+0x10c>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fcb9 	bl	800265a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
*/
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2220      	movs	r2, #32
 8000cec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d00:	193a      	adds	r2, r7, r4
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 fb0b 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d0e:	0021      	movs	r1, r4
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2202      	movs	r2, #2
 8000d14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2288      	movs	r2, #136	; 0x88
 8000d1a:	0352      	lsls	r2, r2, #13
 8000d1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	000c      	movs	r4, r1
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_GPIO_Init+0x110>)
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	0010      	movs	r0, r2
 8000d2e:	f001 faf9 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d32:	0021      	movs	r1, r4
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	22c0      	movs	r2, #192	; 0xc0
 8000d38:	00d2      	lsls	r2, r2, #3
 8000d3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2288      	movs	r2, #136	; 0x88
 8000d40:	0352      	lsls	r2, r2, #13
 8000d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	187a      	adds	r2, r7, r1
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 fae6 	bl	8002324 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	f001 fa3f 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f001 fa51 	bl	800220a <HAL_NVIC_EnableIRQ>

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b00b      	add	sp, #44	; 0x2c
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	40021000 	.word	0x40021000
 8000d74:	50000400 	.word	0x50000400

08000d78 <CommandTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CommandTask */
void CommandTask(void *argument)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b091      	sub	sp, #68	; 0x44
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

		  /* Infinite loop */
		  for(;;)
		  {

			  __WFE();
 8000d80:	bf20      	wfe
			  sprintf(msg, "SLEEP MODE TASK!!! \r\n");
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <CommandTask+0xa8>)
 8000d84:	2408      	movs	r4, #8
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f007 f9a2 	bl	80080d4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff f9b8 	bl	8000108 <strlen>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	1939      	adds	r1, r7, r4
 8000da2:	4820      	ldr	r0, [pc, #128]	; (8000e24 <CommandTask+0xac>)
 8000da4:	f003 feb0 	bl	8004b08 <HAL_UART_Transmit>

			  flags = osEventFlagsWait(evt_sleep, FLAG_SLEEP, osFlagsWaitAny, osWaitForever);
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <CommandTask+0xb0>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	2301      	movs	r3, #1
 8000dae:	425b      	negs	r3, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	f004 fd52 	bl	800585c <osEventFlagsWait>
 8000db8:	0003      	movs	r3, r0
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c

			  sprintf(msg, "SLEEP MODE!!! \r\n");
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <CommandTask+0xb4>)
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f007 f986 	bl	80080d4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff f99c 	bl	8000108 <strlen>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	1939      	adds	r1, r7, r4
 8000dda:	4812      	ldr	r0, [pc, #72]	; (8000e24 <CommandTask+0xac>)
 8000ddc:	f003 fe94 	bl	8004b08 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000de0:	23a0      	movs	r3, #160	; 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	2201      	movs	r2, #1
 8000de6:	2120      	movs	r1, #32
 8000de8:	0018      	movs	r0, r3
 8000dea:	f001 fc36 	bl	800265a <HAL_GPIO_WritePin>





			  HAL_SuspendTick();
 8000dee:	f000 fca3 	bl	8001738 <HAL_SuspendTick>
			  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000df2:	2102      	movs	r1, #2
 8000df4:	2000      	movs	r0, #0
 8000df6:	f002 fa4b 	bl	8003290 <HAL_PWR_EnterSTOPMode>
			  //MX_SPI1_Init();
			  sprintf(msg, "exit from stop mode!!! \r\n");
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <CommandTask+0xb8>)
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f007 f967 	bl	80080d4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff f97d 	bl	8000108 <strlen>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	1939      	adds	r1, r7, r4
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <CommandTask+0xac>)
 8000e1a:	f003 fe75 	bl	8004b08 <HAL_UART_Transmit>
		  {
 8000e1e:	e7af      	b.n	8000d80 <CommandTask+0x8>
 8000e20:	080089d0 	.word	0x080089d0
 8000e24:	200001e8 	.word	0x200001e8
 8000e28:	20000284 	.word	0x20000284
 8000e2c:	080089e8 	.word	0x080089e8
 8000e30:	080089fc 	.word	0x080089fc

08000e34 <SendDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SendDataTask */
void SendDataTask(void *argument)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b093      	sub	sp, #76	; 0x4c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{


		flags = osEventFlagsWait(evt_data, FLAG_DATA, osFlagsWaitAny, osWaitForever);
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <SendDataTask+0x88>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	425b      	negs	r3, r3
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	f004 fd08 	bl	800585c <osEventFlagsWait>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(msg, "SEND DATA TASK \r\n");
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <SendDataTask+0x8c>)
 8000e52:	2410      	movs	r4, #16
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f007 f93b 	bl	80080d4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff f951 	bl	8000108 <strlen>
 8000e66:	0003      	movs	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	1939      	adds	r1, r7, r4
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <SendDataTask+0x90>)
 8000e72:	f003 fe49 	bl	8004b08 <HAL_UART_Transmit>


		uint8_t TX_Data;
		uint8_t RX_Data;

		TX_Data = SENSOR_DATA[0];
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <SendDataTask+0x94>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	701a      	strb	r2, [r3, #0]

		while(counter !=4){
 8000e82:	e00c      	b.n	8000e9e <SendDataTask+0x6a>
			iot_tracker_communication((uint8_t*) &TX_Data,(uint8_t*)  &RX_Data );
 8000e84:	240e      	movs	r4, #14
 8000e86:	193a      	adds	r2, r7, r4
 8000e88:	230f      	movs	r3, #15
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fc96 	bl	80007c0 <iot_tracker_communication>
			counter = RX_Data;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <SendDataTask+0x98>)
 8000e9c:	601a      	str	r2, [r3, #0]
		while(counter !=4){
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <SendDataTask+0x98>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d1ee      	bne.n	8000e84 <SendDataTask+0x50>




		//if(counter == 3){
			counter = -1;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <SendDataTask+0x98>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4252      	negs	r2, r2
 8000eac:	601a      	str	r2, [r3, #0]
			osEventFlagsSet(evt_sleep, FLAG_SLEEP);
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SendDataTask+0x9c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f004 fc83 	bl	80057c0 <osEventFlagsSet>
	{
 8000eba:	e7bf      	b.n	8000e3c <SendDataTask+0x8>
 8000ebc:	20000280 	.word	0x20000280
 8000ec0:	08008a18 	.word	0x08008a18
 8000ec4:	200001e8 	.word	0x200001e8
 8000ec8:	20000288 	.word	0x20000288
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000284 	.word	0x20000284

08000ed4 <DataCollectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataCollectionTask */
void DataCollectionTask(void *argument)
{
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed6:	b099      	sub	sp, #100	; 0x64
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
	char msg[50];

	/* Infinite loop */
	  for(;;)
	  {
		   sprintf(msg, "DATA COLLECTION TASK START!!! \r\n");
 8000edc:	4a90      	ldr	r2, [pc, #576]	; (8001120 <DataCollectionTask+0x24c>)
 8000ede:	2418      	movs	r4, #24
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f007 f8f5 	bl	80080d4 <siprintf>
		   HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff f90b 	bl	8000108 <strlen>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	425b      	negs	r3, r3
 8000efa:	1939      	adds	r1, r7, r4
 8000efc:	4889      	ldr	r0, [pc, #548]	; (8001124 <DataCollectionTask+0x250>)
 8000efe:	f003 fe03 	bl	8004b08 <HAL_UART_Transmit>


		   /* READ FLAME SENSOR! */

		    ADC_ChannelConfTypeDef sConfig = {0};
 8000f02:	2410      	movs	r4, #16
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	0018      	movs	r0, r3
 8000f08:	2308      	movs	r3, #8
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f007 f8d8 	bl	80080c2 <memset>
		 	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
		    	sConfig.Channel = ADC_CHANNEL_1;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	4a84      	ldr	r2, [pc, #528]	; (8001128 <DataCollectionTask+0x254>)
 8000f16:	601a      	str	r2, [r3, #0]
		    	sConfig.Rank = 1;
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	605a      	str	r2, [r3, #4]
		  	  	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f1e:	193a      	adds	r2, r7, r4
 8000f20:	4b82      	ldr	r3, [pc, #520]	; (800112c <DataCollectionTask+0x258>)
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 fed3 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <DataCollectionTask+0x5e>
		  	  	  {
		  	  	    Error_Handler();
 8000f2e:	f000 f90f 	bl	8001150 <Error_Handler>
		  	  	 }
			// Get ADC value
		      HAL_ADC_Start(&hadc);
 8000f32:	4b7e      	ldr	r3, [pc, #504]	; (800112c <DataCollectionTask+0x258>)
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fd8f 	bl	8001a58 <HAL_ADC_Start>
		      HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425a      	negs	r2, r3
 8000f3e:	4b7b      	ldr	r3, [pc, #492]	; (800112c <DataCollectionTask+0x258>)
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fe1c 	bl	8001b80 <HAL_ADC_PollForConversion>
		      flame_val = HAL_ADC_GetValue(&hadc);
 8000f48:	4b78      	ldr	r3, [pc, #480]	; (800112c <DataCollectionTask+0x258>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 feb4 	bl	8001cb8 <HAL_ADC_GetValue>
 8000f50:	0002      	movs	r2, r0
 8000f52:	2356      	movs	r3, #86	; 0x56
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	801a      	strh	r2, [r3, #0]
		      HAL_ADC_Stop(&hadc);
 8000f58:	4b74      	ldr	r3, [pc, #464]	; (800112c <DataCollectionTask+0x258>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 fdd0 	bl	8001b00 <HAL_ADC_Stop>

				sConfig.Rank = ADC_RANK_NONE;
 8000f60:	2110      	movs	r1, #16
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	4a72      	ldr	r2, [pc, #456]	; (8001130 <DataCollectionTask+0x25c>)
 8000f66:	605a      	str	r2, [r3, #4]
				if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f68:	187a      	adds	r2, r7, r1
 8000f6a:	4b70      	ldr	r3, [pc, #448]	; (800112c <DataCollectionTask+0x258>)
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 feae 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <DataCollectionTask+0xa8>
				  {
					Error_Handler();
 8000f78:	f000 f8ea 	bl	8001150 <Error_Handler>
				 }
			//Pretend we have to do something else for a while
			   ADC_ChannelConfTypeDef sConfigd = {0};
 8000f7c:	2408      	movs	r4, #8
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2308      	movs	r3, #8
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f007 f89b 	bl	80080c2 <memset>
			   sConfigd.Channel = ADC_CHANNEL_0;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
			   sConfigd.Rank = 1;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
			   if (HAL_ADC_ConfigChannel(&hadc, &sConfigd) != HAL_OK)
 8000f98:	193a      	adds	r2, r7, r4
 8000f9a:	4b64      	ldr	r3, [pc, #400]	; (800112c <DataCollectionTask+0x258>)
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fe96 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <DataCollectionTask+0xd8>
			   	   {
		 	   		Error_Handler();
 8000fa8:	f000 f8d2 	bl	8001150 <Error_Handler>
			   	   }
		   /* END FLAME SENSOR! */

		   /* READ WIND DIRECTION! */
			// Get ADC value
		 	   	HAL_ADC_Start(&hadc);
 8000fac:	4b5f      	ldr	r3, [pc, #380]	; (800112c <DataCollectionTask+0x258>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 fd52 	bl	8001a58 <HAL_ADC_Start>
		 	   	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425a      	negs	r2, r3
 8000fb8:	4b5c      	ldr	r3, [pc, #368]	; (800112c <DataCollectionTask+0x258>)
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 fddf 	bl	8001b80 <HAL_ADC_PollForConversion>
		 	   	wind_direction_val = HAL_ADC_GetValue(&hadc);
 8000fc2:	4b5a      	ldr	r3, [pc, #360]	; (800112c <DataCollectionTask+0x258>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 fe77 	bl	8001cb8 <HAL_ADC_GetValue>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	2354      	movs	r3, #84	; 0x54
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	801a      	strh	r2, [r3, #0]
		 	   	HAL_ADC_Stop(&hadc);
 8000fd2:	4b56      	ldr	r3, [pc, #344]	; (800112c <DataCollectionTask+0x258>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fd93 	bl	8001b00 <HAL_ADC_Stop>

		 	   	sConfigd.Rank = ADC_RANK_NONE;
 8000fda:	2108      	movs	r1, #8
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	4a54      	ldr	r2, [pc, #336]	; (8001130 <DataCollectionTask+0x25c>)
 8000fe0:	605a      	str	r2, [r3, #4]
		 	    		if (HAL_ADC_ConfigChannel(&hadc, &sConfigd) != HAL_OK)
 8000fe2:	187a      	adds	r2, r7, r1
 8000fe4:	4b51      	ldr	r3, [pc, #324]	; (800112c <DataCollectionTask+0x258>)
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f000 fe71 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d001      	beq.n	8000ff6 <DataCollectionTask+0x122>
		 	   		  {
		 	   			Error_Handler();
 8000ff2:	f000 f8ad 	bl	8001150 <Error_Handler>
		 	   		  }
		  /* END WIND DIRECTION! */

		  /* READ WIND SPEED */
		 	  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	00da      	lsls	r2, r3, #3
 8000ffa:	23a0      	movs	r3, #160	; 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f001 fb0d 	bl	8002620 <HAL_GPIO_ReadPin>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001006:	b662      	cpsie	i
}
 8001008:	46c0      	nop			; (mov r8, r8)
			  __enable_irq();
			 // vTaskDelay(3000);
			  Rotations = 0; // current fix (bcz exti callback is called before infinitely many time)
 800100a:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <DataCollectionTask+0x260>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
			  TickType_t currentTick = xTaskGetTickCount();
 8001010:	f005 fdce 	bl	8006bb0 <xTaskGetTickCount>
 8001014:	0003      	movs	r3, r0
 8001016:	653b      	str	r3, [r7, #80]	; 0x50
			  while(xTaskGetTickCount() - currentTick < pdMS_TO_TICKS(3000));
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	f005 fdc9 	bl	8006bb0 <xTaskGetTickCount>
 800101e:	0002      	movs	r2, r0
 8001020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <DataCollectionTask+0x264>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d9f7      	bls.n	800101a <DataCollectionTask+0x146>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102a:	b672      	cpsid	i
}
 800102c:	46c0      	nop			; (mov r8, r8)

			 // convert to mp/h using the formula V=P(2.25/T)
		     // V = P(2.25/3) = P * 0.75


			 wind_speed_val = Rotations ; //* 75  ;
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <DataCollectionTask+0x260>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	254f      	movs	r5, #79	; 0x4f
 8001034:	197b      	adds	r3, r7, r5
 8001036:	701a      	strb	r2, [r3, #0]

			 /*For debug print as above*/
			 // sprintf(msg, "Wind Speed: %d\r\n", wind_speed_val ); // mph * 100
			 // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

			  Rotations = 0;
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <DataCollectionTask+0x260>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
			  ContactBounceTime = 0;
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <DataCollectionTask+0x268>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
		     /* END WIND SPEED */

			 //Set sensor values to SENSOR_DATA array
			 SENSOR_DATA[0] = wind_speed_val;
 8001044:	197b      	adds	r3, r7, r5
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <DataCollectionTask+0x26c>)
 800104c:	801a      	strh	r2, [r3, #0]
			 SENSOR_DATA[1] = wind_direction_val;
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <DataCollectionTask+0x26c>)
 8001050:	2654      	movs	r6, #84	; 0x54
 8001052:	19ba      	adds	r2, r7, r6
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	805a      	strh	r2, [r3, #2]
			 SENSOR_DATA[2] = flame_val;
 8001058:	4b39      	ldr	r3, [pc, #228]	; (8001140 <DataCollectionTask+0x26c>)
 800105a:	2256      	movs	r2, #86	; 0x56
 800105c:	18ba      	adds	r2, r7, r2
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	809a      	strh	r2, [r3, #4]



			 ADPD188BI_StartSampling(); // Start sampling operation
 8001062:	f7ff fadb 	bl	800061c <ADPD188BI_StartSampling>

			 // Add your main loop logic here
			 smoke_detection_data = i2c_readRegisterByte(ADPD188BI, 0x64) << 8;
 8001066:	2164      	movs	r1, #100	; 0x64
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f7ff fa7b 	bl	8000564 <i2c_readRegisterByte>
 800106e:	0003      	movs	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	244c      	movs	r4, #76	; 0x4c
 8001074:	193b      	adds	r3, r7, r4
 8001076:	0212      	lsls	r2, r2, #8
 8001078:	801a      	strh	r2, [r3, #0]
			 smoke_detection_data |= i2c_readRegisterByte(ADPD188BI, 0x65);
 800107a:	2165      	movs	r1, #101	; 0x65
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f7ff fa71 	bl	8000564 <i2c_readRegisterByte>
 8001082:	0003      	movs	r3, r0
 8001084:	b299      	uxth	r1, r3
 8001086:	193b      	adds	r3, r7, r4
 8001088:	193a      	adds	r2, r7, r4
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	801a      	strh	r2, [r3, #0]
			 // Process the data as needed
			 //char buffer[20]; // A buffer to hold the string representation of the data
			 //sprintf(buffer, "Smoke data: %02d\r\n", smoke_detection_data);
			 //HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);

			 i2c_writeRegisterByte(ADPD188BI, MODE, 0x00, 0x00); //sleep mode
 8001090:	2300      	movs	r3, #0
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f7ff fa8a 	bl	80005b0 <i2c_writeRegisterByte>

			 SENSOR_DATA[3] = smoke_detection_data/125;
 800109c:	193b      	adds	r3, r7, r4
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	217d      	movs	r1, #125	; 0x7d
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff f842 	bl	800012c <__udivsi3>
 80010a8:	0003      	movs	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <DataCollectionTask+0x26c>)
 80010ae:	80da      	strh	r2, [r3, #6]

			 sprintf(msg, "DATA COLLECTION TASK END!2!! %d %d %d %d \r\n", wind_speed_val, wind_direction_val/16, flame_val/16, smoke_detection_data/125 );
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	781c      	ldrb	r4, [r3, #0]
 80010b4:	19bb      	adds	r3, r7, r6
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	001e      	movs	r6, r3
 80010be:	2256      	movs	r2, #86	; 0x56
 80010c0:	18bb      	adds	r3, r7, r2
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	001d      	movs	r5, r3
 80010ca:	234c      	movs	r3, #76	; 0x4c
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	217d      	movs	r1, #125	; 0x7d
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff f82a 	bl	800012c <__udivsi3>
 80010d8:	0003      	movs	r3, r0
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4919      	ldr	r1, [pc, #100]	; (8001144 <DataCollectionTask+0x270>)
 80010de:	2218      	movs	r2, #24
 80010e0:	18b8      	adds	r0, r7, r2
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	9500      	str	r5, [sp, #0]
 80010e6:	0033      	movs	r3, r6
 80010e8:	0022      	movs	r2, r4
 80010ea:	f006 fff3 	bl	80080d4 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010ee:	2418      	movs	r4, #24
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff f808 	bl	8000108 <strlen>
 80010f8:	0003      	movs	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	2301      	movs	r3, #1
 80010fe:	425b      	negs	r3, r3
 8001100:	1939      	adds	r1, r7, r4
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <DataCollectionTask+0x250>)
 8001104:	f003 fd00 	bl	8004b08 <HAL_UART_Transmit>

			 osEventFlagsSet(evt_data, FLAG_DATA);
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <DataCollectionTask+0x274>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	0018      	movs	r0, r3
 8001110:	f004 fb56 	bl	80057c0 <osEventFlagsSet>

			 vTaskDelay(5000);
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <DataCollectionTask+0x278>)
 8001116:	0018      	movs	r0, r3
 8001118:	f005 fc38 	bl	800698c <vTaskDelay>
	  {
 800111c:	e6de      	b.n	8000edc <DataCollectionTask+0x8>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	08008a2c 	.word	0x08008a2c
 8001124:	200001e8 	.word	0x200001e8
 8001128:	04000002 	.word	0x04000002
 800112c:	20000094 	.word	0x20000094
 8001130:	00001001 	.word	0x00001001
 8001134:	20000278 	.word	0x20000278
 8001138:	00000bb7 	.word	0x00000bb7
 800113c:	2000027c 	.word	0x2000027c
 8001140:	20000288 	.word	0x20000288
 8001144:	08008a50 	.word	0x08008a50
 8001148:	20000280 	.word	0x20000280
 800114c:	00001388 	.word	0x00001388

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001156:	b672      	cpsid	i
}
 8001158:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  char msg[50];

  while (1)
  {
	  sprintf(msg, "ERROR HANDLER\r\n");
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <Error_Handler+0x30>)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f006 ffb7 	bl	80080d4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	0018      	movs	r0, r3
 800116a:	f7fe ffcd 	bl	8000108 <strlen>
 800116e:	0003      	movs	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	1d39      	adds	r1, r7, #4
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <Error_Handler+0x34>)
 800117a:	f003 fcc5 	bl	8004b08 <HAL_UART_Transmit>
  {
 800117e:	e7ec      	b.n	800115a <Error_Handler+0xa>
 8001180:	08008a7c 	.word	0x08008a7c
 8001184:	200001e8 	.word	0x200001e8

08001188 <MX_I2C2_Init>:
  /* USER CODE END Error_Handler_Debug */
}


static void MX_I2C2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_I2C2_Init+0x74>)
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <MX_I2C2_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_I2C2_Init+0x74>)
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <MX_I2C2_Init+0x7c>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_I2C2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_I2C2_Init+0x74>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_I2C2_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_I2C2_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C2_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C2_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C2_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_I2C2_Init+0x74>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f001 fa81 	bl	80026cc <HAL_I2C_Init>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ce:	f7ff ffbf 	bl	8001150 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_I2C2_Init+0x74>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 ffc2 	bl	8003160 <HAL_I2CEx_ConfigAnalogFilter>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011e0:	f7ff ffb6 	bl	8001150 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <MX_I2C2_Init+0x74>)
 80011e6:	2100      	movs	r1, #0
 80011e8:	0018      	movs	r0, r3
 80011ea:	f002 f805 	bl	80031f8 <HAL_I2CEx_ConfigDigitalFilter>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f7ff ffad 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000015c 	.word	0x2000015c
 8001200:	40005800 	.word	0x40005800
 8001204:	00707cbb 	.word	0x00707cbb

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_MspInit+0x34>)
 800120e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_MspInit+0x34>)
 8001212:	2101      	movs	r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_MspInit+0x34>)
 800121a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_MspInit+0x34>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0549      	lsls	r1, r1, #21
 8001222:	430a      	orrs	r2, r1
 8001224:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001226:	2302      	movs	r3, #2
 8001228:	425b      	negs	r3, r3
 800122a:	2200      	movs	r2, #0
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f000 ffd6 	bl	80021e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	240c      	movs	r4, #12
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2314      	movs	r3, #20
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f006 ff35 	bl	80080c2 <memset>
  if(hadc->Instance==ADC1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_ADC_MspInit+0x70>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d122      	bne.n	80012a8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_ADC_MspInit+0x74>)
 8001264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_ADC_MspInit+0x74>)
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0089      	lsls	r1, r1, #2
 800126c:	430a      	orrs	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_ADC_MspInit+0x74>)
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_ADC_MspInit+0x74>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_ADC_MspInit+0x74>)
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001288:	193b      	adds	r3, r7, r4
 800128a:	2203      	movs	r2, #3
 800128c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2203      	movs	r2, #3
 8001292:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	193b      	adds	r3, r7, r4
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	193a      	adds	r2, r7, r4
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f001 f83e 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b009      	add	sp, #36	; 0x24
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	40012400 	.word	0x40012400
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	240c      	movs	r4, #12
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	0018      	movs	r0, r3
 80012c6:	2314      	movs	r3, #20
 80012c8:	001a      	movs	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f006 fef9 	bl	80080c2 <memset>
  if(hdac->Instance==DAC)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <HAL_DAC_MspInit+0x70>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d122      	bne.n	8001320 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_DAC_MspInit+0x74>)
 80012dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_DAC_MspInit+0x74>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0589      	lsls	r1, r1, #22
 80012e4:	430a      	orrs	r2, r1
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_DAC_MspInit+0x74>)
 80012ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_DAC_MspInit+0x74>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_DAC_MspInit+0x74>)
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2210      	movs	r2, #16
 8001304:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	193b      	adds	r3, r7, r4
 8001308:	2203      	movs	r2, #3
 800130a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	193b      	adds	r3, r7, r4
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	193a      	adds	r2, r7, r4
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f001 f802 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b009      	add	sp, #36	; 0x24
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	40007400 	.word	0x40007400
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	240c      	movs	r4, #12
 800133a:	193b      	adds	r3, r7, r4
 800133c:	0018      	movs	r0, r3
 800133e:	2314      	movs	r3, #20
 8001340:	001a      	movs	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	f006 febd 	bl	80080c2 <memset>
  if(hi2c->Instance==I2C2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d129      	bne.n	80013a6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 8001354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 8001358:	2102      	movs	r1, #2
 800135a:	430a      	orrs	r2, r1
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	22c0      	movs	r2, #192	; 0xc0
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	0021      	movs	r1, r4
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2212      	movs	r2, #18
 8001378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2203      	movs	r2, #3
 8001384:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2206      	movs	r2, #6
 800138a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	187b      	adds	r3, r7, r1
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 8001390:	0019      	movs	r1, r3
 8001392:	0010      	movs	r0, r2
 8001394:	f000 ffc6 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 800139a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	03c9      	lsls	r1, r1, #15
 80013a2:	430a      	orrs	r2, r1
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b009      	add	sp, #36	; 0x24
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40005800 	.word	0x40005800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	50000400 	.word	0x50000400

080013bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	2414      	movs	r4, #20
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	0018      	movs	r0, r3
 80013ca:	2314      	movs	r3, #20
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	f006 fe77 	bl	80080c2 <memset>
  if(hspi->Instance==SPI1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_SPI_MspInit+0xc0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d14a      	bne.n	8001474 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	0149      	lsls	r1, r1, #5
 80013e8:	430a      	orrs	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 8001406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 800140a:	2102      	movs	r1, #2
 800140c:	430a      	orrs	r2, r1
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2202      	movs	r2, #2
 8001416:	4013      	ands	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800141c:	193b      	adds	r3, r7, r4
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_SPI_MspInit+0xc8>)
 8001420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	193b      	adds	r3, r7, r4
 8001424:	2202      	movs	r2, #2
 8001426:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	2203      	movs	r2, #3
 8001432:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001434:	193b      	adds	r3, r7, r4
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	193a      	adds	r2, r7, r4
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f000 ff6e 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001448:	0021      	movs	r1, r4
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2208      	movs	r2, #8
 800144e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2202      	movs	r2, #2
 8001454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2203      	movs	r2, #3
 8001460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	187b      	adds	r3, r7, r1
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_SPI_MspInit+0xcc>)
 800146c:	0019      	movs	r1, r3
 800146e:	0010      	movs	r0, r2
 8001470:	f000 ff58 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b00b      	add	sp, #44	; 0x2c
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	40013000 	.word	0x40013000
 8001480:	40021000 	.word	0x40021000
 8001484:	000080c0 	.word	0x000080c0
 8001488:	50000400 	.word	0x50000400

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_TIM_Base_MspInit+0x28>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d105      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_TIM_Base_MspInit+0x2c>)
 80014a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_TIM_Base_MspInit+0x2c>)
 80014a4:	2110      	movs	r1, #16
 80014a6:	430a      	orrs	r2, r1
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40001000 	.word	0x40001000
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	240c      	movs	r4, #12
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	0018      	movs	r0, r3
 80014ca:	2314      	movs	r3, #20
 80014cc:	001a      	movs	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	f006 fdf7 	bl	80080c2 <memset>
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_UART_MspInit+0x80>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d129      	bne.n	8001532 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_UART_MspInit+0x84>)
 80014e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_UART_MspInit+0x84>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0289      	lsls	r1, r1, #10
 80014e8:	430a      	orrs	r2, r1
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_UART_MspInit+0x84>)
 80014ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_UART_MspInit+0x84>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_UART_MspInit+0x84>)
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001504:	0021      	movs	r1, r4
 8001506:	187b      	adds	r3, r7, r1
 8001508:	220c      	movs	r2, #12
 800150a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2202      	movs	r2, #2
 8001510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2203      	movs	r2, #3
 800151c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2204      	movs	r2, #4
 8001522:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	187a      	adds	r2, r7, r1
 8001526:	23a0      	movs	r3, #160	; 0xa0
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f000 fef9 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b009      	add	sp, #36	; 0x24
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40004400 	.word	0x40004400
 8001540:	40021000 	.word	0x40021000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 f8d4 	bl	8001700 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001558:	f005 fe90 	bl	800727c <xTaskGetSchedulerState>
 800155c:	0003      	movs	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001562:	f006 fb99 	bl	8007c98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	0018      	movs	r0, r3
 8001576:	f001 f88d 	bl	8002694 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	0018      	movs	r0, r3
 8001580:	f001 f888 	bl	8002694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f006 fd4e 	bl	800805c <__errno>
 80015c0:	0003      	movs	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	425b      	negs	r3, r3
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	18d2      	adds	r2, r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b006      	add	sp, #24
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20005000 	.word	0x20005000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000290 	.word	0x20000290
 80015f4:	20001be8 	.word	0x20001be8

080015f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001606:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopForever+0xe>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800162e:	f7ff ffe3 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f006 fd19 	bl	8008068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff f909 	bl	800084c <main>

0800163a <LoopForever>:

LoopForever:
    b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
   ldr   r0, =_estack
 800163c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001648:	08008be8 	.word	0x08008be8
  ldr r2, =_sbss
 800164c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001650:	20001be8 	.word	0x20001be8

08001654 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_COMP_IRQHandler>
	...

08001658 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_Init+0x3c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Init+0x3c>)
 800166a:	2140      	movs	r1, #64	; 0x40
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f811 	bl	8001698 <HAL_InitTick>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d003      	beq.n	8001682 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e001      	b.n	8001686 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001682:	f7ff fdc1 	bl	8001208 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x5c>)
 80016a2:	681c      	ldr	r4, [r3, #0]
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_InitTick+0x60>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	0019      	movs	r1, r3
 80016aa:	23fa      	movs	r3, #250	; 0xfa
 80016ac:	0098      	lsls	r0, r3, #2
 80016ae:	f7fe fd3d 	bl	800012c <__udivsi3>
 80016b2:	0003      	movs	r3, r0
 80016b4:	0019      	movs	r1, r3
 80016b6:	0020      	movs	r0, r4
 80016b8:	f7fe fd38 	bl	800012c <__udivsi3>
 80016bc:	0003      	movs	r3, r0
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 fdb3 	bl	800222a <HAL_SYSTICK_Config>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e00f      	b.n	80016ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d80b      	bhi.n	80016ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	2301      	movs	r3, #1
 80016d6:	425b      	negs	r3, r3
 80016d8:	2200      	movs	r2, #0
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 fd80 	bl	80021e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_InitTick+0x64>)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b003      	add	sp, #12
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	20000004 	.word	0x20000004
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000008 	.word	0x20000008

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x1c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	001a      	movs	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x20>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	18d2      	adds	r2, r2, r3
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_IncTick+0x20>)
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	2000000c 	.word	0x2000000c
 8001720:	20000294 	.word	0x20000294

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_GetTick+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20000294 	.word	0x20000294

08001738 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_SuspendTick+0x18>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_SuspendTick+0x18>)
 8001742:	2102      	movs	r1, #2
 8001744:	438a      	bics	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_ResumeTick+0x18>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_ResumeTick+0x18>)
 800175e:	2102      	movs	r1, #2
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e159      	b.n	8001a36 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10a      	bne.n	80017a0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2250      	movs	r2, #80	; 0x50
 8001794:	2100      	movs	r1, #0
 8001796:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0018      	movs	r0, r3
 800179c:	f7ff fd50 	bl	8001240 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	2210      	movs	r2, #16
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d005      	beq.n	80017b8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2204      	movs	r2, #4
 80017b4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017b6:	d00b      	beq.n	80017d0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	2210      	movs	r2, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2250      	movs	r2, #80	; 0x50
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e132      	b.n	8001a36 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <HAL_ADC_Init+0x2d0>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2202      	movs	r2, #2
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d108      	bne.n	8001800 <HAL_ADC_Init+0x90>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_ADC_Init+0x90>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_ADC_Init+0x92>
 8001800:	2300      	movs	r3, #0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d149      	bne.n	800189a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	429a      	cmp	r2, r3
 8001810:	d00b      	beq.n	800182a <HAL_ADC_Init+0xba>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	429a      	cmp	r2, r3
 800181c:	d005      	beq.n	800182a <HAL_ADC_Init+0xba>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	429a      	cmp	r2, r3
 8001828:	d111      	bne.n	800184e <HAL_ADC_Init+0xde>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	0892      	lsrs	r2, r2, #2
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	e014      	b.n	8001878 <HAL_ADC_Init+0x108>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	0892      	lsrs	r2, r2, #2
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 8001864:	4978      	ldr	r1, [pc, #480]	; (8001a48 <HAL_ADC_Init+0x2d8>)
 8001866:	400a      	ands	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4b74      	ldr	r3, [pc, #464]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2118      	movs	r1, #24
 8001884:	438a      	bics	r2, r1
 8001886:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68d9      	ldr	r1, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b69      	ldr	r3, [pc, #420]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 80018a0:	496a      	ldr	r1, [pc, #424]	; (8001a4c <HAL_ADC_Init+0x2dc>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 80018a8:	6819      	ldr	r1, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	065a      	lsls	r2, r3, #25
 80018b0:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_ADC_Init+0x2d4>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	055b      	lsls	r3, r3, #21
 80018c0:	4013      	ands	r3, r2
 80018c2:	d108      	bne.n	80018d6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0549      	lsls	r1, r1, #21
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	495b      	ldr	r1, [pc, #364]	; (8001a50 <HAL_ADC_Init+0x2e0>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_Init+0x18c>
 80018f8:	2304      	movs	r3, #4
 80018fa:	e000      	b.n	80018fe <HAL_ADC_Init+0x18e>
 80018fc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80018fe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2020      	movs	r0, #32
 8001904:	5c1b      	ldrb	r3, [r3, r0]
 8001906:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001908:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	202c      	movs	r0, #44	; 0x2c
 800190e:	5c1b      	ldrb	r3, [r3, r0]
 8001910:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001912:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001918:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001920:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001928:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001936:	23c2      	movs	r3, #194	; 0xc2
 8001938:	33ff      	adds	r3, #255	; 0xff
 800193a:	429a      	cmp	r2, r3
 800193c:	d00b      	beq.n	8001956 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68d9      	ldr	r1, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2221      	movs	r2, #33	; 0x21
 800195a:	5c9b      	ldrb	r3, [r3, r2]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d11a      	bne.n	8001996 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	5c9b      	ldrb	r3, [r3, r2]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0249      	lsls	r1, r1, #9
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e00b      	b.n	8001996 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	2220      	movs	r2, #32
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	2201      	movs	r2, #1
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	2b01      	cmp	r3, #1
 800199c:	d11f      	bne.n	80019de <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	492a      	ldr	r1, [pc, #168]	; (8001a54 <HAL_ADC_Init+0x2e4>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6919      	ldr	r1, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80019bc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80019c2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	e00e      	b.n	80019fc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2101      	movs	r1, #1
 80019f8:	438a      	bics	r2, r1
 80019fa:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2107      	movs	r1, #7
 8001a08:	438a      	bics	r2, r1
 8001a0a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6959      	ldr	r1, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a28:	2203      	movs	r2, #3
 8001a2a:	4393      	bics	r3, r2
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	fffffefd 	.word	0xfffffefd
 8001a44:	40012708 	.word	0x40012708
 8001a48:	ffc3ffff 	.word	0xffc3ffff
 8001a4c:	fdffffff 	.word	0xfdffffff
 8001a50:	fffe0219 	.word	0xfffe0219
 8001a54:	fffffc03 	.word	0xfffffc03

08001a58 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	230f      	movs	r3, #15
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d138      	bne.n	8001ae6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2250      	movs	r2, #80	; 0x50
 8001a78:	5c9b      	ldrb	r3, [r3, r2]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Start+0x2a>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e038      	b.n	8001af4 <HAL_ADC_Start+0x9c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2250      	movs	r2, #80	; 0x50
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d007      	beq.n	8001aa2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a92:	230f      	movs	r3, #15
 8001a94:	18fc      	adds	r4, r7, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 f9b9 	bl	8001e10 <ADC_Enable>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d120      	bne.n	8001aee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_ADC_Start+0xa4>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2250      	movs	r2, #80	; 0x50
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	221c      	movs	r2, #28
 8001ad2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2104      	movs	r1, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e003      	b.n	8001aee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aee:	230f      	movs	r3, #15
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b005      	add	sp, #20
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	fffff0fe 	.word	0xfffff0fe

08001b00 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2250      	movs	r2, #80	; 0x50
 8001b14:	5c9b      	ldrb	r3, [r3, r2]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Stop+0x1e>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e029      	b.n	8001b72 <HAL_ADC_Stop+0x72>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2250      	movs	r2, #80	; 0x50
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001b26:	250f      	movs	r5, #15
 8001b28:	197c      	adds	r4, r7, r5
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 fa3e 	bl	8001fae <ADC_ConversionStop>
 8001b32:	0003      	movs	r3, r0
 8001b34:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b36:	197b      	adds	r3, r7, r5
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d112      	bne.n	8001b64 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b3e:	197c      	adds	r4, r7, r5
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f9cc 	bl	8001ee0 <ADC_Disable>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b4c:	197b      	adds	r3, r7, r5
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_ADC_Stop+0x7c>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2250      	movs	r2, #80	; 0x50
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	fffffefe 	.word	0xfffffefe

08001b80 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d102      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e014      	b.n	8001bca <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10b      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2250      	movs	r2, #80	; 0x50
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e072      	b.n	8001cac <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bca:	f7ff fdab 	bl	8001724 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bd2:	e01f      	b.n	8001c14 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	d01c      	beq.n	8001c14 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_ADC_PollForConversion+0x70>
 8001be0:	f7ff fda0 	bl	8001724 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d211      	bcs.n	8001c14 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	2204      	movs	r2, #4
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2250      	movs	r2, #80	; 0x50
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e04b      	b.n	8001cac <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d0d9      	beq.n	8001bd4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d12e      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d129      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d122      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d110      	bne.n	8001c82 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	210c      	movs	r1, #12
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_ADC_PollForConversion+0x134>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	2201      	movs	r2, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c80:	e00b      	b.n	8001c9a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	2220      	movs	r2, #32
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	2201      	movs	r2, #1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b004      	add	sp, #16
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	fffffefe 	.word	0xfffffefe

08001cb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2250      	movs	r2, #80	; 0x50
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x18>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e085      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x124>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2250      	movs	r2, #80	; 0x50
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d00b      	beq.n	8001d14 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	2220      	movs	r2, #32
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2250      	movs	r2, #80	; 0x50
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e06f      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a38      	ldr	r2, [pc, #224]	; (8001dfc <HAL_ADC_ConfigChannel+0x12c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d035      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	035b      	lsls	r3, r3, #13
 8001d2a:	0b5a      	lsrs	r2, r3, #13
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	02db      	lsls	r3, r3, #11
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0409      	lsls	r1, r1, #16
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f000 f97a 	bl	8002048 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	029b      	lsls	r3, r3, #10
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d006      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	03c9      	lsls	r1, r1, #15
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	4013      	ands	r3, r2
 8001d78:	d037      	beq.n	8001dea <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0449      	lsls	r1, r1, #17
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e02f      	b.n	8001dea <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	035b      	lsls	r3, r3, #13
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	43d9      	mvns	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	02db      	lsls	r3, r3, #11
 8001daa:	4013      	ands	r3, r2
 8001dac:	d005      	beq.n	8001dba <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001db4:	4913      	ldr	r1, [pc, #76]	; (8001e04 <HAL_ADC_ConfigChannel+0x134>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d005      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <HAL_ADC_ConfigChannel+0x138>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d005      	beq.n	8001dea <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_ADC_ConfigChannel+0x130>)
 8001de4:	4909      	ldr	r1, [pc, #36]	; (8001e0c <HAL_ADC_ConfigChannel+0x13c>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2250      	movs	r2, #80	; 0x50
 8001dee:	2100      	movs	r1, #0
 8001df0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	00001001 	.word	0x00001001
 8001e00:	40012708 	.word	0x40012708
 8001e04:	ff7fffff 	.word	0xff7fffff
 8001e08:	ffbfffff 	.word	0xffbfffff
 8001e0c:	feffffff 	.word	0xfeffffff

08001e10 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2203      	movs	r2, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <ADC_Enable+0x2c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <ADC_Enable+0x2c>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <ADC_Enable+0x2e>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d146      	bne.n	8001ed0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a24      	ldr	r2, [pc, #144]	; (8001edc <ADC_Enable+0xcc>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	2210      	movs	r2, #16
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	2201      	movs	r2, #1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e033      	b.n	8001ed2 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 f8e4 	bl	8002048 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e80:	f7ff fc50 	bl	8001724 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e88:	e01b      	b.n	8001ec2 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e8a:	f7ff fc4b 	bl	8001724 <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b0a      	cmp	r3, #10
 8001e96:	d914      	bls.n	8001ec2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d00d      	beq.n	8001ec2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	2210      	movs	r2, #16
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e007      	b.n	8001ed2 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d1dc      	bne.n	8001e8a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	80000017 	.word	0x80000017

08001ee0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <ADC_Disable+0x2c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <ADC_Disable+0x2c>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <ADC_Disable+0x2e>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d048      	beq.n	8001fa4 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d110      	bne.n	8001f42 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2203      	movs	r2, #3
 8001f36:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f38:	f7ff fbf4 	bl	8001724 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f40:	e029      	b.n	8001f96 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2210      	movs	r2, #16
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	2201      	movs	r2, #1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e023      	b.n	8001fa6 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f5e:	f7ff fbe1 	bl	8001724 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b0a      	cmp	r3, #10
 8001f6a:	d914      	bls.n	8001f96 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2201      	movs	r2, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10d      	bne.n	8001f96 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	2210      	movs	r2, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e007      	b.n	8001fa6 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d0dc      	beq.n	8001f5e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}

08001fae <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d03a      	beq.n	800203c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d10d      	bne.n	8001ff0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fde:	d107      	bne.n	8001ff0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2110      	movs	r1, #16
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fb98 	bl	8001724 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001ff8:	e01a      	b.n	8002030 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ffa:	f7ff fb93 	bl	8001724 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b0a      	cmp	r3, #10
 8002006:	d913      	bls.n	8002030 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d00d      	beq.n	8002030 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	2210      	movs	r2, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	2201      	movs	r2, #1
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e006      	b.n	800203e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	d1de      	bne.n	8001ffa <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b004      	add	sp, #16
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <ADC_DelayMicroSecond+0x38>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	490b      	ldr	r1, [pc, #44]	; (8002084 <ADC_DelayMicroSecond+0x3c>)
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe f868 	bl	800012c <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	001a      	movs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4353      	muls	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002066:	e002      	b.n	800206e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3b01      	subs	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	20000004 	.word	0x20000004
 8002084:	000f4240 	.word	0x000f4240

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	0002      	movs	r2, r0
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b7f      	cmp	r3, #127	; 0x7f
 800209a:	d809      	bhi.n	80020b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	001a      	movs	r2, r3
 80020a2:	231f      	movs	r3, #31
 80020a4:	401a      	ands	r2, r3
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_EnableIRQ+0x30>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	4091      	lsls	r1, r2
 80020ac:	000a      	movs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
  }
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	0002      	movs	r2, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b7f      	cmp	r3, #127	; 0x7f
 80020d0:	d828      	bhi.n	8002124 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d2:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <__NVIC_SetPriority+0xd4>)
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	33c0      	adds	r3, #192	; 0xc0
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	589b      	ldr	r3, [r3, r2]
 80020e2:	1dfa      	adds	r2, r7, #7
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	0011      	movs	r1, r2
 80020e8:	2203      	movs	r2, #3
 80020ea:	400a      	ands	r2, r1
 80020ec:	00d2      	lsls	r2, r2, #3
 80020ee:	21ff      	movs	r1, #255	; 0xff
 80020f0:	4091      	lsls	r1, r2
 80020f2:	000a      	movs	r2, r1
 80020f4:	43d2      	mvns	r2, r2
 80020f6:	401a      	ands	r2, r3
 80020f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	22ff      	movs	r2, #255	; 0xff
 8002100:	401a      	ands	r2, r3
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	0018      	movs	r0, r3
 8002108:	2303      	movs	r3, #3
 800210a:	4003      	ands	r3, r0
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002110:	481f      	ldr	r0, [pc, #124]	; (8002190 <__NVIC_SetPriority+0xd4>)
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b25b      	sxtb	r3, r3
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	430a      	orrs	r2, r1
 800211c:	33c0      	adds	r3, #192	; 0xc0
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002122:	e031      	b.n	8002188 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <__NVIC_SetPriority+0xd8>)
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	0019      	movs	r1, r3
 800212c:	230f      	movs	r3, #15
 800212e:	400b      	ands	r3, r1
 8002130:	3b08      	subs	r3, #8
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3306      	adds	r3, #6
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	18d3      	adds	r3, r2, r3
 800213a:	3304      	adds	r3, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1dfa      	adds	r2, r7, #7
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	0011      	movs	r1, r2
 8002144:	2203      	movs	r2, #3
 8002146:	400a      	ands	r2, r1
 8002148:	00d2      	lsls	r2, r2, #3
 800214a:	21ff      	movs	r1, #255	; 0xff
 800214c:	4091      	lsls	r1, r2
 800214e:	000a      	movs	r2, r1
 8002150:	43d2      	mvns	r2, r2
 8002152:	401a      	ands	r2, r3
 8002154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	22ff      	movs	r2, #255	; 0xff
 800215c:	401a      	ands	r2, r3
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	0018      	movs	r0, r3
 8002164:	2303      	movs	r3, #3
 8002166:	4003      	ands	r3, r0
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <__NVIC_SetPriority+0xd8>)
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	001c      	movs	r4, r3
 8002174:	230f      	movs	r3, #15
 8002176:	4023      	ands	r3, r4
 8002178:	3b08      	subs	r3, #8
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	430a      	orrs	r2, r1
 800217e:	3306      	adds	r3, #6
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	18c3      	adds	r3, r0, r3
 8002184:	3304      	adds	r3, #4
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b003      	add	sp, #12
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	1e5a      	subs	r2, r3, #1
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	045b      	lsls	r3, r3, #17
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d301      	bcc.n	80021b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ac:	2301      	movs	r3, #1
 80021ae:	e010      	b.n	80021d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <SysTick_Config+0x44>)
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	3a01      	subs	r2, #1
 80021b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b8:	2301      	movs	r3, #1
 80021ba:	425b      	negs	r3, r3
 80021bc:	2103      	movs	r1, #3
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff ff7c 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x44>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x44>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	210f      	movs	r1, #15
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	1c02      	adds	r2, r0, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	0011      	movs	r1, r2
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff ff5d 	bl	80020bc <__NVIC_SetPriority>
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	0002      	movs	r2, r0
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b25b      	sxtb	r3, r3
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff ff33 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b002      	add	sp, #8
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ffaf 	bl	8002198 <SysTick_Config>
 800223a:	0003      	movs	r3, r0
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e015      	b.n	8002282 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	791b      	ldrb	r3, [r3, #4]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff f825 	bl	80012b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	795b      	ldrb	r3, [r3, #5]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_DAC_ConfigChannel+0x20>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e035      	b.n	8002318 <HAL_DAC_ConfigChannel+0x8c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2202      	movs	r2, #2
 80022b6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80022c0:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_DAC_ConfigChannel+0x94>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	43da      	mvns	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	409a      	lsls	r2, r3
 80022e2:	0013      	movs	r3, r2
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	21c0      	movs	r1, #192	; 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4099      	lsls	r1, r3
 80022fe:	000b      	movs	r3, r1
 8002300:	43d9      	mvns	r1, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	400a      	ands	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	00000ffe 	.word	0x00000ffe

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800233a:	e155      	b.n	80025e8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4091      	lsls	r1, r2
 8002346:	000a      	movs	r2, r1
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d100      	bne.n	8002354 <HAL_GPIO_Init+0x30>
 8002352:	e146      	b.n	80025e2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2203      	movs	r2, #3
 800235a:	4013      	ands	r3, r2
 800235c:	2b01      	cmp	r3, #1
 800235e:	d005      	beq.n	800236c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002368:	2b02      	cmp	r3, #2
 800236a:	d130      	bne.n	80023ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	409a      	lsls	r2, r3
 800237a:	0013      	movs	r3, r2
 800237c:	43da      	mvns	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	0013      	movs	r3, r2
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a2:	2201      	movs	r2, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	2201      	movs	r2, #1
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d017      	beq.n	800240a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2203      	movs	r2, #3
 8002410:	4013      	ands	r3, r2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d123      	bne.n	800245e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	58d3      	ldr	r3, [r2, r3]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2207      	movs	r2, #7
 8002428:	4013      	ands	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	43da      	mvns	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2107      	movs	r1, #7
 8002442:	400b      	ands	r3, r1
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	409a      	lsls	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	6939      	ldr	r1, [r7, #16]
 800245c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	401a      	ands	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	23c0      	movs	r3, #192	; 0xc0
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	4013      	ands	r3, r2
 800249c:	d100      	bne.n	80024a0 <HAL_GPIO_Init+0x17c>
 800249e:	e0a0      	b.n	80025e2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a0:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_GPIO_Init+0x2dc>)
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	4b56      	ldr	r3, [pc, #344]	; (8002600 <HAL_GPIO_Init+0x2dc>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ac:	4a55      	ldr	r2, [pc, #340]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	589b      	ldr	r3, [r3, r2]
 80024b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2203      	movs	r2, #3
 80024be:	4013      	ands	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	409a      	lsls	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	43da      	mvns	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	23a0      	movs	r3, #160	; 0xa0
 80024d4:	05db      	lsls	r3, r3, #23
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x1f6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x1f2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a49      	ldr	r2, [pc, #292]	; (800260c <HAL_GPIO_Init+0x2e8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x1ee>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a48      	ldr	r2, [pc, #288]	; (8002610 <HAL_GPIO_Init+0x2ec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x1ea>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x2f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x1e6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_GPIO_Init+0x2f4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x1e2>
 8002502:	2305      	movs	r3, #5
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 8002506:	2306      	movs	r3, #6
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	2103      	movs	r1, #3
 8002520:	400a      	ands	r2, r1
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252c:	4935      	ldr	r1, [pc, #212]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_GPIO_Init+0x2f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43da      	mvns	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	4013      	ands	r3, r2
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800255e:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_GPIO_Init+0x2f8>)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_GPIO_Init+0x2f8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_GPIO_Init+0x2f8>)
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_GPIO_Init+0x2f8>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	035b      	lsls	r3, r3, #13
 80025a6:	4013      	ands	r3, r2
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <HAL_GPIO_Init+0x2f8>)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_GPIO_Init+0x2f8>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	039b      	lsls	r3, r3, #14
 80025d0:	4013      	ands	r3, r2
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_GPIO_Init+0x2f8>)
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	40da      	lsrs	r2, r3
 80025f0:	1e13      	subs	r3, r2, #0
 80025f2:	d000      	beq.n	80025f6 <HAL_GPIO_Init+0x2d2>
 80025f4:	e6a2      	b.n	800233c <HAL_GPIO_Init+0x18>
  }
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	50000400 	.word	0x50000400
 800260c:	50000800 	.word	0x50000800
 8002610:	50000c00 	.word	0x50000c00
 8002614:	50001000 	.word	0x50001000
 8002618:	50001c00 	.word	0x50001c00
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	000a      	movs	r2, r1
 800262a:	1cbb      	adds	r3, r7, #2
 800262c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	1cba      	adds	r2, r7, #2
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	4013      	ands	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800263a:	230f      	movs	r3, #15
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e003      	b.n	800264c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002644:	230f      	movs	r3, #15
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800264c:	230f      	movs	r3, #15
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	781b      	ldrb	r3, [r3, #0]
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	0008      	movs	r0, r1
 8002664:	0011      	movs	r1, r2
 8002666:	1cbb      	adds	r3, r7, #2
 8002668:	1c02      	adds	r2, r0, #0
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	1c7b      	adds	r3, r7, #1
 800266e:	1c0a      	adds	r2, r1, #0
 8002670:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002672:	1c7b      	adds	r3, r7, #1
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267a:	1cbb      	adds	r3, r7, #2
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002682:	e003      	b.n	800268c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002684:	1cbb      	adds	r3, r7, #2
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	0002      	movs	r2, r0
 800269c:	1dbb      	adds	r3, r7, #6
 800269e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	1dba      	adds	r2, r7, #6
 80026a6:	8812      	ldrh	r2, [r2, #0]
 80026a8:	4013      	ands	r3, r2
 80026aa:	d008      	beq.n	80026be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80026ae:	1dba      	adds	r2, r7, #6
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b4:	1dbb      	adds	r3, r7, #6
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7fd ff07 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40010400 	.word	0x40010400

080026cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e082      	b.n	80027e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2241      	movs	r2, #65	; 0x41
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe fe1b 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2241      	movs	r2, #65	; 0x41
 80026fe:	2124      	movs	r1, #36	; 0x24
 8002700:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	438a      	bics	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4934      	ldr	r1, [pc, #208]	; (80027ec <HAL_I2C_Init+0x120>)
 800271c:	400a      	ands	r2, r1
 800271e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4931      	ldr	r1, [pc, #196]	; (80027f0 <HAL_I2C_Init+0x124>)
 800272c:	400a      	ands	r2, r1
 800272e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d108      	bne.n	800274a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0209      	lsls	r1, r1, #8
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e007      	b.n	800275a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2184      	movs	r1, #132	; 0x84
 8002754:	0209      	lsls	r1, r1, #8
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d104      	bne.n	800276c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	491f      	ldr	r1, [pc, #124]	; (80027f4 <HAL_I2C_Init+0x128>)
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_I2C_Init+0x124>)
 8002788:	400a      	ands	r2, r1
 800278a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	431a      	orrs	r2, r3
 8002796:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69d9      	ldr	r1, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2241      	movs	r2, #65	; 0x41
 80027d0:	2120      	movs	r1, #32
 80027d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2242      	movs	r2, #66	; 0x42
 80027de:	2100      	movs	r1, #0
 80027e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	f0ffffff 	.word	0xf0ffffff
 80027f0:	ffff7fff 	.word	0xffff7fff
 80027f4:	02008000 	.word	0x02008000

080027f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	000c      	movs	r4, r1
 8002802:	0010      	movs	r0, r2
 8002804:	0019      	movs	r1, r3
 8002806:	230a      	movs	r3, #10
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	1c22      	adds	r2, r4, #0
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	2308      	movs	r3, #8
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	1c02      	adds	r2, r0, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	1dbb      	adds	r3, r7, #6
 8002818:	1c0a      	adds	r2, r1, #0
 800281a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2241      	movs	r2, #65	; 0x41
 8002820:	5c9b      	ldrb	r3, [r3, r2]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b20      	cmp	r3, #32
 8002826:	d000      	beq.n	800282a <HAL_I2C_Mem_Write+0x32>
 8002828:	e10c      	b.n	8002a44 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_I2C_Mem_Write+0x42>
 8002830:	232c      	movs	r3, #44	; 0x2c
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0ff      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	5c9b      	ldrb	r3, [r3, r2]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_I2C_Mem_Write+0x5c>
 8002850:	2302      	movs	r3, #2
 8002852:	e0f8      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	2101      	movs	r1, #1
 800285a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800285c:	f7fe ff62 	bl	8001724 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	0219      	lsls	r1, r3, #8
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2319      	movs	r3, #25
 8002870:	2201      	movs	r2, #1
 8002872:	f000 fb0b 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0e3      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2241      	movs	r2, #65	; 0x41
 8002882:	2121      	movs	r1, #33	; 0x21
 8002884:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2242      	movs	r2, #66	; 0x42
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	222c      	movs	r2, #44	; 0x2c
 800289e:	18ba      	adds	r2, r7, r2
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028aa:	1dbb      	adds	r3, r7, #6
 80028ac:	881c      	ldrh	r4, [r3, #0]
 80028ae:	2308      	movs	r3, #8
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	230a      	movs	r3, #10
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	8819      	ldrh	r1, [r3, #0]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	0023      	movs	r3, r4
 80028c6:	f000 f9f9 	bl	8002cbc <I2C_RequestMemoryWrite>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d005      	beq.n	80028da <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0b5      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2bff      	cmp	r3, #255	; 0xff
 80028e2:	d911      	bls.n	8002908 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	045c      	lsls	r4, r3, #17
 80028f4:	230a      	movs	r3, #10
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	8819      	ldrh	r1, [r3, #0]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	0023      	movs	r3, r4
 8002902:	f000 fbf7 	bl	80030f4 <I2C_TransferConfig>
 8002906:	e012      	b.n	800292e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	049c      	lsls	r4, r3, #18
 800291c:	230a      	movs	r3, #10
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	8819      	ldrh	r1, [r3, #0]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	2300      	movs	r3, #0
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	0023      	movs	r3, r4
 800292a:	f000 fbe3 	bl	80030f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fae8 	bl	8002f0a <I2C_WaitOnTXISFlagUntilTimeout>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e081      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d03a      	beq.n	80029f2 <HAL_I2C_Mem_Write+0x1fa>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d136      	bne.n	80029f2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	0013      	movs	r3, r2
 800298e:	2200      	movs	r2, #0
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	f000 fa7b 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e053      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2bff      	cmp	r3, #255	; 0xff
 80029a6:	d911      	bls.n	80029cc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	22ff      	movs	r2, #255	; 0xff
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	045c      	lsls	r4, r3, #17
 80029b8:	230a      	movs	r3, #10
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	8819      	ldrh	r1, [r3, #0]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	2300      	movs	r3, #0
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	0023      	movs	r3, r4
 80029c6:	f000 fb95 	bl	80030f4 <I2C_TransferConfig>
 80029ca:	e012      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	049c      	lsls	r4, r3, #18
 80029e0:	230a      	movs	r3, #10
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	8819      	ldrh	r1, [r3, #0]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	0023      	movs	r3, r4
 80029ee:	f000 fb81 	bl	80030f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d198      	bne.n	800292e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fac0 	bl	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e01a      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2220      	movs	r2, #32
 8002a16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	490b      	ldr	r1, [pc, #44]	; (8002a50 <HAL_I2C_Mem_Write+0x258>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2242      	movs	r2, #66	; 0x42
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b007      	add	sp, #28
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	fe00e800 	.word	0xfe00e800

08002a54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	000c      	movs	r4, r1
 8002a5e:	0010      	movs	r0, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	230a      	movs	r3, #10
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	1c22      	adds	r2, r4, #0
 8002a68:	801a      	strh	r2, [r3, #0]
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	1c02      	adds	r2, r0, #0
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	1dbb      	adds	r3, r7, #6
 8002a74:	1c0a      	adds	r2, r1, #0
 8002a76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2241      	movs	r2, #65	; 0x41
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d000      	beq.n	8002a86 <HAL_I2C_Mem_Read+0x32>
 8002a84:	e110      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_I2C_Mem_Read+0x42>
 8002a8c:	232c      	movs	r3, #44	; 0x2c
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e103      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_I2C_Mem_Read+0x5c>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0fc      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fe34 	bl	8001724 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	0219      	lsls	r1, r3, #8
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2319      	movs	r3, #25
 8002acc:	2201      	movs	r2, #1
 8002ace:	f000 f9dd 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0e7      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2241      	movs	r2, #65	; 0x41
 8002ade:	2122      	movs	r1, #34	; 0x22
 8002ae0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2242      	movs	r2, #66	; 0x42
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	222c      	movs	r2, #44	; 0x2c
 8002afa:	18ba      	adds	r2, r7, r2
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	881c      	ldrh	r4, [r3, #0]
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	881a      	ldrh	r2, [r3, #0]
 8002b10:	230a      	movs	r3, #10
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	8819      	ldrh	r1, [r3, #0]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	0023      	movs	r3, r4
 8002b22:	f000 f92f 	bl	8002d84 <I2C_RequestMemoryRead>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2240      	movs	r2, #64	; 0x40
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0b9      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2bff      	cmp	r3, #255	; 0xff
 8002b3e:	d911      	bls.n	8002b64 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	22ff      	movs	r2, #255	; 0xff
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	045c      	lsls	r4, r3, #17
 8002b50:	230a      	movs	r3, #10
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	8819      	ldrh	r1, [r3, #0]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_I2C_Mem_Read+0x260>)
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	0023      	movs	r3, r4
 8002b5e:	f000 fac9 	bl	80030f4 <I2C_TransferConfig>
 8002b62:	e012      	b.n	8002b8a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	049c      	lsls	r4, r3, #18
 8002b78:	230a      	movs	r3, #10
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	8819      	ldrh	r1, [r3, #0]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <HAL_I2C_Mem_Read+0x260>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	0023      	movs	r3, r4
 8002b86:	f000 fab5 	bl	80030f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	0013      	movs	r3, r2
 8002b94:	2200      	movs	r2, #0
 8002b96:	2104      	movs	r1, #4
 8002b98:	f000 f978 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e082      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03a      	beq.n	8002c56 <HAL_I2C_Mem_Read+0x202>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d136      	bne.n	8002c56 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	f000 f949 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e053      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2bff      	cmp	r3, #255	; 0xff
 8002c0a:	d911      	bls.n	8002c30 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	22ff      	movs	r2, #255	; 0xff
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	045c      	lsls	r4, r3, #17
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	8819      	ldrh	r1, [r3, #0]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	0023      	movs	r3, r4
 8002c2a:	f000 fa63 	bl	80030f4 <I2C_TransferConfig>
 8002c2e:	e012      	b.n	8002c56 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	049c      	lsls	r4, r3, #18
 8002c44:	230a      	movs	r3, #10
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	8819      	ldrh	r1, [r3, #0]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	0023      	movs	r3, r4
 8002c52:	f000 fa4f 	bl	80030f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d194      	bne.n	8002b8a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f98e 	bl	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e01a      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <HAL_I2C_Mem_Read+0x264>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2241      	movs	r2, #65	; 0x41
 8002c90:	2120      	movs	r1, #32
 8002c92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2242      	movs	r2, #66	; 0x42
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e000      	b.n	8002caa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2302      	movs	r3, #2
  }
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b007      	add	sp, #28
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	80002400 	.word	0x80002400
 8002cb8:	fe00e800 	.word	0xfe00e800

08002cbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	000c      	movs	r4, r1
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	250a      	movs	r5, #10
 8002ccc:	197b      	adds	r3, r7, r5
 8002cce:	1c22      	adds	r2, r4, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	1c02      	adds	r2, r0, #0
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	1dbb      	adds	r3, r7, #6
 8002cdc:	1c0a      	adds	r2, r1, #0
 8002cde:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ce0:	1dbb      	adds	r3, r7, #6
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	045c      	lsls	r4, r3, #17
 8002cea:	197b      	adds	r3, r7, r5
 8002cec:	8819      	ldrh	r1, [r3, #0]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <I2C_RequestMemoryWrite+0xc4>)
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	0023      	movs	r3, r4
 8002cf6:	f000 f9fd 	bl	80030f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 f902 	bl	8002f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e033      	b.n	8002d76 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0e:	1dbb      	adds	r3, r7, #6
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d16:	2308      	movs	r3, #8
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
 8002d24:	e019      	b.n	8002d5a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d26:	2308      	movs	r3, #8
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	6a39      	ldr	r1, [r7, #32]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f8e3 	bl	8002f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e014      	b.n	8002d76 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	0013      	movs	r3, r2
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	f000 f890 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d001      	beq.n	8002d74 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	80002000 	.word	0x80002000

08002d84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	0010      	movs	r0, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	250a      	movs	r5, #10
 8002d94:	197b      	adds	r3, r7, r5
 8002d96:	1c22      	adds	r2, r4, #0
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	1c02      	adds	r2, r0, #0
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	1c0a      	adds	r2, r1, #0
 8002da6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002da8:	1dbb      	adds	r3, r7, #6
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	197b      	adds	r3, r7, r5
 8002db0:	8819      	ldrh	r1, [r3, #0]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <I2C_RequestMemoryRead+0xc0>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2300      	movs	r3, #0
 8002dba:	f000 f99b 	bl	80030f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	6a39      	ldr	r1, [r7, #32]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 f8a0 	bl	8002f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e033      	b.n	8002e3a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dda:	2308      	movs	r3, #8
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
 8002de8:	e019      	b.n	8002e1e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dea:	2308      	movs	r3, #8
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f881 	bl	8002f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d001      	beq.n	8002e10 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e014      	b.n	8002e3a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e10:	2308      	movs	r3, #8
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	0013      	movs	r3, r2
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	f000 f82e 	bl	8002e8c <I2C_WaitOnFlagUntilTimeout>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d001      	beq.n	8002e38 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bdb0      	pop	{r4, r5, r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	80002000 	.word	0x80002000

08002e48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d103      	bne.n	8002e66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d007      	beq.n	8002e84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	619a      	str	r2, [r3, #24]
  }
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9c:	e021      	b.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	d01e      	beq.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe fc3e 	bl	8001724 <HAL_GetTick>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2241      	movs	r2, #65	; 0x41
 8002eca:	2120      	movs	r1, #32
 8002ecc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2242      	movs	r2, #66	; 0x42
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2240      	movs	r2, #64	; 0x40
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00f      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	425a      	negs	r2, r3
 8002ef2:	4153      	adcs	r3, r2
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d0ce      	beq.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b004      	add	sp, #16
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f16:	e02b      	b.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f86e 	bl	8003000 <I2C_IsAcknowledgeFailed>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d001      	beq.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e029      	b.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	d01e      	beq.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe fbf7 	bl	8001724 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d113      	bne.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2241      	movs	r2, #65	; 0x41
 8002f58:	2120      	movs	r1, #32
 8002f5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2242      	movs	r2, #66	; 0x42
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e007      	b.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d1cc      	bne.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b004      	add	sp, #16
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f94:	e028      	b.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 f82f 	bl	8003000 <I2C_IsAcknowledgeFailed>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e026      	b.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7fe fbbb 	bl	8001724 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d113      	bne.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2241      	movs	r2, #65	; 0x41
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2242      	movs	r2, #66	; 0x42
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d1cf      	bne.n	8002f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2210      	movs	r2, #16
 8003014:	4013      	ands	r3, r2
 8003016:	2b10      	cmp	r3, #16
 8003018:	d164      	bne.n	80030e4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	049b      	lsls	r3, r3, #18
 8003024:	401a      	ands	r2, r3
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	049b      	lsls	r3, r3, #18
 800302a:	429a      	cmp	r2, r3
 800302c:	d02b      	beq.n	8003086 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	01c9      	lsls	r1, r1, #7
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003040:	e021      	b.n	8003086 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3301      	adds	r3, #1
 8003046:	d01e      	beq.n	8003086 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7fe fb6c 	bl	8001724 <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <I2C_IsAcknowledgeFailed+0x5e>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d113      	bne.n	8003086 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	2220      	movs	r2, #32
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2241      	movs	r2, #65	; 0x41
 800306e:	2120      	movs	r1, #32
 8003070:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2242      	movs	r2, #66	; 0x42
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2240      	movs	r2, #64	; 0x40
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e02f      	b.n	80030e6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2220      	movs	r2, #32
 800308e:	4013      	ands	r3, r2
 8003090:	2b20      	cmp	r3, #32
 8003092:	d1d6      	bne.n	8003042 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2210      	movs	r2, #16
 800309a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2220      	movs	r2, #32
 80030a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff fece 	bl	8002e48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	490e      	ldr	r1, [pc, #56]	; (80030f0 <I2C_IsAcknowledgeFailed+0xf0>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	2204      	movs	r2, #4
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2241      	movs	r2, #65	; 0x41
 80030cc:	2120      	movs	r1, #32
 80030ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2242      	movs	r2, #66	; 0x42
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2240      	movs	r2, #64	; 0x40
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b004      	add	sp, #16
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	fe00e800 	.word	0xfe00e800

080030f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	0008      	movs	r0, r1
 80030fe:	0011      	movs	r1, r2
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	240a      	movs	r4, #10
 8003104:	193b      	adds	r3, r7, r4
 8003106:	1c02      	adds	r2, r0, #0
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	2009      	movs	r0, #9
 800310c:	183b      	adds	r3, r7, r0
 800310e:	1c0a      	adds	r2, r1, #0
 8003110:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	0d51      	lsrs	r1, r2, #21
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	00d2      	lsls	r2, r2, #3
 8003120:	400a      	ands	r2, r1
 8003122:	490e      	ldr	r1, [pc, #56]	; (800315c <I2C_TransferConfig+0x68>)
 8003124:	430a      	orrs	r2, r1
 8003126:	43d2      	mvns	r2, r2
 8003128:	401a      	ands	r2, r3
 800312a:	0011      	movs	r1, r2
 800312c:	193b      	adds	r3, r7, r4
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	059b      	lsls	r3, r3, #22
 8003132:	0d9a      	lsrs	r2, r3, #22
 8003134:	183b      	adds	r3, r7, r0
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	0418      	lsls	r0, r3, #16
 800313a:	23ff      	movs	r3, #255	; 0xff
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	4003      	ands	r3, r0
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	431a      	orrs	r2, r3
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b005      	add	sp, #20
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	03ff63ff 	.word	0x03ff63ff

08003160 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2241      	movs	r2, #65	; 0x41
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d138      	bne.n	80031e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003180:	2302      	movs	r3, #2
 8003182:	e032      	b.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2241      	movs	r2, #65	; 0x41
 8003190:	2124      	movs	r1, #36	; 0x24
 8003192:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	438a      	bics	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4911      	ldr	r1, [pc, #68]	; (80031f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2101      	movs	r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2241      	movs	r2, #65	; 0x41
 80031d8:	2120      	movs	r1, #32
 80031da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	ffffefff 	.word	0xffffefff

080031f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2241      	movs	r2, #65	; 0x41
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d139      	bne.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2240      	movs	r2, #64	; 0x40
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003218:	2302      	movs	r3, #2
 800321a:	e033      	b.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2241      	movs	r2, #65	; 0x41
 8003228:	2124      	movs	r1, #36	; 0x24
 800322a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	438a      	bics	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2241      	movs	r2, #65	; 0x41
 8003272:	2120      	movs	r1, #32
 8003274:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2240      	movs	r2, #64	; 0x40
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}
 800328c:	fffff0ff 	.word	0xfffff0ff

08003290 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	000a      	movs	r2, r1
 800329a:	1cfb      	adds	r3, r7, #3
 800329c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_PWR_EnterSTOPMode+0xac>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	2201      	movs	r2, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_PWR_EnterSTOPMode+0x40>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032ca:	491d      	ldr	r1, [pc, #116]	; (8003340 <HAL_PWR_EnterSTOPMode+0xb0>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2203      	movs	r2, #3
 80032da:	4393      	bics	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80032ec:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_PWR_EnterSTOPMode+0xb4>)
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_PWR_EnterSTOPMode+0xb4>)
 80032f2:	2104      	movs	r1, #4
 80032f4:	430a      	orrs	r2, r1
 80032f6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80032f8:	1cfb      	adds	r3, r7, #3
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003300:	bf30      	wfi
 8003302:	e002      	b.n	800330a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003304:	bf40      	sev
    __WFE();
 8003306:	bf20      	wfe
    __WFE();
 8003308:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_PWR_EnterSTOPMode+0xb4>)
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003310:	2104      	movs	r1, #4
 8003312:	438a      	bics	r2, r1
 8003314:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_PWR_EnterSTOPMode+0xa0>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0089      	lsls	r1, r1, #2
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
  }
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b006      	add	sp, #24
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40007000 	.word	0x40007000
 800333c:	40010000 	.word	0x40010000
 8003340:	fffffdff 	.word	0xfffffdff
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f000 fbbf 	bl	8003ada <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335c:	4bc9      	ldr	r3, [pc, #804]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	220c      	movs	r2, #12
 8003362:	4013      	ands	r3, r2
 8003364:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003366:	4bc7      	ldr	r3, [pc, #796]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	025b      	lsls	r3, r3, #9
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2201      	movs	r2, #1
 8003378:	4013      	ands	r3, r2
 800337a:	d100      	bne.n	800337e <HAL_RCC_OscConfig+0x36>
 800337c:	e07e      	b.n	800347c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d007      	beq.n	8003394 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d112      	bne.n	80033b0 <HAL_RCC_OscConfig+0x68>
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	025b      	lsls	r3, r3, #9
 8003390:	429a      	cmp	r2, r3
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4bbb      	ldr	r3, [pc, #748]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	029b      	lsls	r3, r3, #10
 800339c:	4013      	ands	r3, r2
 800339e:	d100      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5a>
 80033a0:	e06b      	b.n	800347a <HAL_RCC_OscConfig+0x132>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d167      	bne.n	800347a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f000 fb95 	bl	8003ada <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x84>
 80033bc:	4bb1      	ldr	r3, [pc, #708]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4bb0      	ldr	r3, [pc, #704]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	0249      	lsls	r1, r1, #9
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e027      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	23a0      	movs	r3, #160	; 0xa0
 80033d2:	02db      	lsls	r3, r3, #11
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10e      	bne.n	80033f6 <HAL_RCC_OscConfig+0xae>
 80033d8:	4baa      	ldr	r3, [pc, #680]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4ba9      	ldr	r3, [pc, #676]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	02c9      	lsls	r1, r1, #11
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4ba7      	ldr	r3, [pc, #668]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4ba6      	ldr	r3, [pc, #664]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	0249      	lsls	r1, r1, #9
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e012      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 80033f6:	4ba3      	ldr	r3, [pc, #652]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4ba2      	ldr	r3, [pc, #648]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80033fc:	49a2      	ldr	r1, [pc, #648]	; (8003688 <HAL_RCC_OscConfig+0x340>)
 80033fe:	400a      	ands	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4ba0      	ldr	r3, [pc, #640]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4b9c      	ldr	r3, [pc, #624]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b9b      	ldr	r3, [pc, #620]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003416:	499d      	ldr	r1, [pc, #628]	; (800368c <HAL_RCC_OscConfig+0x344>)
 8003418:	400a      	ands	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe f97e 	bl	8001724 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342c:	e009      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342e:	f7fe f979 	bl	8001724 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d902      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	f000 fb4c 	bl	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003442:	4b90      	ldr	r3, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	4013      	ands	r3, r2
 800344c:	d0ef      	beq.n	800342e <HAL_RCC_OscConfig+0xe6>
 800344e:	e015      	b.n	800347c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe f968 	bl	8001724 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345a:	f7fe f963 	bl	8001724 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e336      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800346c:	4b85      	ldr	r3, [pc, #532]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	029b      	lsls	r3, r3, #10
 8003474:	4013      	ands	r3, r2
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x112>
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2202      	movs	r2, #2
 8003482:	4013      	ands	r3, r2
 8003484:	d100      	bne.n	8003488 <HAL_RCC_OscConfig+0x140>
 8003486:	e099      	b.n	80035bc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	2220      	movs	r2, #32
 8003492:	4013      	ands	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003496:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800349c:	2120      	movs	r1, #32
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	2220      	movs	r2, #32
 80034a6:	4393      	bics	r3, r2
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d13e      	bne.n	8003534 <HAL_RCC_OscConfig+0x1ec>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d13b      	bne.n	8003534 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80034bc:	4b71      	ldr	r3, [pc, #452]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2204      	movs	r2, #4
 80034c2:	4013      	ands	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_RCC_OscConfig+0x188>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e304      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_RCC_OscConfig+0x348>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	0019      	movs	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2209      	movs	r2, #9
 80034ec:	4393      	bics	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f8:	f000 fc42 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 80034fc:	0001      	movs	r1, r0
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	220f      	movs	r2, #15
 8003506:	4013      	ands	r3, r2
 8003508:	4a62      	ldr	r2, [pc, #392]	; (8003694 <HAL_RCC_OscConfig+0x34c>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	000a      	movs	r2, r1
 800350e:	40da      	lsrs	r2, r3
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_RCC_OscConfig+0x350>)
 8003512:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_OscConfig+0x354>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2513      	movs	r5, #19
 800351a:	197c      	adds	r4, r7, r5
 800351c:	0018      	movs	r0, r3
 800351e:	f7fe f8bb 	bl	8001698 <HAL_InitTick>
 8003522:	0003      	movs	r3, r0
 8003524:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003526:	197b      	adds	r3, r7, r5
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d046      	beq.n	80035bc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800352e:	197b      	adds	r3, r7, r5
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	e2d2      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d027      	beq.n	800358a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800353a:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2209      	movs	r2, #9
 8003540:	4393      	bics	r3, r2
 8003542:	0019      	movs	r1, r3
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fe f8ea 	bl	8001724 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe f8e5 	bl	8001724 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e2b8      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2204      	movs	r2, #4
 800356e:	4013      	ands	r3, r2
 8003570:	d0f1      	beq.n	8003556 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x348>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	021a      	lsls	r2, r3, #8
 8003582:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	e018      	b.n	80035bc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 8003590:	2101      	movs	r1, #1
 8003592:	438a      	bics	r2, r1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe f8c5 	bl	8001724 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe f8c0 	bl	8001724 <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e293      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2204      	movs	r2, #4
 80035b8:	4013      	ands	r3, r2
 80035ba:	d1f1      	bne.n	80035a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	4013      	ands	r3, r2
 80035c4:	d100      	bne.n	80035c8 <HAL_RCC_OscConfig+0x280>
 80035c6:	e0a2      	b.n	800370e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d140      	bne.n	8003650 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ce:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4013      	ands	r3, r2
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x29e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e279      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x358>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	0a19      	lsrs	r1, r3, #8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	061a      	lsls	r2, r3, #24
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	3301      	adds	r3, #1
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	0212      	lsls	r2, r2, #8
 800361a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	210f      	movs	r1, #15
 8003624:	400b      	ands	r3, r1
 8003626:	491b      	ldr	r1, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x34c>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCC_OscConfig+0x350>)
 800362e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCC_OscConfig+0x354>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2513      	movs	r5, #19
 8003636:	197c      	adds	r4, r7, r5
 8003638:	0018      	movs	r0, r3
 800363a:	f7fe f82d 	bl	8001698 <HAL_InitTick>
 800363e:	0003      	movs	r3, r0
 8003640:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003642:	197b      	adds	r3, r7, r5
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d061      	beq.n	800370e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800364a:	197b      	adds	r3, r7, r5
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	e244      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d040      	beq.n	80036da <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_OscConfig+0x33c>)
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	0049      	lsls	r1, r1, #1
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe f85d 	bl	8001724 <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800366e:	e019      	b.n	80036a4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003670:	f7fe f858 	bl	8001724 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d912      	bls.n	80036a4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e22b      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	40021000 	.word	0x40021000
 8003688:	fffeffff 	.word	0xfffeffff
 800368c:	fffbffff 	.word	0xfffbffff
 8003690:	ffffe0ff 	.word	0xffffe0ff
 8003694:	08008b10 	.word	0x08008b10
 8003698:	20000004 	.word	0x20000004
 800369c:	20000008 	.word	0x20000008
 80036a0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036a4:	4bca      	ldr	r3, [pc, #808]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	d0df      	beq.n	8003670 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b0:	4bc7      	ldr	r3, [pc, #796]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4ac7      	ldr	r2, [pc, #796]	; (80039d4 <HAL_RCC_OscConfig+0x68c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036be:	4bc4      	ldr	r3, [pc, #784]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c4:	4bc2      	ldr	r3, [pc, #776]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	0a19      	lsrs	r1, r3, #8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	061a      	lsls	r2, r3, #24
 80036d2:	4bbf      	ldr	r3, [pc, #764]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	e019      	b.n	800370e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036da:	4bbd      	ldr	r3, [pc, #756]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4bbc      	ldr	r3, [pc, #752]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80036e0:	49bd      	ldr	r1, [pc, #756]	; (80039d8 <HAL_RCC_OscConfig+0x690>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fe f81d 	bl	8001724 <HAL_GetTick>
 80036ea:	0003      	movs	r3, r0
 80036ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036f0:	f7fe f818 	bl	8001724 <HAL_GetTick>
 80036f4:	0002      	movs	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1eb      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003702:	4bb3      	ldr	r3, [pc, #716]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4013      	ands	r3, r2
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2208      	movs	r2, #8
 8003714:	4013      	ands	r3, r2
 8003716:	d036      	beq.n	8003786 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d019      	beq.n	8003754 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003720:	4bab      	ldr	r3, [pc, #684]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003724:	4baa      	ldr	r3, [pc, #680]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003726:	2101      	movs	r1, #1
 8003728:	430a      	orrs	r2, r1
 800372a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fd fffa 	bl	8001724 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003736:	f7fd fff5 	bl	8001724 <HAL_GetTick>
 800373a:	0002      	movs	r2, r0
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1c8      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003748:	4ba1      	ldr	r3, [pc, #644]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	2202      	movs	r2, #2
 800374e:	4013      	ands	r3, r2
 8003750:	d0f1      	beq.n	8003736 <HAL_RCC_OscConfig+0x3ee>
 8003752:	e018      	b.n	8003786 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003754:	4b9e      	ldr	r3, [pc, #632]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003758:	4b9d      	ldr	r3, [pc, #628]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800375a:	2101      	movs	r1, #1
 800375c:	438a      	bics	r2, r1
 800375e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003760:	f7fd ffe0 	bl	8001724 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800376a:	f7fd ffdb 	bl	8001724 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1ae      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800377c:	4b94      	ldr	r3, [pc, #592]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	2202      	movs	r2, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d1f1      	bne.n	800376a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2204      	movs	r2, #4
 800378c:	4013      	ands	r3, r2
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x44a>
 8003790:	e0ae      	b.n	80038f0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2023      	movs	r0, #35	; 0x23
 8003794:	183b      	adds	r3, r7, r0
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4b8d      	ldr	r3, [pc, #564]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800379c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	055b      	lsls	r3, r3, #21
 80037a2:	4013      	ands	r3, r2
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80037a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037aa:	4b89      	ldr	r3, [pc, #548]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	0549      	lsls	r1, r1, #21
 80037b0:	430a      	orrs	r2, r1
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b88      	ldr	r3, [pc, #544]	; (80039dc <HAL_RCC_OscConfig+0x694>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	d11a      	bne.n	80037fc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c6:	4b85      	ldr	r3, [pc, #532]	; (80039dc <HAL_RCC_OscConfig+0x694>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b84      	ldr	r3, [pc, #528]	; (80039dc <HAL_RCC_OscConfig+0x694>)
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	0049      	lsls	r1, r1, #1
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d4:	f7fd ffa6 	bl	8001724 <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fd ffa1 	bl	8001724 <HAL_GetTick>
 80037e2:	0002      	movs	r2, r0
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b64      	cmp	r3, #100	; 0x64
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e174      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	4b7a      	ldr	r3, [pc, #488]	; (80039dc <HAL_RCC_OscConfig+0x694>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	429a      	cmp	r2, r3
 8003806:	d107      	bne.n	8003818 <HAL_RCC_OscConfig+0x4d0>
 8003808:	4b71      	ldr	r3, [pc, #452]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800380a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800380c:	4b70      	ldr	r3, [pc, #448]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	0049      	lsls	r1, r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	651a      	str	r2, [r3, #80]	; 0x50
 8003816:	e031      	b.n	800387c <HAL_RCC_OscConfig+0x534>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x4f2>
 8003820:	4b6b      	ldr	r3, [pc, #428]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003826:	496c      	ldr	r1, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x690>)
 8003828:	400a      	ands	r2, r1
 800382a:	651a      	str	r2, [r3, #80]	; 0x50
 800382c:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800382e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003830:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003832:	496b      	ldr	r1, [pc, #428]	; (80039e0 <HAL_RCC_OscConfig+0x698>)
 8003834:	400a      	ands	r2, r1
 8003836:	651a      	str	r2, [r3, #80]	; 0x50
 8003838:	e020      	b.n	800387c <HAL_RCC_OscConfig+0x534>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	23a0      	movs	r3, #160	; 0xa0
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	429a      	cmp	r2, r3
 8003844:	d10e      	bne.n	8003864 <HAL_RCC_OscConfig+0x51c>
 8003846:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	00c9      	lsls	r1, r1, #3
 8003850:	430a      	orrs	r2, r1
 8003852:	651a      	str	r2, [r3, #80]	; 0x50
 8003854:	4b5e      	ldr	r3, [pc, #376]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003858:	4b5d      	ldr	r3, [pc, #372]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	0049      	lsls	r1, r1, #1
 800385e:	430a      	orrs	r2, r1
 8003860:	651a      	str	r2, [r3, #80]	; 0x50
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x534>
 8003864:	4b5a      	ldr	r3, [pc, #360]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 800386a:	495b      	ldr	r1, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x690>)
 800386c:	400a      	ands	r2, r1
 800386e:	651a      	str	r2, [r3, #80]	; 0x50
 8003870:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003874:	4b56      	ldr	r3, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003876:	495a      	ldr	r1, [pc, #360]	; (80039e0 <HAL_RCC_OscConfig+0x698>)
 8003878:	400a      	ands	r2, r1
 800387a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d015      	beq.n	80038b0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fd ff4e 	bl	8001724 <HAL_GetTick>
 8003888:	0003      	movs	r3, r0
 800388a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800388c:	e009      	b.n	80038a2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd ff49 	bl	8001724 <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_OscConfig+0x69c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e11b      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a2:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80038a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	d0ef      	beq.n	800388e <HAL_RCC_OscConfig+0x546>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7fd ff38 	bl	8001724 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038b8:	e009      	b.n	80038ce <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd ff33 	bl	8001724 <HAL_GetTick>
 80038be:	0002      	movs	r2, r0
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	4a47      	ldr	r2, [pc, #284]	; (80039e4 <HAL_RCC_OscConfig+0x69c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e105      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80038d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038da:	2323      	movs	r3, #35	; 0x23
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80038e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80038ea:	493f      	ldr	r1, [pc, #252]	; (80039e8 <HAL_RCC_OscConfig+0x6a0>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2220      	movs	r2, #32
 80038f6:	4013      	ands	r3, r2
 80038f8:	d049      	beq.n	800398e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d026      	beq.n	8003950 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003902:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003908:	2101      	movs	r1, #1
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003914:	2101      	movs	r1, #1
 8003916:	430a      	orrs	r2, r1
 8003918:	635a      	str	r2, [r3, #52]	; 0x34
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x6a4>)
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_RCC_OscConfig+0x6a4>)
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0189      	lsls	r1, r1, #6
 8003924:	430a      	orrs	r2, r1
 8003926:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd fefc 	bl	8001724 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003932:	f7fd fef7 	bl	8001724 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0ca      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003944:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	d0f1      	beq.n	8003932 <HAL_RCC_OscConfig+0x5ea>
 800394e:	e01e      	b.n	800398e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003956:	2101      	movs	r1, #1
 8003958:	438a      	bics	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCC_OscConfig+0x6a4>)
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_OscConfig+0x6a4>)
 8003962:	4923      	ldr	r1, [pc, #140]	; (80039f0 <HAL_RCC_OscConfig+0x6a8>)
 8003964:	400a      	ands	r2, r1
 8003966:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd fedc 	bl	8001724 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003972:	f7fd fed7 	bl	8001724 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0aa      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d1f1      	bne.n	8003972 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d100      	bne.n	8003998 <HAL_RCC_OscConfig+0x650>
 8003996:	e09f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d100      	bne.n	80039a0 <HAL_RCC_OscConfig+0x658>
 800399e:	e078      	b.n	8003a92 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d159      	bne.n	8003a5c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCC_OscConfig+0x688>)
 80039ae:	4911      	ldr	r1, [pc, #68]	; (80039f4 <HAL_RCC_OscConfig+0x6ac>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd feb6 	bl	8001724 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039bc:	e01c      	b.n	80039f8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd feb1 	bl	8001724 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d915      	bls.n	80039f8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e084      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
 80039d0:	40021000 	.word	0x40021000
 80039d4:	ffff1fff 	.word	0xffff1fff
 80039d8:	fffffeff 	.word	0xfffffeff
 80039dc:	40007000 	.word	0x40007000
 80039e0:	fffffbff 	.word	0xfffffbff
 80039e4:	00001388 	.word	0x00001388
 80039e8:	efffffff 	.word	0xefffffff
 80039ec:	40010000 	.word	0x40010000
 80039f0:	ffffdfff 	.word	0xffffdfff
 80039f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039f8:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	049b      	lsls	r3, r3, #18
 8003a00:	4013      	ands	r3, r2
 8003a02:	d1dc      	bne.n	80039be <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a04:	4b37      	ldr	r3, [pc, #220]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a37      	ldr	r2, [pc, #220]	; (8003ae8 <HAL_RCC_OscConfig+0x7a0>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	0449      	lsls	r1, r1, #17
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fd fe77 	bl	8001724 <HAL_GetTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd fe72 	bl	8001724 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e045      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	049b      	lsls	r3, r3, #18
 8003a56:	4013      	ands	r3, r2
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x6f4>
 8003a5a:	e03d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a62:	4922      	ldr	r1, [pc, #136]	; (8003aec <HAL_RCC_OscConfig+0x7a4>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fe5c 	bl	8001724 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fd fe57 	bl	8001724 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e02a      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	049b      	lsls	r3, r3, #18
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x72a>
 8003a90:	e022      	b.n	8003ad8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e01d      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x79c>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	025b      	lsls	r3, r3, #9
 8003aaa:	401a      	ands	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	23f0      	movs	r3, #240	; 0xf0
 8003ab8:	039b      	lsls	r3, r3, #14
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	23c0      	movs	r3, #192	; 0xc0
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	0018      	movs	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b00a      	add	sp, #40	; 0x28
 8003ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	ff02ffff 	.word	0xff02ffff
 8003aec:	feffffff 	.word	0xfeffffff

08003af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e128      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b04:	4b96      	ldr	r3, [pc, #600]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d91e      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b93      	ldr	r3, [pc, #588]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4393      	bics	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	4b90      	ldr	r3, [pc, #576]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fdfe 	bl	8001724 <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2c:	e009      	b.n	8003b42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2e:	f7fd fdf9 	bl	8001724 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	4a8a      	ldr	r2, [pc, #552]	; (8003d64 <HAL_RCC_ClockConfig+0x274>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e109      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b87      	ldr	r3, [pc, #540]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2201      	movs	r2, #1
 8003b48:	4013      	ands	r3, r2
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2202      	movs	r2, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5a:	4b83      	ldr	r3, [pc, #524]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	22f0      	movs	r2, #240	; 0xf0
 8003b60:	4393      	bics	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2201      	movs	r2, #1
 8003b74:	4013      	ands	r3, r2
 8003b76:	d100      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x8a>
 8003b78:	e089      	b.n	8003c8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b82:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	029b      	lsls	r3, r3, #10
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d120      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e0e1      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b9a:	4b73      	ldr	r3, [pc, #460]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	049b      	lsls	r3, r3, #18
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d114      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0d5      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d109      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0ca      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003bc0:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0c2      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd0:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	4b62      	ldr	r3, [pc, #392]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003be0:	430a      	orrs	r2, r1
 8003be2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd fd9e 	bl	8001724 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf4:	e009      	b.n	8003c0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf6:	f7fd fd95 	bl	8001724 <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <HAL_RCC_ClockConfig+0x274>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0a5      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c0a:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	220c      	movs	r2, #12
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d1ef      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x106>
 8003c16:	e03a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	e009      	b.n	8003c36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c22:	f7fd fd7f 	bl	8001724 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	4a4d      	ldr	r2, [pc, #308]	; (8003d64 <HAL_RCC_ClockConfig+0x274>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e08f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c36:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d1ef      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x132>
 8003c42:	e024      	b.n	8003c8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d11b      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c4c:	e009      	b.n	8003c62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4e:	f7fd fd69 	bl	8001724 <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_RCC_ClockConfig+0x274>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e079      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	220c      	movs	r2, #12
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d1ef      	bne.n	8003c4e <HAL_RCC_ClockConfig+0x15e>
 8003c6e:	e00e      	b.n	8003c8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fd fd58 	bl	8001724 <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	4a3a      	ldr	r2, [pc, #232]	; (8003d64 <HAL_RCC_ClockConfig+0x274>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e068      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c84:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	220c      	movs	r2, #12
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4013      	ands	r3, r2
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d21e      	bcs.n	8003cda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4393      	bics	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cae:	f7fd fd39 	bl	8001724 <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	e009      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fd fd34 	bl	8001724 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <HAL_RCC_ClockConfig+0x274>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e044      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_ClockConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d1ee      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x27c>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <HAL_RCC_ClockConfig+0x280>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	00da      	lsls	r2, r3, #3
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003d14:	430a      	orrs	r2, r1
 8003d16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d18:	f000 f832 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d1c:	0001      	movs	r1, r0
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x278>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	220f      	movs	r2, #15
 8003d26:	4013      	ands	r3, r2
 8003d28:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_RCC_ClockConfig+0x284>)
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	000a      	movs	r2, r1
 8003d2e:	40da      	lsrs	r2, r3
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_ClockConfig+0x288>)
 8003d32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCC_ClockConfig+0x28c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	250b      	movs	r5, #11
 8003d3a:	197c      	adds	r4, r7, r5
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7fd fcab 	bl	8001698 <HAL_InitTick>
 8003d42:	0003      	movs	r3, r0
 8003d44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003d46:	197b      	adds	r3, r7, r5
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003d4e:	197b      	adds	r3, r7, r5
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	40022000 	.word	0x40022000
 8003d64:	00001388 	.word	0x00001388
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	fffff8ff 	.word	0xfffff8ff
 8003d70:	ffffc7ff 	.word	0xffffc7ff
 8003d74:	08008b10 	.word	0x08008b10
 8003d78:	20000004 	.word	0x20000004
 8003d7c:	20000008 	.word	0x20000008

08003d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d86:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8e:	230c      	movs	r3, #12
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d014      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d96:	d900      	bls.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1a>
 8003d98:	e07b      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x112>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x24>
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d00b      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x3a>
 8003da2:	e076      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003da4:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2210      	movs	r2, #16
 8003daa:	4013      	ands	r3, r2
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003db2:	e07c      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003db8:	e079      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dba:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dbe:	e076      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	0c9a      	lsrs	r2, r3, #18
 8003dc4:	230f      	movs	r3, #15
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x148>)
 8003dca:	5c9b      	ldrb	r3, [r3, r2]
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	0d9a      	lsrs	r2, r3, #22
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	025b      	lsls	r3, r3, #9
 8003de2:	4013      	ands	r3, r2
 8003de4:	d01a      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	4a35      	ldr	r2, [pc, #212]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003df0:	2300      	movs	r3, #0
 8003df2:	69b8      	ldr	r0, [r7, #24]
 8003df4:	69f9      	ldr	r1, [r7, #28]
 8003df6:	f7fc fa45 	bl	8000284 <__aeabi_lmul>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	000b      	movs	r3, r1
 8003dfe:	0010      	movs	r0, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f7fc fa19 	bl	8000244 <__aeabi_uldivmod>
 8003e12:	0002      	movs	r2, r0
 8003e14:	000b      	movs	r3, r1
 8003e16:	0013      	movs	r3, r2
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1a:	e037      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e1c:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2210      	movs	r2, #16
 8003e22:	4013      	ands	r3, r2
 8003e24:	d01a      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e30:	2300      	movs	r3, #0
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	68f9      	ldr	r1, [r7, #12]
 8003e36:	f7fc fa25 	bl	8000284 <__aeabi_lmul>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	000b      	movs	r3, r1
 8003e3e:	0010      	movs	r0, r2
 8003e40:	0019      	movs	r1, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f7fc f9f9 	bl	8000244 <__aeabi_uldivmod>
 8003e52:	0002      	movs	r2, r0
 8003e54:	000b      	movs	r3, r1
 8003e56:	0013      	movs	r3, r2
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5a:	e017      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	0018      	movs	r0, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	0019      	movs	r1, r3
 8003e64:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003e66:	2300      	movs	r3, #0
 8003e68:	f7fc fa0c 	bl	8000284 <__aeabi_lmul>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	000b      	movs	r3, r1
 8003e70:	0010      	movs	r0, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	001c      	movs	r4, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	001d      	movs	r5, r3
 8003e7c:	0022      	movs	r2, r4
 8003e7e:	002b      	movs	r3, r5
 8003e80:	f7fc f9e0 	bl	8000244 <__aeabi_uldivmod>
 8003e84:	0002      	movs	r2, r0
 8003e86:	000b      	movs	r3, r1
 8003e88:	0013      	movs	r3, r2
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e90:	e00d      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0b5b      	lsrs	r3, r3, #13
 8003e98:	2207      	movs	r2, #7
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	0212      	lsls	r2, r2, #8
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003eac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b00e      	add	sp, #56	; 0x38
 8003eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	003d0900 	.word	0x003d0900
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	007a1200 	.word	0x007a1200
 8003ec8:	08008b28 	.word	0x08008b28

08003ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee4:	f7ff fff2 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003ee8:	0001      	movs	r1, r0
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	40d9      	lsrs	r1, r3
 8003efa:	000b      	movs	r3, r1
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08008b20 	.word	0x08008b20

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffdc 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f14:	0001      	movs	r1, r0
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	0adb      	lsrs	r3, r3, #11
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	4013      	ands	r3, r2
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	40d9      	lsrs	r1, r3
 8003f26:	000b      	movs	r3, r1
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08008b20 	.word	0x08008b20

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003f40:	2317      	movs	r3, #23
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d106      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d100      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003f5e:	e0d9      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f60:	4ba4      	ldr	r3, [pc, #656]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	055b      	lsls	r3, r3, #21
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d10a      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6c:	4ba1      	ldr	r3, [pc, #644]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f70:	4ba0      	ldr	r3, [pc, #640]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	0549      	lsls	r1, r1, #21
 8003f76:	430a      	orrs	r2, r1
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003f7a:	2317      	movs	r3, #23
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b9d      	ldr	r3, [pc, #628]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d11a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8e:	4b9a      	ldr	r3, [pc, #616]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b99      	ldr	r3, [pc, #612]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	0049      	lsls	r1, r1, #1
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9c:	f7fd fbc2 	bl	8001724 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fd fbbd 	bl	8001724 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	; 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e118      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	4b8f      	ldr	r3, [pc, #572]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003fc4:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	23c0      	movs	r3, #192	; 0xc0
 8003fca:	039b      	lsls	r3, r3, #14
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	23c0      	movs	r3, #192	; 0xc0
 8003fd6:	039b      	lsls	r3, r3, #14
 8003fd8:	4013      	ands	r3, r2
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	23c0      	movs	r3, #192	; 0xc0
 8003fe6:	039b      	lsls	r3, r3, #14
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d013      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	23c0      	movs	r3, #192	; 0xc0
 8003ff6:	029b      	lsls	r3, r3, #10
 8003ff8:	401a      	ands	r2, r3
 8003ffa:	23c0      	movs	r3, #192	; 0xc0
 8003ffc:	029b      	lsls	r3, r3, #10
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d10a      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004002:	4b7c      	ldr	r3, [pc, #496]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	401a      	ands	r2, r3
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	029b      	lsls	r3, r3, #10
 8004010:	429a      	cmp	r2, r3
 8004012:	d101      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0e8      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004018:	4b76      	ldr	r3, [pc, #472]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800401a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800401c:	23c0      	movs	r3, #192	; 0xc0
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d049      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x186>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	23c0      	movs	r3, #192	; 0xc0
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	4013      	ands	r3, r2
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	429a      	cmp	r2, r3
 8004038:	d004      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2220      	movs	r2, #32
 8004040:	4013      	ands	r3, r2
 8004042:	d10d      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	23c0      	movs	r3, #192	; 0xc0
 800404a:	029b      	lsls	r3, r3, #10
 800404c:	4013      	ands	r3, r2
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d034      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4013      	ands	r3, r2
 800405e:	d02e      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004060:	4b64      	ldr	r3, [pc, #400]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004064:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004066:	4013      	ands	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800406a:	4b62      	ldr	r3, [pc, #392]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800406c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800406e:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0309      	lsls	r1, r1, #12
 8004074:	430a      	orrs	r2, r1
 8004076:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004078:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800407a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800407c:	4b5d      	ldr	r3, [pc, #372]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800407e:	4960      	ldr	r1, [pc, #384]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004080:	400a      	ands	r2, r1
 8004082:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004084:	4b5b      	ldr	r3, [pc, #364]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4013      	ands	r3, r2
 8004092:	d014      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fd fb46 	bl	8001724 <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800409c:	e009      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fd fb41 	bl	8001724 <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	4a56      	ldr	r2, [pc, #344]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e09b      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040b2:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d0ef      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	23c0      	movs	r3, #192	; 0xc0
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	401a      	ands	r2, r3
 80040c8:	23c0      	movs	r3, #192	; 0xc0
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d10c      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80040d0:	4b48      	ldr	r3, [pc, #288]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a4c      	ldr	r2, [pc, #304]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	23c0      	movs	r3, #192	; 0xc0
 80040e0:	039b      	lsls	r3, r3, #14
 80040e2:	401a      	ands	r2, r3
 80040e4:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	23c0      	movs	r3, #192	; 0xc0
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	401a      	ands	r2, r3
 80040f8:	4b3e      	ldr	r3, [pc, #248]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040fa:	430a      	orrs	r2, r1
 80040fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040fe:	2317      	movs	r3, #23
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004108:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800410a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410c:	4b39      	ldr	r3, [pc, #228]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800410e:	493f      	ldr	r1, [pc, #252]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004110:	400a      	ands	r2, r1
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	4013      	ands	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	2203      	movs	r2, #3
 8004124:	4393      	bics	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800412e:	430a      	orrs	r2, r1
 8004130:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2202      	movs	r2, #2
 8004138:	4013      	ands	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	220c      	movs	r2, #12
 8004142:	4393      	bics	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800414c:	430a      	orrs	r2, r1
 800414e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2204      	movs	r2, #4
 8004156:	4013      	ands	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415a:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	4a2c      	ldr	r2, [pc, #176]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004160:	4013      	ands	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800416a:	430a      	orrs	r2, r1
 800416c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2208      	movs	r2, #8
 8004174:	4013      	ands	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800417e:	4013      	ands	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004188:	430a      	orrs	r2, r1
 800418a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4013      	ands	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004198:	4b16      	ldr	r3, [pc, #88]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800419a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2240      	movs	r2, #64	; 0x40
 80041b2:	4013      	ands	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	4013      	ands	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	4a10      	ldr	r2, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041e4:	430a      	orrs	r2, r1
 80041e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b006      	add	sp, #24
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	fffcffff 	.word	0xfffcffff
 8004200:	fff7ffff 	.word	0xfff7ffff
 8004204:	00001388 	.word	0x00001388
 8004208:	ffcfffff 	.word	0xffcfffff
 800420c:	efffffff 	.word	0xefffffff
 8004210:	fffff3ff 	.word	0xfffff3ff
 8004214:	ffffcfff 	.word	0xffffcfff
 8004218:	fbffffff 	.word	0xfbffffff
 800421c:	fff3ffff 	.word	0xfff3ffff

08004220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e083      	b.n	800433a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	2382      	movs	r3, #130	; 0x82
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	429a      	cmp	r2, r3
 8004244:	d009      	beq.n	800425a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	61da      	str	r2, [r3, #28]
 800424c:	e005      	b.n	800425a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2251      	movs	r2, #81	; 0x51
 8004264:	5c9b      	ldrb	r3, [r3, r2]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2250      	movs	r2, #80	; 0x50
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	0018      	movs	r0, r3
 8004278:	f7fd f8a0 	bl	80013bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2251      	movs	r2, #81	; 0x51
 8004280:	2102      	movs	r1, #2
 8004282:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2140      	movs	r1, #64	; 0x40
 8004290:	438a      	bics	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	2382      	movs	r3, #130	; 0x82
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	401a      	ands	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	2384      	movs	r3, #132	; 0x84
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	400b      	ands	r3, r1
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68d9      	ldr	r1, [r3, #12]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	400b      	ands	r3, r1
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2102      	movs	r1, #2
 80042bc:	400b      	ands	r3, r1
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2101      	movs	r1, #1
 80042c6:	400b      	ands	r3, r1
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6999      	ldr	r1, [r3, #24]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	400b      	ands	r3, r1
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2138      	movs	r1, #56	; 0x38
 80042dc:	400b      	ands	r3, r1
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	400b      	ands	r3, r1
 80042e8:	431a      	orrs	r2, r3
 80042ea:	0011      	movs	r1, r2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	019b      	lsls	r3, r3, #6
 80042f4:	401a      	ands	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	2204      	movs	r2, #4
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2210      	movs	r2, #16
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4907      	ldr	r1, [pc, #28]	; (8004344 <HAL_SPI_Init+0x124>)
 8004326:	400a      	ands	r2, r1
 8004328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2251      	movs	r2, #81	; 0x51
 8004334:	2101      	movs	r1, #1
 8004336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b002      	add	sp, #8
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	fffff7ff 	.word	0xfffff7ff

08004348 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	001a      	movs	r2, r3
 8004356:	1cbb      	adds	r3, r7, #2
 8004358:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800435a:	2301      	movs	r3, #1
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800435e:	232b      	movs	r3, #43	; 0x2b
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2250      	movs	r2, #80	; 0x50
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x2c>
 8004370:	2302      	movs	r3, #2
 8004372:	e1a0      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x36e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2250      	movs	r2, #80	; 0x50
 8004378:	2101      	movs	r1, #1
 800437a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800437c:	f7fd f9d2 	bl	8001724 <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004384:	2023      	movs	r0, #35	; 0x23
 8004386:	183b      	adds	r3, r7, r0
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	2151      	movs	r1, #81	; 0x51
 800438c:	5c52      	ldrb	r2, [r2, r1]
 800438e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004396:	231a      	movs	r3, #26
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	1cba      	adds	r2, r7, #2
 800439c:	8812      	ldrh	r2, [r2, #0]
 800439e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043a0:	183b      	adds	r3, r7, r0
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d011      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x84>
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	2382      	movs	r3, #130	; 0x82
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d107      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x7a>
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d004      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80043c2:	232b      	movs	r3, #43	; 0x2b
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80043ca:	e169      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x98>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x98>
 80043d8:	1cbb      	adds	r3, r7, #2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80043e0:	232b      	movs	r3, #43	; 0x2b
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80043e8:	e15a      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2251      	movs	r2, #81	; 0x51
 80043ee:	5c9b      	ldrb	r3, [r3, r2]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2251      	movs	r2, #81	; 0x51
 80043fa:	2105      	movs	r1, #5
 80043fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1cba      	adds	r2, r7, #2
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1cba      	adds	r2, r7, #2
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1cba      	adds	r2, r7, #2
 8004424:	8812      	ldrh	r2, [r2, #0]
 8004426:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1cba      	adds	r2, r7, #2
 800442c:	8812      	ldrh	r2, [r2, #0]
 800442e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	4013      	ands	r3, r2
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d007      	beq.n	800445a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2140      	movs	r1, #64	; 0x40
 8004456:	430a      	orrs	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	429a      	cmp	r2, r3
 8004464:	d000      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x120>
 8004466:	e07a      	b.n	800455e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_SPI_TransmitReceive+0x132>
 8004470:	231a      	movs	r3, #26
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d166      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	1c9a      	adds	r2, r3, #2
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449e:	e053      	b.n	8004548 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2202      	movs	r2, #2
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d11b      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x19e>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x19e>
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d113      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d119      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x1e0>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	b292      	uxth	r2, r2
 800450a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	1c9a      	adds	r2, r3, #2
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004524:	2301      	movs	r3, #1
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004528:	f7fd f8fc 	bl	8001724 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004534:	429a      	cmp	r2, r3
 8004536:	d807      	bhi.n	8004548 <HAL_SPI_TransmitReceive+0x200>
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	3301      	adds	r3, #1
 800453c:	d004      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800453e:	232b      	movs	r3, #43	; 0x2b
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2203      	movs	r2, #3
 8004544:	701a      	strb	r2, [r3, #0]
        goto error;
 8004546:	e0ab      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1a6      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x158>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1a1      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x158>
 800455c:	e07f      	b.n	800465e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x22a>
 8004566:	231a      	movs	r3, #26
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d000      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x22a>
 8004570:	e06b      	b.n	800464a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004598:	e057      	b.n	800464a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2202      	movs	r2, #2
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d11c      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x29a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d017      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0x29a>
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d114      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d119      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x2dc>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d014      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004620:	2301      	movs	r3, #1
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004624:	f7fd f87e 	bl	8001724 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004630:	429a      	cmp	r2, r3
 8004632:	d802      	bhi.n	800463a <HAL_SPI_TransmitReceive+0x2f2>
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	3301      	adds	r3, #1
 8004638:	d102      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x2f8>
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8004640:	232b      	movs	r3, #43	; 0x2b
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2203      	movs	r2, #3
 8004646:	701a      	strb	r2, [r3, #0]
        goto error;
 8004648:	e02a      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1a2      	bne.n	800459a <HAL_SPI_TransmitReceive+0x252>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d19d      	bne.n	800459a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800465e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004660:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 f8b9 	bl	80047dc <SPI_EndRxTxTransaction>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d007      	beq.n	800467e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800466e:	232b      	movs	r3, #43	; 0x2b
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800467c:	e010      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	e000      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800469e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2251      	movs	r2, #81	; 0x51
 80046a4:	2101      	movs	r1, #1
 80046a6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2250      	movs	r2, #80	; 0x50
 80046ac:	2100      	movs	r1, #0
 80046ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80046b0:	232b      	movs	r3, #43	; 0x2b
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781b      	ldrb	r3, [r3, #0]
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b00c      	add	sp, #48	; 0x30
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	1dfb      	adds	r3, r7, #7
 80046ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d0:	f7fd f828 	bl	8001724 <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e0:	f7fd f820 	bl	8001724 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046e8:	4b3a      	ldr	r3, [pc, #232]	; (80047d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	015b      	lsls	r3, r3, #5
 80046ee:	0d1b      	lsrs	r3, r3, #20
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	4353      	muls	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f6:	e058      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	d055      	beq.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046fe:	f7fd f811 	bl	8001724 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	429a      	cmp	r2, r3
 800470c:	d902      	bls.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x54>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d142      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	21e0      	movs	r1, #224	; 0xe0
 8004720:	438a      	bics	r2, r1
 8004722:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	2382      	movs	r3, #130	; 0x82
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	429a      	cmp	r2, r3
 800472e:	d113      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	429a      	cmp	r2, r3
 800473a:	d005      	beq.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	429a      	cmp	r2, r3
 8004746:	d107      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2140      	movs	r1, #64	; 0x40
 8004754:	438a      	bics	r2, r1
 8004756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	019b      	lsls	r3, r3, #6
 8004760:	429a      	cmp	r2, r3
 8004762:	d110      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	491a      	ldr	r1, [pc, #104]	; (80047d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2180      	movs	r1, #128	; 0x80
 8004780:	0189      	lsls	r1, r1, #6
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2251      	movs	r2, #81	; 0x51
 800478a:	2101      	movs	r1, #1
 800478c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2250      	movs	r2, #80	; 0x50
 8004792:	2100      	movs	r1, #0
 8004794:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e017      	b.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	425a      	negs	r2, r3
 80047ba:	4153      	adcs	r3, r2
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	001a      	movs	r2, r3
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d197      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b008      	add	sp, #32
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	20000004 	.word	0x20000004
 80047d8:	ffffdfff 	.word	0xffffdfff

080047dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <SPI_EndRxTxTransaction+0x84>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	491d      	ldr	r1, [pc, #116]	; (8004864 <SPI_EndRxTxTransaction+0x88>)
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7fb fc9c 	bl	800012c <__udivsi3>
 80047f4:	0003      	movs	r3, r0
 80047f6:	001a      	movs	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	015b      	lsls	r3, r3, #5
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	189b      	adds	r3, r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	2382      	movs	r3, #130	; 0x82
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	429a      	cmp	r2, r3
 8004810:	d112      	bne.n	8004838 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	0013      	movs	r3, r2
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	f7ff ff4e 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d016      	beq.n	8004856 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	2220      	movs	r2, #32
 800482e:	431a      	orrs	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e00f      	b.n	8004858 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	3b01      	subs	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	4013      	ands	r3, r2
 800484e:	2b80      	cmp	r3, #128	; 0x80
 8004850:	d0f2      	beq.n	8004838 <SPI_EndRxTxTransaction+0x5c>
 8004852:	e000      	b.n	8004856 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004854:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b006      	add	sp, #24
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000004 	.word	0x20000004
 8004864:	016e3600 	.word	0x016e3600

08004868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e032      	b.n	80048e0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2239      	movs	r2, #57	; 0x39
 800487e:	5c9b      	ldrb	r3, [r3, r2]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d107      	bne.n	8004896 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2238      	movs	r2, #56	; 0x38
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fc fdfb 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2239      	movs	r2, #57	; 0x39
 800489a:	2102      	movs	r1, #2
 800489c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	0019      	movs	r1, r3
 80048a8:	0010      	movs	r0, r2
 80048aa:	f000 f81d 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	223e      	movs	r2, #62	; 0x3e
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	223a      	movs	r2, #58	; 0x3a
 80048ba:	2101      	movs	r1, #1
 80048bc:	5499      	strb	r1, [r3, r2]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223b      	movs	r2, #59	; 0x3b
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	223c      	movs	r2, #60	; 0x3c
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	223d      	movs	r2, #61	; 0x3d
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2239      	movs	r2, #57	; 0x39
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	05db      	lsls	r3, r3, #23
 80048fe:	429a      	cmp	r2, r3
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0x32>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <TIM_Base_SetConfig+0xac>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0x32>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <TIM_Base_SetConfig+0xb0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x32>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a21      	ldr	r2, [pc, #132]	; (800499c <TIM_Base_SetConfig+0xb4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2270      	movs	r2, #112	; 0x70
 800491e:	4393      	bics	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	429a      	cmp	r2, r3
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0x66>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a16      	ldr	r2, [pc, #88]	; (8004994 <TIM_Base_SetConfig+0xac>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0x66>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a15      	ldr	r2, [pc, #84]	; (8004998 <TIM_Base_SetConfig+0xb0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x66>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <TIM_Base_SetConfig+0xb4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <TIM_Base_SetConfig+0xb8>)
 8004952:	4013      	ands	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	4393      	bics	r3, r2
 8004966:	001a      	movs	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	615a      	str	r2, [r3, #20]
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b004      	add	sp, #16
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40000400 	.word	0x40000400
 8004998:	40010800 	.word	0x40010800
 800499c:	40011400 	.word	0x40011400
 80049a0:	fffffcff 	.word	0xfffffcff

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2238      	movs	r2, #56	; 0x38
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e047      	b.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2238      	movs	r2, #56	; 0x38
 80049c0:	2101      	movs	r1, #1
 80049c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2239      	movs	r2, #57	; 0x39
 80049c8:	2102      	movs	r1, #2
 80049ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2270      	movs	r2, #112	; 0x70
 80049e0:	4393      	bics	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	05db      	lsls	r3, r3, #23
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d00e      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10c      	bne.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	4393      	bics	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2239      	movs	r2, #57	; 0x39
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2238      	movs	r2, #56	; 0x38
 8004a46:	2100      	movs	r1, #0
 8004a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b004      	add	sp, #16
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40010800 	.word	0x40010800
 8004a5c:	40011400 	.word	0x40011400

08004a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e044      	b.n	8004afc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d107      	bne.n	8004a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2274      	movs	r2, #116	; 0x74
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7fc fd19 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	438a      	bics	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f000 f8d8 	bl	8004c58 <UART_SetConfig>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e024      	b.n	8004afc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 fb6b 	bl	8005198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	490d      	ldr	r1, [pc, #52]	; (8004b04 <HAL_UART_Init+0xa4>)
 8004ace:	400a      	ands	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	212a      	movs	r1, #42	; 0x2a
 8004ade:	438a      	bics	r2, r1
 8004ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2101      	movs	r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 fc03 	bl	8005300 <UART_CheckIdleState>
 8004afa:	0003      	movs	r3, r0
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	ffffb7ff 	.word	0xffffb7ff

08004b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	1dbb      	adds	r3, r7, #6
 8004b16:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d000      	beq.n	8004b22 <HAL_UART_Transmit+0x1a>
 8004b20:	e095      	b.n	8004c4e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_UART_Transmit+0x28>
 8004b28:	1dbb      	adds	r3, r7, #6
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e08d      	b.n	8004c50 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	015b      	lsls	r3, r3, #5
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d109      	bne.n	8004b54 <HAL_UART_Transmit+0x4c>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d001      	beq.n	8004b54 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e07d      	b.n	8004c50 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2274      	movs	r2, #116	; 0x74
 8004b58:	5c9b      	ldrb	r3, [r3, r2]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Transmit+0x5a>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e076      	b.n	8004c50 <HAL_UART_Transmit+0x148>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2274      	movs	r2, #116	; 0x74
 8004b66:	2101      	movs	r1, #1
 8004b68:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2280      	movs	r2, #128	; 0x80
 8004b6e:	2100      	movs	r1, #0
 8004b70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b78:	f7fc fdd4 	bl	8001724 <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1dba      	adds	r2, r7, #6
 8004b84:	2150      	movs	r1, #80	; 0x50
 8004b86:	8812      	ldrh	r2, [r2, #0]
 8004b88:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1dba      	adds	r2, r7, #6
 8004b8e:	2152      	movs	r1, #82	; 0x52
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	015b      	lsls	r3, r3, #5
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d108      	bne.n	8004bb2 <HAL_UART_Transmit+0xaa>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e003      	b.n	8004bba <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2274      	movs	r2, #116	; 0x74
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004bc2:	e02c      	b.n	8004c1e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	0013      	movs	r3, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	f000 fbdd 	bl	8005390 <UART_WaitOnFlagUntilTimeout>
 8004bd6:	1e03      	subs	r3, r0, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e038      	b.n	8004c50 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	001a      	movs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	05d2      	lsls	r2, r2, #23
 8004bf0:	0dd2      	lsrs	r2, r2, #23
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e007      	b.n	8004c0c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	781a      	ldrb	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2252      	movs	r2, #82	; 0x52
 8004c10:	5a9b      	ldrh	r3, [r3, r2]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b299      	uxth	r1, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2252      	movs	r2, #82	; 0x52
 8004c1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2252      	movs	r2, #82	; 0x52
 8004c22:	5a9b      	ldrh	r3, [r3, r2]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1cc      	bne.n	8004bc4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	0013      	movs	r3, r2
 8004c34:	2200      	movs	r2, #0
 8004c36:	2140      	movs	r1, #64	; 0x40
 8004c38:	f000 fbaa 	bl	8005390 <UART_WaitOnFlagUntilTimeout>
 8004c3c:	1e03      	subs	r3, r0, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e005      	b.n	8004c50 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b008      	add	sp, #32
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b5b0      	push	{r4, r5, r7, lr}
 8004c5a:	b08e      	sub	sp, #56	; 0x38
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c60:	231a      	movs	r3, #26
 8004c62:	2218      	movs	r2, #24
 8004c64:	189b      	adds	r3, r3, r2
 8004c66:	19db      	adds	r3, r3, r7
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4ac3      	ldr	r2, [pc, #780]	; (8004f98 <UART_SetConfig+0x340>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	0019      	movs	r1, r3
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4abe      	ldr	r2, [pc, #760]	; (8004f9c <UART_SetConfig+0x344>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4ab8      	ldr	r2, [pc, #736]	; (8004fa0 <UART_SetConfig+0x348>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4ab4      	ldr	r2, [pc, #720]	; (8004fa4 <UART_SetConfig+0x34c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4ab0      	ldr	r2, [pc, #704]	; (8004fa8 <UART_SetConfig+0x350>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d131      	bne.n	8004d50 <UART_SetConfig+0xf8>
 8004cec:	4baf      	ldr	r3, [pc, #700]	; (8004fac <UART_SetConfig+0x354>)
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d01d      	beq.n	8004d34 <UART_SetConfig+0xdc>
 8004cf8:	d823      	bhi.n	8004d42 <UART_SetConfig+0xea>
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d00c      	beq.n	8004d18 <UART_SetConfig+0xc0>
 8004cfe:	d820      	bhi.n	8004d42 <UART_SetConfig+0xea>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <UART_SetConfig+0xb2>
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d00e      	beq.n	8004d26 <UART_SetConfig+0xce>
 8004d08:	e01b      	b.n	8004d42 <UART_SetConfig+0xea>
 8004d0a:	231b      	movs	r3, #27
 8004d0c:	2218      	movs	r2, #24
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	19db      	adds	r3, r3, r7
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e0b4      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d18:	231b      	movs	r3, #27
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	189b      	adds	r3, r3, r2
 8004d1e:	19db      	adds	r3, r3, r7
 8004d20:	2202      	movs	r2, #2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e0ad      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d26:	231b      	movs	r3, #27
 8004d28:	2218      	movs	r2, #24
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	19db      	adds	r3, r3, r7
 8004d2e:	2204      	movs	r2, #4
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e0a6      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d34:	231b      	movs	r3, #27
 8004d36:	2218      	movs	r2, #24
 8004d38:	189b      	adds	r3, r3, r2
 8004d3a:	19db      	adds	r3, r3, r7
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	e09f      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d42:	231b      	movs	r3, #27
 8004d44:	2218      	movs	r2, #24
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	19db      	adds	r3, r3, r7
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e098      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a96      	ldr	r2, [pc, #600]	; (8004fb0 <UART_SetConfig+0x358>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d131      	bne.n	8004dbe <UART_SetConfig+0x166>
 8004d5a:	4b94      	ldr	r3, [pc, #592]	; (8004fac <UART_SetConfig+0x354>)
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	220c      	movs	r2, #12
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d01d      	beq.n	8004da2 <UART_SetConfig+0x14a>
 8004d66:	d823      	bhi.n	8004db0 <UART_SetConfig+0x158>
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d00c      	beq.n	8004d86 <UART_SetConfig+0x12e>
 8004d6c:	d820      	bhi.n	8004db0 <UART_SetConfig+0x158>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <UART_SetConfig+0x120>
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d00e      	beq.n	8004d94 <UART_SetConfig+0x13c>
 8004d76:	e01b      	b.n	8004db0 <UART_SetConfig+0x158>
 8004d78:	231b      	movs	r3, #27
 8004d7a:	2218      	movs	r2, #24
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	19db      	adds	r3, r3, r7
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e07d      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d86:	231b      	movs	r3, #27
 8004d88:	2218      	movs	r2, #24
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	19db      	adds	r3, r3, r7
 8004d8e:	2202      	movs	r2, #2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e076      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004d94:	231b      	movs	r3, #27
 8004d96:	2218      	movs	r2, #24
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	19db      	adds	r3, r3, r7
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e06f      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004da2:	231b      	movs	r3, #27
 8004da4:	2218      	movs	r2, #24
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	19db      	adds	r3, r3, r7
 8004daa:	2208      	movs	r2, #8
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e068      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004db0:	231b      	movs	r3, #27
 8004db2:	2218      	movs	r2, #24
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	19db      	adds	r3, r3, r7
 8004db8:	2210      	movs	r2, #16
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	e061      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a7c      	ldr	r2, [pc, #496]	; (8004fb4 <UART_SetConfig+0x35c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d106      	bne.n	8004dd6 <UART_SetConfig+0x17e>
 8004dc8:	231b      	movs	r3, #27
 8004dca:	2218      	movs	r2, #24
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	19db      	adds	r3, r3, r7
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e055      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <UART_SetConfig+0x360>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d106      	bne.n	8004dee <UART_SetConfig+0x196>
 8004de0:	231b      	movs	r3, #27
 8004de2:	2218      	movs	r2, #24
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	19db      	adds	r3, r3, r7
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e049      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <UART_SetConfig+0x348>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d13e      	bne.n	8004e76 <UART_SetConfig+0x21e>
 8004df8:	4b6c      	ldr	r3, [pc, #432]	; (8004fac <UART_SetConfig+0x354>)
 8004dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dfc:	23c0      	movs	r3, #192	; 0xc0
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4013      	ands	r3, r2
 8004e02:	22c0      	movs	r2, #192	; 0xc0
 8004e04:	0112      	lsls	r2, r2, #4
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d027      	beq.n	8004e5a <UART_SetConfig+0x202>
 8004e0a:	22c0      	movs	r2, #192	; 0xc0
 8004e0c:	0112      	lsls	r2, r2, #4
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d82a      	bhi.n	8004e68 <UART_SetConfig+0x210>
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	0112      	lsls	r2, r2, #4
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d011      	beq.n	8004e3e <UART_SetConfig+0x1e6>
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	0112      	lsls	r2, r2, #4
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d822      	bhi.n	8004e68 <UART_SetConfig+0x210>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <UART_SetConfig+0x1d8>
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	00d2      	lsls	r2, r2, #3
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <UART_SetConfig+0x1f4>
 8004e2e:	e01b      	b.n	8004e68 <UART_SetConfig+0x210>
 8004e30:	231b      	movs	r3, #27
 8004e32:	2218      	movs	r2, #24
 8004e34:	189b      	adds	r3, r3, r2
 8004e36:	19db      	adds	r3, r3, r7
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e021      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004e3e:	231b      	movs	r3, #27
 8004e40:	2218      	movs	r2, #24
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	19db      	adds	r3, r3, r7
 8004e46:	2202      	movs	r2, #2
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e01a      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004e4c:	231b      	movs	r3, #27
 8004e4e:	2218      	movs	r2, #24
 8004e50:	189b      	adds	r3, r3, r2
 8004e52:	19db      	adds	r3, r3, r7
 8004e54:	2204      	movs	r2, #4
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e013      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004e5a:	231b      	movs	r3, #27
 8004e5c:	2218      	movs	r2, #24
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	19db      	adds	r3, r3, r7
 8004e62:	2208      	movs	r2, #8
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e00c      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004e68:	231b      	movs	r3, #27
 8004e6a:	2218      	movs	r2, #24
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	19db      	adds	r3, r3, r7
 8004e70:	2210      	movs	r2, #16
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	e005      	b.n	8004e82 <UART_SetConfig+0x22a>
 8004e76:	231b      	movs	r3, #27
 8004e78:	2218      	movs	r2, #24
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	19db      	adds	r3, r3, r7
 8004e7e:	2210      	movs	r2, #16
 8004e80:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a46      	ldr	r2, [pc, #280]	; (8004fa0 <UART_SetConfig+0x348>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d000      	beq.n	8004e8e <UART_SetConfig+0x236>
 8004e8c:	e09a      	b.n	8004fc4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e8e:	231b      	movs	r3, #27
 8004e90:	2218      	movs	r2, #24
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	19db      	adds	r3, r3, r7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d01d      	beq.n	8004ed8 <UART_SetConfig+0x280>
 8004e9c:	dc20      	bgt.n	8004ee0 <UART_SetConfig+0x288>
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d015      	beq.n	8004ece <UART_SetConfig+0x276>
 8004ea2:	dc1d      	bgt.n	8004ee0 <UART_SetConfig+0x288>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <UART_SetConfig+0x256>
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d005      	beq.n	8004eb8 <UART_SetConfig+0x260>
 8004eac:	e018      	b.n	8004ee0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eae:	f7ff f817 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eb6:	e01c      	b.n	8004ef2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eb8:	4b3c      	ldr	r3, [pc, #240]	; (8004fac <UART_SetConfig+0x354>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d002      	beq.n	8004ec8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	; (8004fbc <UART_SetConfig+0x364>)
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ec6:	e014      	b.n	8004ef2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004ec8:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <UART_SetConfig+0x368>)
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ecc:	e011      	b.n	8004ef2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ece:	f7fe ff57 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ed6:	e00c      	b.n	8004ef2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ede:	e008      	b.n	8004ef2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ee4:	231a      	movs	r3, #26
 8004ee6:	2218      	movs	r2, #24
 8004ee8:	189b      	adds	r3, r3, r2
 8004eea:	19db      	adds	r3, r3, r7
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
        break;
 8004ef0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d100      	bne.n	8004efa <UART_SetConfig+0x2a2>
 8004ef8:	e134      	b.n	8005164 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	0013      	movs	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d305      	bcc.n	8004f16 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d906      	bls.n	8004f24 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004f16:	231a      	movs	r3, #26
 8004f18:	2218      	movs	r2, #24
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	19db      	adds	r3, r3, r7
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e11f      	b.n	8005164 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	6939      	ldr	r1, [r7, #16]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	000b      	movs	r3, r1
 8004f32:	0e1b      	lsrs	r3, r3, #24
 8004f34:	0010      	movs	r0, r2
 8004f36:	0205      	lsls	r5, r0, #8
 8004f38:	431d      	orrs	r5, r3
 8004f3a:	000b      	movs	r3, r1
 8004f3c:	021c      	lsls	r4, r3, #8
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	68f9      	ldr	r1, [r7, #12]
 8004f4e:	1900      	adds	r0, r0, r4
 8004f50:	4169      	adcs	r1, r5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f7fb f970 	bl	8000244 <__aeabi_uldivmod>
 8004f64:	0002      	movs	r2, r0
 8004f66:	000b      	movs	r3, r1
 8004f68:	0013      	movs	r3, r2
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6e:	23c0      	movs	r3, #192	; 0xc0
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d309      	bcc.n	8004f8a <UART_SetConfig+0x332>
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	035b      	lsls	r3, r3, #13
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d204      	bcs.n	8004f8a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	e0ec      	b.n	8005164 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f8a:	231a      	movs	r3, #26
 8004f8c:	2218      	movs	r2, #24
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	19db      	adds	r3, r3, r7
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e0e5      	b.n	8005164 <UART_SetConfig+0x50c>
 8004f98:	efff69f3 	.word	0xefff69f3
 8004f9c:	ffffcfff 	.word	0xffffcfff
 8004fa0:	40004800 	.word	0x40004800
 8004fa4:	fffff4ff 	.word	0xfffff4ff
 8004fa8:	40013800 	.word	0x40013800
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40004400 	.word	0x40004400
 8004fb4:	40004c00 	.word	0x40004c00
 8004fb8:	40005000 	.word	0x40005000
 8004fbc:	003d0900 	.word	0x003d0900
 8004fc0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d000      	beq.n	8004fd2 <UART_SetConfig+0x37a>
 8004fd0:	e071      	b.n	80050b6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004fd2:	231b      	movs	r3, #27
 8004fd4:	2218      	movs	r2, #24
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	19db      	adds	r3, r3, r7
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d822      	bhi.n	8005026 <UART_SetConfig+0x3ce>
 8004fe0:	009a      	lsls	r2, r3, #2
 8004fe2:	4b68      	ldr	r3, [pc, #416]	; (8005184 <UART_SetConfig+0x52c>)
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fea:	f7fe ff79 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ff2:	e021      	b.n	8005038 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fe ff8a 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ffc:	e01c      	b.n	8005038 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ffe:	4b62      	ldr	r3, [pc, #392]	; (8005188 <UART_SetConfig+0x530>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2210      	movs	r2, #16
 8005004:	4013      	ands	r3, r2
 8005006:	d002      	beq.n	800500e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005008:	4b60      	ldr	r3, [pc, #384]	; (800518c <UART_SetConfig+0x534>)
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800500c:	e014      	b.n	8005038 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800500e:	4b60      	ldr	r3, [pc, #384]	; (8005190 <UART_SetConfig+0x538>)
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005012:	e011      	b.n	8005038 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005014:	f7fe feb4 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8005018:	0003      	movs	r3, r0
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800501c:	e00c      	b.n	8005038 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005024:	e008      	b.n	8005038 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800502a:	231a      	movs	r3, #26
 800502c:	2218      	movs	r2, #24
 800502e:	189b      	adds	r3, r3, r2
 8005030:	19db      	adds	r3, r3, r7
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
        break;
 8005036:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d100      	bne.n	8005040 <UART_SetConfig+0x3e8>
 800503e:	e091      	b.n	8005164 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	005a      	lsls	r2, r3, #1
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	18d2      	adds	r2, r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0019      	movs	r1, r3
 8005052:	0010      	movs	r0, r2
 8005054:	f7fb f86a 	bl	800012c <__udivsi3>
 8005058:	0003      	movs	r3, r0
 800505a:	b29b      	uxth	r3, r3
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	2b0f      	cmp	r3, #15
 8005062:	d921      	bls.n	80050a8 <UART_SetConfig+0x450>
 8005064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	025b      	lsls	r3, r3, #9
 800506a:	429a      	cmp	r2, r3
 800506c:	d21c      	bcs.n	80050a8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	b29a      	uxth	r2, r3
 8005072:	200e      	movs	r0, #14
 8005074:	2418      	movs	r4, #24
 8005076:	1903      	adds	r3, r0, r4
 8005078:	19db      	adds	r3, r3, r7
 800507a:	210f      	movs	r1, #15
 800507c:	438a      	bics	r2, r1
 800507e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	2207      	movs	r2, #7
 8005088:	4013      	ands	r3, r2
 800508a:	b299      	uxth	r1, r3
 800508c:	1903      	adds	r3, r0, r4
 800508e:	19db      	adds	r3, r3, r7
 8005090:	1902      	adds	r2, r0, r4
 8005092:	19d2      	adds	r2, r2, r7
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	1902      	adds	r2, r0, r4
 80050a0:	19d2      	adds	r2, r2, r7
 80050a2:	8812      	ldrh	r2, [r2, #0]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	e05d      	b.n	8005164 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80050a8:	231a      	movs	r3, #26
 80050aa:	2218      	movs	r2, #24
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	19db      	adds	r3, r3, r7
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e056      	b.n	8005164 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b6:	231b      	movs	r3, #27
 80050b8:	2218      	movs	r2, #24
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	19db      	adds	r3, r3, r7
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d822      	bhi.n	800510a <UART_SetConfig+0x4b2>
 80050c4:	009a      	lsls	r2, r3, #2
 80050c6:	4b33      	ldr	r3, [pc, #204]	; (8005194 <UART_SetConfig+0x53c>)
 80050c8:	18d3      	adds	r3, r2, r3
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ce:	f7fe ff07 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 80050d2:	0003      	movs	r3, r0
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050d6:	e021      	b.n	800511c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe ff18 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 80050dc:	0003      	movs	r3, r0
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050e0:	e01c      	b.n	800511c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <UART_SetConfig+0x530>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2210      	movs	r2, #16
 80050e8:	4013      	ands	r3, r2
 80050ea:	d002      	beq.n	80050f2 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <UART_SetConfig+0x534>)
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050f0:	e014      	b.n	800511c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80050f2:	4b27      	ldr	r3, [pc, #156]	; (8005190 <UART_SetConfig+0x538>)
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050f6:	e011      	b.n	800511c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f8:	f7fe fe42 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 80050fc:	0003      	movs	r3, r0
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005100:	e00c      	b.n	800511c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005108:	e008      	b.n	800511c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800510e:	231a      	movs	r3, #26
 8005110:	2218      	movs	r2, #24
 8005112:	189b      	adds	r3, r3, r2
 8005114:	19db      	adds	r3, r3, r7
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
        break;
 800511a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	085a      	lsrs	r2, r3, #1
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	18d2      	adds	r2, r2, r3
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0019      	movs	r1, r3
 8005132:	0010      	movs	r0, r2
 8005134:	f7fa fffa 	bl	800012c <__udivsi3>
 8005138:	0003      	movs	r3, r0
 800513a:	b29b      	uxth	r3, r3
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d909      	bls.n	8005158 <UART_SetConfig+0x500>
 8005144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	025b      	lsls	r3, r3, #9
 800514a:	429a      	cmp	r2, r3
 800514c:	d204      	bcs.n	8005158 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	e005      	b.n	8005164 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005158:	231a      	movs	r3, #26
 800515a:	2218      	movs	r2, #24
 800515c:	189b      	adds	r3, r3, r2
 800515e:	19db      	adds	r3, r3, r7
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2200      	movs	r2, #0
 8005168:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2200      	movs	r2, #0
 800516e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005170:	231a      	movs	r3, #26
 8005172:	2218      	movs	r2, #24
 8005174:	189b      	adds	r3, r3, r2
 8005176:	19db      	adds	r3, r3, r7
 8005178:	781b      	ldrb	r3, [r3, #0]
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b00e      	add	sp, #56	; 0x38
 8005180:	bdb0      	pop	{r4, r5, r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	08008b34 	.word	0x08008b34
 8005188:	40021000 	.word	0x40021000
 800518c:	003d0900 	.word	0x003d0900
 8005190:	00f42400 	.word	0x00f42400
 8005194:	08008b58 	.word	0x08008b58

08005198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2201      	movs	r2, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a4a      	ldr	r2, [pc, #296]	; (80052dc <UART_AdvFeatureConfig+0x144>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2202      	movs	r2, #2
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a43      	ldr	r2, [pc, #268]	; (80052e0 <UART_AdvFeatureConfig+0x148>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2204      	movs	r2, #4
 80051ea:	4013      	ands	r3, r2
 80051ec:	d00b      	beq.n	8005206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a3b      	ldr	r2, [pc, #236]	; (80052e4 <UART_AdvFeatureConfig+0x14c>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2208      	movs	r2, #8
 800520c:	4013      	ands	r3, r2
 800520e:	d00b      	beq.n	8005228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4a34      	ldr	r2, [pc, #208]	; (80052e8 <UART_AdvFeatureConfig+0x150>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2210      	movs	r2, #16
 800522e:	4013      	ands	r3, r2
 8005230:	d00b      	beq.n	800524a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a2c      	ldr	r2, [pc, #176]	; (80052ec <UART_AdvFeatureConfig+0x154>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2220      	movs	r2, #32
 8005250:	4013      	ands	r3, r2
 8005252:	d00b      	beq.n	800526c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <UART_AdvFeatureConfig+0x158>)
 800525c:	4013      	ands	r3, r2
 800525e:	0019      	movs	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	2240      	movs	r2, #64	; 0x40
 8005272:	4013      	ands	r3, r2
 8005274:	d01d      	beq.n	80052b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <UART_AdvFeatureConfig+0x15c>)
 800527e:	4013      	ands	r3, r2
 8005280:	0019      	movs	r1, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	035b      	lsls	r3, r3, #13
 8005296:	429a      	cmp	r2, r3
 8005298:	d10b      	bne.n	80052b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <UART_AdvFeatureConfig+0x160>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <UART_AdvFeatureConfig+0x164>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b002      	add	sp, #8
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	fffdffff 	.word	0xfffdffff
 80052e0:	fffeffff 	.word	0xfffeffff
 80052e4:	fffbffff 	.word	0xfffbffff
 80052e8:	ffff7fff 	.word	0xffff7fff
 80052ec:	ffffefff 	.word	0xffffefff
 80052f0:	ffffdfff 	.word	0xffffdfff
 80052f4:	ffefffff 	.word	0xffefffff
 80052f8:	ff9fffff 	.word	0xff9fffff
 80052fc:	fff7ffff 	.word	0xfff7ffff

08005300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	2100      	movs	r1, #0
 800530e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005310:	f7fc fa08 	bl	8001724 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2208      	movs	r2, #8
 8005320:	4013      	ands	r3, r2
 8005322:	2b08      	cmp	r3, #8
 8005324:	d10c      	bne.n	8005340 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2280      	movs	r2, #128	; 0x80
 800532a:	0391      	lsls	r1, r2, #14
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <UART_CheckIdleState+0x8c>)
 8005330:	9200      	str	r2, [sp, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	f000 f82c 	bl	8005390 <UART_WaitOnFlagUntilTimeout>
 8005338:	1e03      	subs	r3, r0, #0
 800533a:	d001      	beq.n	8005340 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e021      	b.n	8005384 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2204      	movs	r2, #4
 8005348:	4013      	ands	r3, r2
 800534a:	2b04      	cmp	r3, #4
 800534c:	d10c      	bne.n	8005368 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	03d1      	lsls	r1, r2, #15
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4a0d      	ldr	r2, [pc, #52]	; (800538c <UART_CheckIdleState+0x8c>)
 8005358:	9200      	str	r2, [sp, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	f000 f818 	bl	8005390 <UART_WaitOnFlagUntilTimeout>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d001      	beq.n	8005368 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e00d      	b.n	8005384 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2274      	movs	r2, #116	; 0x74
 800537e:	2100      	movs	r1, #0
 8005380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b004      	add	sp, #16
 800538a:	bd80      	pop	{r7, pc}
 800538c:	01ffffff 	.word	0x01ffffff

08005390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b094      	sub	sp, #80	; 0x50
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a0:	e0a3      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a4:	3301      	adds	r3, #1
 80053a6:	d100      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80053a8:	e09f      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7fc f9bb 	bl	8001724 <HAL_GetTick>
 80053ae:	0002      	movs	r2, r0
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13d      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ca:	2301      	movs	r3, #1
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	494c      	ldr	r1, [pc, #304]	; (8005514 <UART_WaitOnFlagUntilTimeout+0x184>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f2:	f3ef 8310 	mrs	r3, PRIMASK
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	643b      	str	r3, [r7, #64]	; 0x40
 80053fc:	2301      	movs	r3, #1
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2101      	movs	r1, #1
 8005414:	438a      	bics	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2274      	movs	r2, #116	; 0x74
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e067      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2204      	movs	r2, #4
 8005444:	4013      	ands	r3, r2
 8005446:	d050      	beq.n	80054ea <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	401a      	ands	r2, r3
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	429a      	cmp	r2, r3
 800545a:	d146      	bne.n	80054ea <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005466:	f3ef 8310 	mrs	r3, PRIMASK
 800546a:	613b      	str	r3, [r7, #16]
  return(result);
 800546c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005470:	2301      	movs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4923      	ldr	r1, [pc, #140]	; (8005514 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005488:	400a      	ands	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005498:	f3ef 8310 	mrs	r3, PRIMASK
 800549c:	61fb      	str	r3, [r7, #28]
  return(result);
 800549e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a2:	2301      	movs	r3, #1
 80054a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f383 8810 	msr	PRIMASK, r3
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	438a      	bics	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2280      	movs	r2, #128	; 0x80
 80054da:	2120      	movs	r1, #32
 80054dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2274      	movs	r2, #116	; 0x74
 80054e2:	2100      	movs	r1, #0
 80054e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e010      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	425a      	negs	r2, r3
 80054fa:	4153      	adcs	r3, r2
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	001a      	movs	r2, r3
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d100      	bne.n	800550a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005508:	e74b      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b014      	add	sp, #80	; 0x50
 8005512:	bd80      	pop	{r7, pc}
 8005514:	fffffe5f 	.word	0xfffffe5f

08005518 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800552a:	f3ef 8305 	mrs	r3, IPSR
 800552e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005530:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005536:	f3ef 8310 	mrs	r3, PRIMASK
 800553a:	607b      	str	r3, [r7, #4]
  return(result);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <osKernelInitialize+0x2e>
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <osKernelInitialize+0x54>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d103      	bne.n	8005552 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800554a:	2306      	movs	r3, #6
 800554c:	425b      	negs	r3, r3
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e00c      	b.n	800556c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <osKernelInitialize+0x54>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <osKernelInitialize+0x54>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005566:	2301      	movs	r3, #1
 8005568:	425b      	negs	r3, r3
 800556a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b004      	add	sp, #16
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	20000298 	.word	0x20000298

0800557c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005582:	f3ef 8305 	mrs	r3, IPSR
 8005586:	60bb      	str	r3, [r7, #8]
  return(result);
 8005588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558e:	f3ef 8310 	mrs	r3, PRIMASK
 8005592:	607b      	str	r3, [r7, #4]
  return(result);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <osKernelStart+0x2e>
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <osKernelStart+0x5c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d103      	bne.n	80055aa <osKernelStart+0x2e>
    stat = osErrorISR;
 80055a2:	2306      	movs	r3, #6
 80055a4:	425b      	negs	r3, r3
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e010      	b.n	80055cc <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <osKernelStart+0x5c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d109      	bne.n	80055c6 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055b2:	f7ff ffb1 	bl	8005518 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055b6:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <osKernelStart+0x5c>)
 80055b8:	2202      	movs	r2, #2
 80055ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055bc:	f001 fa0c 	bl	80069d8 <vTaskStartScheduler>
      stat = osOK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e002      	b.n	80055cc <osKernelStart+0x50>
    } else {
      stat = osError;
 80055c6:	2301      	movs	r3, #1
 80055c8:	425b      	negs	r3, r3
 80055ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055cc:	68fb      	ldr	r3, [r7, #12]
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b004      	add	sp, #16
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	20000298 	.word	0x20000298

080055dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055dc:	b5b0      	push	{r4, r5, r7, lr}
 80055de:	b090      	sub	sp, #64	; 0x40
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ec:	f3ef 8305 	mrs	r3, IPSR
 80055f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80055f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d000      	beq.n	80055fa <osThreadNew+0x1e>
 80055f8:	e08c      	b.n	8005714 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fa:	f3ef 8310 	mrs	r3, PRIMASK
 80055fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <osThreadNew+0x34>
 8005606:	4b46      	ldr	r3, [pc, #280]	; (8005720 <osThreadNew+0x144>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d100      	bne.n	8005610 <osThreadNew+0x34>
 800560e:	e081      	b.n	8005714 <osThreadNew+0x138>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d100      	bne.n	8005618 <osThreadNew+0x3c>
 8005616:	e07d      	b.n	8005714 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800561c:	2318      	movs	r3, #24
 800561e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005620:	2300      	movs	r3, #0
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005624:	2301      	movs	r3, #1
 8005626:	425b      	negs	r3, r3
 8005628:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d044      	beq.n	80056ba <osThreadNew+0xde>
      if (attr->name != NULL) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <osThreadNew+0x62>
        name = attr->name;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <osThreadNew+0x86>
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	2b38      	cmp	r3, #56	; 0x38
 8005656:	d804      	bhi.n	8005662 <osThreadNew+0x86>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	4013      	ands	r3, r2
 8005660:	d001      	beq.n	8005666 <osThreadNew+0x8a>
        return (NULL);
 8005662:	2300      	movs	r3, #0
 8005664:	e057      	b.n	8005716 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <osThreadNew+0xc0>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b5b      	cmp	r3, #91	; 0x5b
 8005684:	d90a      	bls.n	800569c <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d006      	beq.n	800569c <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <osThreadNew+0xc0>
        mem = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	e010      	b.n	80056be <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10c      	bne.n	80056be <osThreadNew+0xe2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d108      	bne.n	80056be <osThreadNew+0xe2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <osThreadNew+0xe2>
          mem = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	e001      	b.n	80056be <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d112      	bne.n	80056ea <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056cc:	68bd      	ldr	r5, [r7, #8]
 80056ce:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80056d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	9201      	str	r2, [sp, #4]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	002b      	movs	r3, r5
 80056de:	0022      	movs	r2, r4
 80056e0:	f000 ffd1 	bl	8006686 <xTaskCreateStatic>
 80056e4:	0003      	movs	r3, r0
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e014      	b.n	8005714 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d111      	bne.n	8005714 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68bc      	ldr	r4, [r7, #8]
 80056f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	2314      	movs	r3, #20
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	0023      	movs	r3, r4
 8005706:	f001 f802 	bl	800670e <xTaskCreate>
 800570a:	0003      	movs	r3, r0
 800570c:	2b01      	cmp	r3, #1
 800570e:	d001      	beq.n	8005714 <osThreadNew+0x138>
          hTask = NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005714:	697b      	ldr	r3, [r7, #20]
}
 8005716:	0018      	movs	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	b00c      	add	sp, #48	; 0x30
 800571c:	bdb0      	pop	{r4, r5, r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	20000298 	.word	0x20000298

08005724 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005730:	f3ef 8305 	mrs	r3, IPSR
 8005734:	60fb      	str	r3, [r7, #12]
  return(result);
 8005736:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005738:	2b00      	cmp	r3, #0
 800573a:	d139      	bne.n	80057b0 <osEventFlagsNew+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8310 	mrs	r3, PRIMASK
 8005740:	60bb      	str	r3, [r7, #8]
  return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <osEventFlagsNew+0x2c>
 8005748:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <osEventFlagsNew+0x98>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d02f      	beq.n	80057b0 <osEventFlagsNew+0x8c>
    mem = -1;
 8005750:	2301      	movs	r3, #1
 8005752:	425b      	negs	r3, r3
 8005754:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <osEventFlagsNew+0x64>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <osEventFlagsNew+0x4e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b1f      	cmp	r3, #31
 800576a:	d902      	bls.n	8005772 <osEventFlagsNew+0x4e>
        mem = 1;
 800576c:	2301      	movs	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	e00c      	b.n	800578c <osEventFlagsNew+0x68>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <osEventFlagsNew+0x68>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <osEventFlagsNew+0x68>
          mem = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e001      	b.n	800578c <osEventFlagsNew+0x68>
        }
      }
    }
    else {
      mem = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <osEventFlagsNew+0x7e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 f8fe 	bl	8005998 <xEventGroupCreateStatic>
 800579c:	0003      	movs	r3, r0
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e006      	b.n	80057b0 <osEventFlagsNew+0x8c>
    }
    else {
      if (mem == 0) {
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <osEventFlagsNew+0x8c>
        hEventGroup = xEventGroupCreate();
 80057a8:	f000 f91b 	bl	80059e2 <xEventGroupCreate>
 80057ac:	0003      	movs	r3, r0
 80057ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80057b0:	697b      	ldr	r3, [r7, #20]
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b006      	add	sp, #24
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	20000298 	.word	0x20000298

080057c0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <osEventFlagsSet+0x1c>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	0e1b      	lsrs	r3, r3, #24
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	d003      	beq.n	80057e4 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80057dc:	2304      	movs	r3, #4
 80057de:	425b      	negs	r3, r3
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e032      	b.n	800584a <osEventFlagsSet+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e4:	f3ef 8305 	mrs	r3, IPSR
 80057e8:	617b      	str	r3, [r7, #20]
  return(result);
 80057ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <osEventFlagsSet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	613b      	str	r3, [r7, #16]
  return(result);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01c      	beq.n	8005836 <osEventFlagsSet+0x76>
 80057fc:	4b15      	ldr	r3, [pc, #84]	; (8005854 <osEventFlagsSet+0x94>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d118      	bne.n	8005836 <osEventFlagsSet+0x76>
    yield = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005808:	230c      	movs	r3, #12
 800580a:	18fa      	adds	r2, r7, r3
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fa4f 	bl	8005cb4 <xEventGroupSetBitsFromISR>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d103      	bne.n	8005822 <osEventFlagsSet+0x62>
      rflags = (uint32_t)osErrorResource;
 800581a:	2303      	movs	r3, #3
 800581c:	425b      	negs	r3, r3
 800581e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005820:	e012      	b.n	8005848 <osEventFlagsSet+0x88>
    } else {
      rflags = flags;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <osEventFlagsSet+0x88>
 800582c:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <osEventFlagsSet+0x98>)
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	0552      	lsls	r2, r2, #21
 8005832:	601a      	str	r2, [r3, #0]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005834:	e008      	b.n	8005848 <osEventFlagsSet+0x88>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f000 f991 	bl	8005b64 <xEventGroupSetBits>
 8005842:	0003      	movs	r3, r0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e000      	b.n	800584a <osEventFlagsSet+0x8a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005848:	46c0      	nop			; (mov r8, r8)
  }

  return (rflags);
 800584a:	69fb      	ldr	r3, [r7, #28]
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	b008      	add	sp, #32
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000298 	.word	0x20000298
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b08d      	sub	sp, #52	; 0x34
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <osEventFlagsWait+0x20>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	0e1b      	lsrs	r3, r3, #24
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	d003      	beq.n	8005884 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800587c:	2304      	movs	r3, #4
 800587e:	425b      	negs	r3, r3
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	e051      	b.n	8005928 <osEventFlagsWait+0xcc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005884:	f3ef 8305 	mrs	r3, IPSR
 8005888:	617b      	str	r3, [r7, #20]
  return(result);
 800588a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <osEventFlagsWait+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005890:	f3ef 8310 	mrs	r3, PRIMASK
 8005894:	613b      	str	r3, [r7, #16]
  return(result);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <osEventFlagsWait+0x50>
 800589c:	4b25      	ldr	r3, [pc, #148]	; (8005934 <osEventFlagsWait+0xd8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d103      	bne.n	80058ac <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
 80058a4:	2306      	movs	r3, #6
 80058a6:	425b      	negs	r3, r3
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	e03d      	b.n	8005928 <osEventFlagsWait+0xcc>
  }
  else {
    if (options & osFlagsWaitAll) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	4013      	ands	r3, r2
 80058b2:	d002      	beq.n	80058ba <osEventFlagsWait+0x5e>
      wait_all = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	e001      	b.n	80058be <osEventFlagsWait+0x62>
    } else {
      wait_all = pdFAIL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	4013      	ands	r3, r2
 80058c4:	d002      	beq.n	80058cc <osEventFlagsWait+0x70>
      exit_clr = pdFAIL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	e001      	b.n	80058d0 <osEventFlagsWait+0x74>
    } else {
      exit_clr = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80058d0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	69b8      	ldr	r0, [r7, #24]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	0023      	movs	r3, r4
 80058de:	f000 f89b 	bl	8005a18 <xEventGroupWaitBits>
 80058e2:	0003      	movs	r3, r0
 80058e4:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	4013      	ands	r3, r2
 80058ec:	d00e      	beq.n	800590c <osEventFlagsWait+0xb0>
      if (flags != rflags) {
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d018      	beq.n	8005928 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <osEventFlagsWait+0xa8>
          rflags = (uint32_t)osErrorTimeout;
 80058fc:	2302      	movs	r3, #2
 80058fe:	425b      	negs	r3, r3
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e011      	b.n	8005928 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005904:	2303      	movs	r3, #3
 8005906:	425b      	negs	r3, r3
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e00d      	b.n	8005928 <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	4013      	ands	r3, r2
 8005912:	d109      	bne.n	8005928 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 800591a:	2302      	movs	r3, #2
 800591c:	425b      	negs	r3, r3
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	e002      	b.n	8005928 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005922:	2303      	movs	r3, #3
 8005924:	425b      	negs	r3, r3
 8005926:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8005928:	69fb      	ldr	r3, [r7, #28]
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b00b      	add	sp, #44	; 0x2c
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	20000298 	.word	0x20000298

08005938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a06      	ldr	r2, [pc, #24]	; (8005960 <vApplicationGetIdleTaskMemory+0x28>)
 8005948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a05      	ldr	r2, [pc, #20]	; (8005964 <vApplicationGetIdleTaskMemory+0x2c>)
 800594e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	601a      	str	r2, [r3, #0]
}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b004      	add	sp, #16
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	2000029c 	.word	0x2000029c
 8005964:	200002f8 	.word	0x200002f8

08005968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a06      	ldr	r2, [pc, #24]	; (8005990 <vApplicationGetTimerTaskMemory+0x28>)
 8005978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a05      	ldr	r2, [pc, #20]	; (8005994 <vApplicationGetTimerTaskMemory+0x2c>)
 800597e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	0052      	lsls	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
}
 8005988:	46c0      	nop			; (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	b004      	add	sp, #16
 800598e:	bd80      	pop	{r7, pc}
 8005990:	200004f8 	.word	0x200004f8
 8005994:	20000554 	.word	0x20000554

08005998 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xEventGroupCreateStatic+0x12>
 80059a6:	b672      	cpsid	i
 80059a8:	e7fe      	b.n	80059a8 <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80059aa:	2320      	movs	r3, #32
 80059ac:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d001      	beq.n	80059b8 <xEventGroupCreateStatic+0x20>
 80059b4:	b672      	cpsid	i
 80059b6:	e7fe      	b.n	80059b6 <xEventGroupCreateStatic+0x1e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3304      	adds	r3, #4
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 f987 	bl	8005ce0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80059d8:	68fb      	ldr	r3, [r7, #12]
	}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b004      	add	sp, #16
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80059e8:	2020      	movs	r0, #32
 80059ea:	f002 f991 	bl	8007d10 <pvPortMalloc>
 80059ee:	0003      	movs	r3, r0
 80059f0:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3304      	adds	r3, #4
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f96c 	bl	8005ce0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005a0e:	687b      	ldr	r3, [r7, #4]
	}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <xEventGroupWaitBits+0x24>
 8005a38:	b672      	cpsid	i
 8005a3a:	e7fe      	b.n	8005a3a <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	0e1b      	lsrs	r3, r3, #24
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	d001      	beq.n	8005a48 <xEventGroupWaitBits+0x30>
 8005a44:	b672      	cpsid	i
 8005a46:	e7fe      	b.n	8005a46 <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xEventGroupWaitBits+0x3a>
 8005a4e:	b672      	cpsid	i
 8005a50:	e7fe      	b.n	8005a50 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a52:	f001 fc13 	bl	800727c <xTaskGetSchedulerState>
 8005a56:	1e03      	subs	r3, r0, #0
 8005a58:	d102      	bne.n	8005a60 <xEventGroupWaitBits+0x48>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <xEventGroupWaitBits+0x4c>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <xEventGroupWaitBits+0x4e>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <xEventGroupWaitBits+0x56>
 8005a6a:	b672      	cpsid	i
 8005a6c:	e7fe      	b.n	8005a6c <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 8005a6e:	f001 f807 	bl	8006a80 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f000 f8f8 	bl	8005c74 <prvTestWaitCondition>
 8005a84:	0003      	movs	r3, r0
 8005a86:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00e      	beq.n	8005aac <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02a      	beq.n	8005af2 <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	43d2      	mvns	r2, r2
 8005aa4:	401a      	ands	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e022      	b.n	8005af2 <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	e01a      	b.n	8005af2 <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	0452      	lsls	r2, r2, #17
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	04d2      	lsls	r2, r2, #19
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	1d18      	adds	r0, r3, #4
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae8:	0019      	movs	r1, r3
 8005aea:	f001 f98f 	bl	8006e0c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005af2:	f000 ffd1 	bl	8006a98 <xTaskResumeAll>
 8005af6:	0003      	movs	r3, r0
 8005af8:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d02c      	beq.n	8005b5a <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 8005b06:	f002 f85b 	bl	8007bc0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005b0a:	f001 fc2f 	bl	800736c <uxTaskResetEventItemValue>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	049b      	lsls	r3, r3, #18
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d11a      	bne.n	8005b52 <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 8005b1c:	f002 f860 	bl	8007be0 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 f8a1 	bl	8005c74 <prvTestWaitCondition>
 8005b32:	1e03      	subs	r3, r0, #0
 8005b34:	d009      	beq.n	8005b4a <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	43d2      	mvns	r2, r2
 8005b44:	401a      	ands	r2, r3
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 8005b4e:	f002 f859 	bl	8007c04 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b00c      	add	sp, #48	; 0x30
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <xEventGroupSetBits+0x20>
 8005b80:	b672      	cpsid	i
 8005b82:	e7fe      	b.n	8005b82 <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	d001      	beq.n	8005b90 <xEventGroupSetBits+0x2c>
 8005b8c:	b672      	cpsid	i
 8005b8e:	e7fe      	b.n	8005b8e <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	3304      	adds	r3, #4
 8005b94:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3308      	adds	r3, #8
 8005b9a:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 8005b9c:	f000 ff70 	bl	8006a80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005bb2:	e03d      	b.n	8005c30 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	0e1b      	lsrs	r3, r3, #24
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	04db      	lsls	r3, r3, #19
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d107      	bne.n	8005bee <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4013      	ands	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	e008      	b.n	8005c00 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d101      	bne.n	8005c00 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d012      	beq.n	8005c2c <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	045b      	lsls	r3, r3, #17
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2280      	movs	r2, #128	; 0x80
 8005c1e:	0492      	lsls	r2, r2, #18
 8005c20:	431a      	orrs	r2, r3
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	0011      	movs	r1, r2
 8005c26:	0018      	movs	r0, r3
 8005c28:	f001 f9a0 	bl	8006f6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 8005c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1bd      	bne.n	8005bb4 <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	43d2      	mvns	r2, r2
 8005c40:	401a      	ands	r2, r3
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005c46:	f000 ff27 	bl	8006a98 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	681b      	ldr	r3, [r3, #0]
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b00c      	add	sp, #48	; 0x30
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7ff ff7c 	bl	8005b64 <xEventGroupSetBits>
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b002      	add	sp, #8
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d00a      	beq.n	8005ca8 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e007      	b.n	8005ca8 <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d101      	bne.n	8005ca8 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005ca8:	697b      	ldr	r3, [r7, #20]
}
 8005caa:	0018      	movs	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b006      	add	sp, #24
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	4805      	ldr	r0, [pc, #20]	; (8005cdc <xEventGroupSetBitsFromISR+0x28>)
 8005cc8:	f001 fecc 	bl	8007a64 <xTimerPendFunctionCallFromISR>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	617b      	str	r3, [r7, #20]

		return xReturn;
 8005cd0:	697b      	ldr	r3, [r7, #20]
	}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b006      	add	sp, #24
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	08005c57 	.word	0x08005c57

08005ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3308      	adds	r3, #8
 8005cec:	001a      	movs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	4252      	negs	r2, r2
 8005cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	001a      	movs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3308      	adds	r3, #8
 8005d08:	001a      	movs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b002      	add	sp, #8
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b004      	add	sp, #16
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	d103      	bne.n	8005d94 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e00c      	b.n	8005dae <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3308      	adds	r3, #8
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e002      	b.n	8005da2 <vListInsert+0x2c>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d2f6      	bcs.n	8005d9c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b004      	add	sp, #16
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6892      	ldr	r2, [r2, #8]
 8005df8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6852      	ldr	r2, [r2, #4]
 8005e02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d103      	bne.n	8005e16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
}
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b004      	add	sp, #16
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <xQueueGenericReset+0x18>
 8005e46:	b672      	cpsid	i
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005e4a:	f001 fec9 	bl	8007be0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	434b      	muls	r3, r1
 8005e5c:	18d2      	adds	r2, r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	1e59      	subs	r1, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	434b      	muls	r3, r1
 8005e80:	18d2      	adds	r2, r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2244      	movs	r2, #68	; 0x44
 8005e8a:	21ff      	movs	r1, #255	; 0xff
 8005e8c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2245      	movs	r2, #69	; 0x45
 8005e92:	21ff      	movs	r1, #255	; 0xff
 8005e94:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3310      	adds	r3, #16
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f001 f803 	bl	8006eb4 <xTaskRemoveFromEventList>
 8005eae:	1e03      	subs	r3, r0, #0
 8005eb0:	d00c      	beq.n	8005ecc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eb2:	f001 fe85 	bl	8007bc0 <vPortYield>
 8005eb6:	e009      	b.n	8005ecc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3310      	adds	r3, #16
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7ff ff0f 	bl	8005ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3324      	adds	r3, #36	; 0x24
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f7ff ff0a 	bl	8005ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ecc:	f001 fe9a 	bl	8007c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ed0:	2301      	movs	r3, #1
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b004      	add	sp, #16
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005eda:	b590      	push	{r4, r7, lr}
 8005edc:	b089      	sub	sp, #36	; 0x24
 8005ede:	af02      	add	r7, sp, #8
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <xQueueGenericCreateStatic+0x18>
 8005eee:	b672      	cpsid	i
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <xQueueGenericCreateStatic+0x22>
 8005ef8:	b672      	cpsid	i
 8005efa:	e7fe      	b.n	8005efa <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <xQueueGenericCreateStatic+0x2e>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <xQueueGenericCreateStatic+0x32>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <xQueueGenericCreateStatic+0x34>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <xQueueGenericCreateStatic+0x3c>
 8005f12:	b672      	cpsid	i
 8005f14:	e7fe      	b.n	8005f14 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <xQueueGenericCreateStatic+0x48>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xQueueGenericCreateStatic+0x4c>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueGenericCreateStatic+0x4e>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <xQueueGenericCreateStatic+0x56>
 8005f2c:	b672      	cpsid	i
 8005f2e:	e7fe      	b.n	8005f2e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f30:	2350      	movs	r3, #80	; 0x50
 8005f32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b50      	cmp	r3, #80	; 0x50
 8005f38:	d001      	beq.n	8005f3e <xQueueGenericCreateStatic+0x64>
 8005f3a:	b672      	cpsid	i
 8005f3c:	e7fe      	b.n	8005f3c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f3e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2246      	movs	r2, #70	; 0x46
 8005f4e:	2101      	movs	r1, #1
 8005f50:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f52:	2328      	movs	r3, #40	; 0x28
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	781c      	ldrb	r4, [r3, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	0023      	movs	r3, r4
 8005f64:	f000 f805 	bl	8005f72 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f68:	697b      	ldr	r3, [r7, #20]
	}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b007      	add	sp, #28
 8005f70:	bd90      	pop	{r4, r7, pc}

08005f72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	001a      	movs	r2, r3
 8005f80:	1cfb      	adds	r3, r7, #3
 8005f82:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e002      	b.n	8005f98 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f7ff ff42 	bl	8005e32 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	1cfa      	adds	r2, r7, #3
 8005fb2:	214c      	movs	r1, #76	; 0x4c
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b004      	add	sp, #16
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <xQueueGenericSend+0x20>
 8005fdc:	b672      	cpsid	i
 8005fde:	e7fe      	b.n	8005fde <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <xQueueGenericSend+0x2e>
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericSend+0x32>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericSend+0x34>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <xQueueGenericSend+0x3c>
 8005ff8:	b672      	cpsid	i
 8005ffa:	e7fe      	b.n	8005ffa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d103      	bne.n	800600a <xQueueGenericSend+0x4a>
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <xQueueGenericSend+0x4e>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericSend+0x50>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <xQueueGenericSend+0x58>
 8006014:	b672      	cpsid	i
 8006016:	e7fe      	b.n	8006016 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006018:	f001 f930 	bl	800727c <xTaskGetSchedulerState>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d102      	bne.n	8006026 <xQueueGenericSend+0x66>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <xQueueGenericSend+0x6a>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <xQueueGenericSend+0x6c>
 800602a:	2300      	movs	r3, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <xQueueGenericSend+0x74>
 8006030:	b672      	cpsid	i
 8006032:	e7fe      	b.n	8006032 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006034:	f001 fdd4 	bl	8007be0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <xQueueGenericSend+0x8a>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d11e      	bne.n	8006088 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	0018      	movs	r0, r3
 8006052:	f000 f99f 	bl	8006394 <prvCopyDataToQueue>
 8006056:	0003      	movs	r3, r0
 8006058:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	3324      	adds	r3, #36	; 0x24
 8006066:	0018      	movs	r0, r3
 8006068:	f000 ff24 	bl	8006eb4 <xTaskRemoveFromEventList>
 800606c:	1e03      	subs	r3, r0, #0
 800606e:	d007      	beq.n	8006080 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006070:	f001 fda6 	bl	8007bc0 <vPortYield>
 8006074:	e004      	b.n	8006080 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800607c:	f001 fda0 	bl	8007bc0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006080:	f001 fdc0 	bl	8007c04 <vPortExitCritical>
				return pdPASS;
 8006084:	2301      	movs	r3, #1
 8006086:	e05b      	b.n	8006140 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800608e:	f001 fdb9 	bl	8007c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006092:	2300      	movs	r3, #0
 8006094:	e054      	b.n	8006140 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800609c:	2314      	movs	r3, #20
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 ffb5 	bl	8007010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060aa:	f001 fdab 	bl	8007c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ae:	f000 fce7 	bl	8006a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b2:	f001 fd95 	bl	8007be0 <vPortEnterCritical>
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	2244      	movs	r2, #68	; 0x44
 80060ba:	5c9b      	ldrb	r3, [r3, r2]
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	d103      	bne.n	80060ca <xQueueGenericSend+0x10a>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	2244      	movs	r2, #68	; 0x44
 80060c6:	2100      	movs	r1, #0
 80060c8:	5499      	strb	r1, [r3, r2]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2245      	movs	r2, #69	; 0x45
 80060ce:	5c9b      	ldrb	r3, [r3, r2]
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	3301      	adds	r3, #1
 80060d4:	d103      	bne.n	80060de <xQueueGenericSend+0x11e>
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	2245      	movs	r2, #69	; 0x45
 80060da:	2100      	movs	r1, #0
 80060dc:	5499      	strb	r1, [r3, r2]
 80060de:	f001 fd91 	bl	8007c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e2:	1d3a      	adds	r2, r7, #4
 80060e4:	2314      	movs	r3, #20
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	0011      	movs	r1, r2
 80060ea:	0018      	movs	r0, r3
 80060ec:	f000 ffa4 	bl	8007038 <xTaskCheckForTimeOut>
 80060f0:	1e03      	subs	r3, r0, #0
 80060f2:	d11e      	bne.n	8006132 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 fa51 	bl	800659e <prvIsQueueFull>
 80060fc:	1e03      	subs	r3, r0, #0
 80060fe:	d011      	beq.n	8006124 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	3310      	adds	r3, #16
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f000 fe61 	bl	8006dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 f9d0 	bl	80064b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006116:	f000 fcbf 	bl	8006a98 <xTaskResumeAll>
 800611a:	1e03      	subs	r3, r0, #0
 800611c:	d18a      	bne.n	8006034 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800611e:	f001 fd4f 	bl	8007bc0 <vPortYield>
 8006122:	e787      	b.n	8006034 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	0018      	movs	r0, r3
 8006128:	f000 f9c5 	bl	80064b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800612c:	f000 fcb4 	bl	8006a98 <xTaskResumeAll>
 8006130:	e780      	b.n	8006034 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	0018      	movs	r0, r3
 8006136:	f000 f9be 	bl	80064b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613a:	f000 fcad 	bl	8006a98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800613e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b00a      	add	sp, #40	; 0x28
 8006146:	bd80      	pop	{r7, pc}

08006148 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006148:	b590      	push	{r4, r7, lr}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <xQueueGenericSendFromISR+0x1c>
 8006160:	b672      	cpsid	i
 8006162:	e7fe      	b.n	8006162 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <xQueueGenericSendFromISR+0x2a>
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <xQueueGenericSendFromISR+0x2e>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <xQueueGenericSendFromISR+0x30>
 8006176:	2300      	movs	r3, #0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <xQueueGenericSendFromISR+0x38>
 800617c:	b672      	cpsid	i
 800617e:	e7fe      	b.n	800617e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d103      	bne.n	800618e <xQueueGenericSendFromISR+0x46>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <xQueueGenericSendFromISR+0x4a>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <xQueueGenericSendFromISR+0x4c>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <xQueueGenericSendFromISR+0x54>
 8006198:	b672      	cpsid	i
 800619a:	e7fe      	b.n	800619a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800619c:	f001 fd4a 	bl	8007c34 <ulSetInterruptMaskFromISR>
 80061a0:	0003      	movs	r3, r0
 80061a2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <xQueueGenericSendFromISR+0x6e>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d12e      	bne.n	8006214 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061b6:	2413      	movs	r4, #19
 80061b8:	193b      	adds	r3, r7, r4
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	2145      	movs	r1, #69	; 0x45
 80061be:	5c52      	ldrb	r2, [r2, r1]
 80061c0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f000 f8e3 	bl	8006394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	3301      	adds	r3, #1
 80061d6:	d111      	bne.n	80061fc <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d016      	beq.n	800620e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	3324      	adds	r3, #36	; 0x24
 80061e4:	0018      	movs	r0, r3
 80061e6:	f000 fe65 	bl	8006eb4 <xTaskRemoveFromEventList>
 80061ea:	1e03      	subs	r3, r0, #0
 80061ec:	d00f      	beq.n	800620e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00c      	beq.n	800620e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e008      	b.n	800620e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061fc:	2313      	movs	r3, #19
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	b259      	sxtb	r1, r3
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2245      	movs	r2, #69	; 0x45
 800620c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800620e:	2301      	movs	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
		{
 8006212:	e001      	b.n	8006218 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	0018      	movs	r0, r3
 800621c:	f001 fd10 	bl	8007c40 <vClearInterruptMaskFromISR>

	return xReturn;
 8006220:	69fb      	ldr	r3, [r7, #28]
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b009      	add	sp, #36	; 0x24
 8006228:	bd90      	pop	{r4, r7, pc}

0800622a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b08a      	sub	sp, #40	; 0x28
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <xQueueReceive+0x1e>
 8006244:	b672      	cpsid	i
 8006246:	e7fe      	b.n	8006246 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <xQueueReceive+0x2c>
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <xQueueReceive+0x30>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <xQueueReceive+0x32>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <xQueueReceive+0x3a>
 8006260:	b672      	cpsid	i
 8006262:	e7fe      	b.n	8006262 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006264:	f001 f80a 	bl	800727c <xTaskGetSchedulerState>
 8006268:	1e03      	subs	r3, r0, #0
 800626a:	d102      	bne.n	8006272 <xQueueReceive+0x48>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <xQueueReceive+0x4c>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <xQueueReceive+0x4e>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <xQueueReceive+0x56>
 800627c:	b672      	cpsid	i
 800627e:	e7fe      	b.n	800627e <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006280:	f001 fcae 	bl	8007be0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01a      	beq.n	80062c6 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	0011      	movs	r1, r2
 8006296:	0018      	movs	r0, r3
 8006298:	f000 f8e7 	bl	800646a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	3310      	adds	r3, #16
 80062b0:	0018      	movs	r0, r3
 80062b2:	f000 fdff 	bl	8006eb4 <xTaskRemoveFromEventList>
 80062b6:	1e03      	subs	r3, r0, #0
 80062b8:	d001      	beq.n	80062be <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ba:	f001 fc81 	bl	8007bc0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062be:	f001 fca1 	bl	8007c04 <vPortExitCritical>
				return pdPASS;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e062      	b.n	800638c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062cc:	f001 fc9a 	bl	8007c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e05b      	b.n	800638c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062da:	2314      	movs	r3, #20
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	0018      	movs	r0, r3
 80062e0:	f000 fe96 	bl	8007010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062e4:	2301      	movs	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e8:	f001 fc8c 	bl	8007c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ec:	f000 fbc8 	bl	8006a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062f0:	f001 fc76 	bl	8007be0 <vPortEnterCritical>
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	2244      	movs	r2, #68	; 0x44
 80062f8:	5c9b      	ldrb	r3, [r3, r2]
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	3301      	adds	r3, #1
 80062fe:	d103      	bne.n	8006308 <xQueueReceive+0xde>
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2244      	movs	r2, #68	; 0x44
 8006304:	2100      	movs	r1, #0
 8006306:	5499      	strb	r1, [r3, r2]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2245      	movs	r2, #69	; 0x45
 800630c:	5c9b      	ldrb	r3, [r3, r2]
 800630e:	b25b      	sxtb	r3, r3
 8006310:	3301      	adds	r3, #1
 8006312:	d103      	bne.n	800631c <xQueueReceive+0xf2>
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2245      	movs	r2, #69	; 0x45
 8006318:	2100      	movs	r1, #0
 800631a:	5499      	strb	r1, [r3, r2]
 800631c:	f001 fc72 	bl	8007c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006320:	1d3a      	adds	r2, r7, #4
 8006322:	2314      	movs	r3, #20
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	0011      	movs	r1, r2
 8006328:	0018      	movs	r0, r3
 800632a:	f000 fe85 	bl	8007038 <xTaskCheckForTimeOut>
 800632e:	1e03      	subs	r3, r0, #0
 8006330:	d11e      	bne.n	8006370 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	0018      	movs	r0, r3
 8006336:	f000 f91c 	bl	8006572 <prvIsQueueEmpty>
 800633a:	1e03      	subs	r3, r0, #0
 800633c:	d011      	beq.n	8006362 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	3324      	adds	r3, #36	; 0x24
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	0011      	movs	r1, r2
 8006346:	0018      	movs	r0, r3
 8006348:	f000 fd42 	bl	8006dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	0018      	movs	r0, r3
 8006350:	f000 f8b1 	bl	80064b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006354:	f000 fba0 	bl	8006a98 <xTaskResumeAll>
 8006358:	1e03      	subs	r3, r0, #0
 800635a:	d191      	bne.n	8006280 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800635c:	f001 fc30 	bl	8007bc0 <vPortYield>
 8006360:	e78e      	b.n	8006280 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	0018      	movs	r0, r3
 8006366:	f000 f8a6 	bl	80064b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800636a:	f000 fb95 	bl	8006a98 <xTaskResumeAll>
 800636e:	e787      	b.n	8006280 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	0018      	movs	r0, r3
 8006374:	f000 f89f 	bl	80064b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006378:	f000 fb8e 	bl	8006a98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	0018      	movs	r0, r3
 8006380:	f000 f8f7 	bl	8006572 <prvIsQueueEmpty>
 8006384:	1e03      	subs	r3, r0, #0
 8006386:	d100      	bne.n	800638a <xQueueReceive+0x160>
 8006388:	e77a      	b.n	8006280 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800638a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800638c:	0018      	movs	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	b00a      	add	sp, #40	; 0x28
 8006392:	bd80      	pop	{r7, pc}

08006394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10e      	bne.n	80063d0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d14e      	bne.n	8006458 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 ff78 	bl	80072b4 <xTaskPriorityDisinherit>
 80063c4:	0003      	movs	r3, r0
 80063c6:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	609a      	str	r2, [r3, #8]
 80063ce:	e043      	b.n	8006458 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d119      	bne.n	800640a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6858      	ldr	r0, [r3, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	0019      	movs	r1, r3
 80063e2:	f001 fe65 	bl	80080b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	18d2      	adds	r2, r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d32b      	bcc.n	8006458 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	e026      	b.n	8006458 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68d8      	ldr	r0, [r3, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	0019      	movs	r1, r3
 8006416:	f001 fe4b 	bl	80080b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	425b      	negs	r3, r3
 8006424:	18d2      	adds	r2, r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d207      	bcs.n	8006446 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	425b      	negs	r3, r3
 8006440:	18d2      	adds	r2, r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d105      	bne.n	8006458 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3b01      	subs	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006460:	697b      	ldr	r3, [r7, #20]
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b006      	add	sp, #24
 8006468:	bd80      	pop	{r7, pc}

0800646a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d018      	beq.n	80064ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	18d2      	adds	r2, r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d303      	bcc.n	800649e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68d9      	ldr	r1, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f001 fe01 	bl	80080b0 <memcpy>
	}
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b002      	add	sp, #8
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064be:	f001 fb8f 	bl	8007be0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064c2:	230f      	movs	r3, #15
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	2145      	movs	r1, #69	; 0x45
 80064ca:	5c52      	ldrb	r2, [r2, r1]
 80064cc:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ce:	e013      	b.n	80064f8 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d016      	beq.n	8006506 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3324      	adds	r3, #36	; 0x24
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 fce9 	bl	8006eb4 <xTaskRemoveFromEventList>
 80064e2:	1e03      	subs	r3, r0, #0
 80064e4:	d001      	beq.n	80064ea <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064e6:	f000 fdf7 	bl	80070d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064ea:	210f      	movs	r1, #15
 80064ec:	187b      	adds	r3, r7, r1
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	187b      	adds	r3, r7, r1
 80064f6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064f8:	230f      	movs	r3, #15
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	dce5      	bgt.n	80064d0 <prvUnlockQueue+0x1a>
 8006504:	e000      	b.n	8006508 <prvUnlockQueue+0x52>
					break;
 8006506:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2245      	movs	r2, #69	; 0x45
 800650c:	21ff      	movs	r1, #255	; 0xff
 800650e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006510:	f001 fb78 	bl	8007c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006514:	f001 fb64 	bl	8007be0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006518:	230e      	movs	r3, #14
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	2144      	movs	r1, #68	; 0x44
 8006520:	5c52      	ldrb	r2, [r2, r1]
 8006522:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006524:	e013      	b.n	800654e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d016      	beq.n	800655c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3310      	adds	r3, #16
 8006532:	0018      	movs	r0, r3
 8006534:	f000 fcbe 	bl	8006eb4 <xTaskRemoveFromEventList>
 8006538:	1e03      	subs	r3, r0, #0
 800653a:	d001      	beq.n	8006540 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800653c:	f000 fdcc 	bl	80070d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006540:	210e      	movs	r1, #14
 8006542:	187b      	adds	r3, r7, r1
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	3b01      	subs	r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	187b      	adds	r3, r7, r1
 800654c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654e:	230e      	movs	r3, #14
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b25b      	sxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	dce5      	bgt.n	8006526 <prvUnlockQueue+0x70>
 800655a:	e000      	b.n	800655e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800655c:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2244      	movs	r2, #68	; 0x44
 8006562:	21ff      	movs	r1, #255	; 0xff
 8006564:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006566:	f001 fb4d 	bl	8007c04 <vPortExitCritical>
}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}

08006572 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800657a:	f001 fb31 	bl	8007be0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	e001      	b.n	8006590 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006590:	f001 fb38 	bl	8007c04 <vPortExitCritical>

	return xReturn;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	0018      	movs	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	b004      	add	sp, #16
 800659c:	bd80      	pop	{r7, pc}

0800659e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065a6:	f001 fb1b 	bl	8007be0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d102      	bne.n	80065bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065b6:	2301      	movs	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e001      	b.n	80065c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c0:	f001 fb20 	bl	8007c04 <vPortExitCritical>

	return xReturn;
 80065c4:	68fb      	ldr	r3, [r7, #12]
}
 80065c6:	0018      	movs	r0, r3
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b004      	add	sp, #16
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	e015      	b.n	800660c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <vQueueAddToRegistry+0x4c>)
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	00d2      	lsls	r2, r2, #3
 80065e6:	58d3      	ldr	r3, [r2, r3]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10c      	bne.n	8006606 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <vQueueAddToRegistry+0x4c>)
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	00d2      	lsls	r2, r2, #3
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <vQueueAddToRegistry+0x4c>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	18d3      	adds	r3, r2, r3
 80065fe:	3304      	adds	r3, #4
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006604:	e006      	b.n	8006614 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b07      	cmp	r3, #7
 8006610:	d9e6      	bls.n	80065e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	46bd      	mov	sp, r7
 8006618:	b004      	add	sp, #16
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000954 	.word	0x20000954

08006620 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006630:	f001 fad6 	bl	8007be0 <vPortEnterCritical>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2244      	movs	r2, #68	; 0x44
 8006638:	5c9b      	ldrb	r3, [r3, r2]
 800663a:	b25b      	sxtb	r3, r3
 800663c:	3301      	adds	r3, #1
 800663e:	d103      	bne.n	8006648 <vQueueWaitForMessageRestricted+0x28>
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2244      	movs	r2, #68	; 0x44
 8006644:	2100      	movs	r1, #0
 8006646:	5499      	strb	r1, [r3, r2]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2245      	movs	r2, #69	; 0x45
 800664c:	5c9b      	ldrb	r3, [r3, r2]
 800664e:	b25b      	sxtb	r3, r3
 8006650:	3301      	adds	r3, #1
 8006652:	d103      	bne.n	800665c <vQueueWaitForMessageRestricted+0x3c>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2245      	movs	r2, #69	; 0x45
 8006658:	2100      	movs	r1, #0
 800665a:	5499      	strb	r1, [r3, r2]
 800665c:	f001 fad2 	bl	8007c04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	3324      	adds	r3, #36	; 0x24
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	0018      	movs	r0, r3
 8006672:	f000 fbf9 	bl	8006e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	0018      	movs	r0, r3
 800667a:	f7ff ff1c 	bl	80064b6 <prvUnlockQueue>
	}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	46bd      	mov	sp, r7
 8006682:	b006      	add	sp, #24
 8006684:	bd80      	pop	{r7, pc}

08006686 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006686:	b590      	push	{r4, r7, lr}
 8006688:	b08d      	sub	sp, #52	; 0x34
 800668a:	af04      	add	r7, sp, #16
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <xTaskCreateStatic+0x18>
 800669a:	b672      	cpsid	i
 800669c:	e7fe      	b.n	800669c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <xTaskCreateStatic+0x22>
 80066a4:	b672      	cpsid	i
 80066a6:	e7fe      	b.n	80066a6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066a8:	235c      	movs	r3, #92	; 0x5c
 80066aa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b5c      	cmp	r3, #92	; 0x5c
 80066b0:	d001      	beq.n	80066b6 <xTaskCreateStatic+0x30>
 80066b2:	b672      	cpsid	i
 80066b4:	e7fe      	b.n	80066b4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066b6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d020      	beq.n	8006700 <xTaskCreateStatic+0x7a>
 80066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01d      	beq.n	8006700 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2259      	movs	r2, #89	; 0x59
 80066d2:	2102      	movs	r1, #2
 80066d4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066d6:	683c      	ldr	r4, [r7, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	2300      	movs	r3, #0
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	2318      	movs	r3, #24
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	0023      	movs	r3, r4
 80066f2:	f000 f859 	bl	80067a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	0018      	movs	r0, r3
 80066fa:	f000 f8df 	bl	80068bc <prvAddNewTaskToReadyList>
 80066fe:	e001      	b.n	8006704 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006704:	69bb      	ldr	r3, [r7, #24]
	}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b009      	add	sp, #36	; 0x24
 800670c:	bd90      	pop	{r4, r7, pc}

0800670e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b08d      	sub	sp, #52	; 0x34
 8006712:	af04      	add	r7, sp, #16
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	1dbb      	adds	r3, r7, #6
 800671c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800671e:	1dbb      	adds	r3, r7, #6
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	0018      	movs	r0, r3
 8006726:	f001 faf3 	bl	8007d10 <pvPortMalloc>
 800672a:	0003      	movs	r3, r0
 800672c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006734:	205c      	movs	r0, #92	; 0x5c
 8006736:	f001 faeb 	bl	8007d10 <pvPortMalloc>
 800673a:	0003      	movs	r3, r0
 800673c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
 800674a:	e006      	b.n	800675a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	0018      	movs	r0, r3
 8006750:	f001 fb84 	bl	8007e5c <vPortFree>
 8006754:	e001      	b.n	800675a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01a      	beq.n	8006796 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2259      	movs	r2, #89	; 0x59
 8006764:	2100      	movs	r1, #0
 8006766:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006768:	1dbb      	adds	r3, r7, #6
 800676a:	881a      	ldrh	r2, [r3, #0]
 800676c:	683c      	ldr	r4, [r7, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	2300      	movs	r3, #0
 8006774:	9303      	str	r3, [sp, #12]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	9302      	str	r3, [sp, #8]
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	0023      	movs	r3, r4
 8006784:	f000 f810 	bl	80067a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	0018      	movs	r0, r3
 800678c:	f000 f896 	bl	80068bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006790:	2301      	movs	r3, #1
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	e002      	b.n	800679c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006796:	2301      	movs	r3, #1
 8006798:	425b      	negs	r3, r3
 800679a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800679c:	69bb      	ldr	r3, [r7, #24]
	}
 800679e:	0018      	movs	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b009      	add	sp, #36	; 0x24
 80067a4:	bd90      	pop	{r4, r7, pc}
	...

080067a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	001a      	movs	r2, r3
 80067c0:	21a5      	movs	r1, #165	; 0xa5
 80067c2:	f001 fc7e 	bl	80080c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	493a      	ldr	r1, [pc, #232]	; (80068b8 <prvInitialiseNewTask+0x110>)
 80067ce:	468c      	mov	ip, r1
 80067d0:	4463      	add	r3, ip
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2207      	movs	r2, #7
 80067dc:	4393      	bics	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2207      	movs	r2, #7
 80067e4:	4013      	ands	r3, r2
 80067e6:	d001      	beq.n	80067ec <prvInitialiseNewTask+0x44>
 80067e8:	b672      	cpsid	i
 80067ea:	e7fe      	b.n	80067ea <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d020      	beq.n	8006834 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e013      	b.n	8006820 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	18d3      	adds	r3, r2, r3
 80067fe:	7818      	ldrb	r0, [r3, #0]
 8006800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006802:	2134      	movs	r1, #52	; 0x34
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	18d3      	adds	r3, r2, r3
 8006808:	185b      	adds	r3, r3, r1
 800680a:	1c02      	adds	r2, r0, #0
 800680c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	18d3      	adds	r3, r2, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d006      	beq.n	8006828 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	3301      	adds	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b0f      	cmp	r3, #15
 8006824:	d9e8      	bls.n	80067f8 <prvInitialiseNewTask+0x50>
 8006826:	e000      	b.n	800682a <prvInitialiseNewTask+0x82>
			{
				break;
 8006828:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2243      	movs	r2, #67	; 0x43
 800682e:	2100      	movs	r1, #0
 8006830:	5499      	strb	r1, [r3, r2]
 8006832:	e003      	b.n	800683c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	2234      	movs	r2, #52	; 0x34
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	2b37      	cmp	r3, #55	; 0x37
 8006840:	d901      	bls.n	8006846 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006842:	2337      	movs	r3, #55	; 0x37
 8006844:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	6a3a      	ldr	r2, [r7, #32]
 800684a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	2200      	movs	r2, #0
 8006856:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	3304      	adds	r3, #4
 800685c:	0018      	movs	r0, r3
 800685e:	f7ff fa5d 	bl	8005d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	3318      	adds	r3, #24
 8006866:	0018      	movs	r0, r3
 8006868:	f7ff fa58 	bl	8005d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	2238      	movs	r2, #56	; 0x38
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006880:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	2200      	movs	r2, #0
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2258      	movs	r2, #88	; 0x58
 800688c:	2100      	movs	r1, #0
 800688e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	68f9      	ldr	r1, [r7, #12]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	0018      	movs	r0, r3
 8006898:	f001 f90a 	bl	8007ab0 <pxPortInitialiseStack>
 800689c:	0002      	movs	r2, r0
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b006      	add	sp, #24
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	3fffffff 	.word	0x3fffffff

080068bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068c4:	f001 f98c 	bl	8007be0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <prvAddNewTaskToReadyList+0xb8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	4b29      	ldr	r3, [pc, #164]	; (8006974 <prvAddNewTaskToReadyList+0xb8>)
 80068d0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80068d2:	4b29      	ldr	r3, [pc, #164]	; (8006978 <prvAddNewTaskToReadyList+0xbc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068da:	4b27      	ldr	r3, [pc, #156]	; (8006978 <prvAddNewTaskToReadyList+0xbc>)
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068e0:	4b24      	ldr	r3, [pc, #144]	; (8006974 <prvAddNewTaskToReadyList+0xb8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d110      	bne.n	800690a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068e8:	f000 fc10 	bl	800710c <prvInitialiseTaskLists>
 80068ec:	e00d      	b.n	800690a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068ee:	4b23      	ldr	r3, [pc, #140]	; (800697c <prvAddNewTaskToReadyList+0xc0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068f6:	4b20      	ldr	r3, [pc, #128]	; (8006978 <prvAddNewTaskToReadyList+0xbc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	429a      	cmp	r2, r3
 8006902:	d802      	bhi.n	800690a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006904:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <prvAddNewTaskToReadyList+0xbc>)
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800690a:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <prvAddNewTaskToReadyList+0xc4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <prvAddNewTaskToReadyList+0xc4>)
 8006912:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006914:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <prvAddNewTaskToReadyList+0xc4>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4b18      	ldr	r3, [pc, #96]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d903      	bls.n	8006930 <prvAddNewTaskToReadyList+0x74>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	4b15      	ldr	r3, [pc, #84]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	0013      	movs	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	189b      	adds	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <prvAddNewTaskToReadyList+0xcc>)
 800693e:	189a      	adds	r2, r3, r2
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	0019      	movs	r1, r3
 8006946:	0010      	movs	r0, r2
 8006948:	f7ff f9f3 	bl	8005d32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800694c:	f001 f95a 	bl	8007c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvAddNewTaskToReadyList+0xc0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <prvAddNewTaskToReadyList+0xbc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	429a      	cmp	r2, r3
 8006964:	d201      	bcs.n	800696a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006966:	f001 f92b 	bl	8007bc0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	46bd      	mov	sp, r7
 800696e:	b002      	add	sp, #8
 8006970:	bd80      	pop	{r7, pc}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	20000e68 	.word	0x20000e68
 8006978:	20000994 	.word	0x20000994
 800697c:	20000e74 	.word	0x20000e74
 8006980:	20000e84 	.word	0x20000e84
 8006984:	20000e70 	.word	0x20000e70
 8006988:	20000998 	.word	0x20000998

0800698c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d010      	beq.n	80069c0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800699e:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <vTaskDelay+0x48>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <vTaskDelay+0x1e>
 80069a6:	b672      	cpsid	i
 80069a8:	e7fe      	b.n	80069a8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80069aa:	f000 f869 	bl	8006a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2100      	movs	r1, #0
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 fcf0 	bl	8007398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069b8:	f000 f86e 	bl	8006a98 <xTaskResumeAll>
 80069bc:	0003      	movs	r3, r0
 80069be:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80069c6:	f001 f8fb 	bl	8007bc0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b004      	add	sp, #16
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	20000e90 	.word	0x20000e90

080069d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b089      	sub	sp, #36	; 0x24
 80069dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069e6:	003a      	movs	r2, r7
 80069e8:	1d39      	adds	r1, r7, #4
 80069ea:	2308      	movs	r3, #8
 80069ec:	18fb      	adds	r3, r7, r3
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fe ffa2 	bl	8005938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069f4:	683c      	ldr	r4, [r7, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	491b      	ldr	r1, [pc, #108]	; (8006a68 <vTaskStartScheduler+0x90>)
 80069fc:	481b      	ldr	r0, [pc, #108]	; (8006a6c <vTaskStartScheduler+0x94>)
 80069fe:	9202      	str	r2, [sp, #8]
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	0022      	movs	r2, r4
 8006a0a:	f7ff fe3c 	bl	8006686 <xTaskCreateStatic>
 8006a0e:	0002      	movs	r2, r0
 8006a10:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <vTaskStartScheduler+0x98>)
 8006a12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <vTaskStartScheduler+0x98>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e001      	b.n	8006a26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d103      	bne.n	8006a34 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006a2c:	f000 fd08 	bl	8007440 <xTimerCreateTimerTask>
 8006a30:	0003      	movs	r3, r0
 8006a32:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d10d      	bne.n	8006a56 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006a3a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <vTaskStartScheduler+0x9c>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4252      	negs	r2, r2
 8006a42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a44:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <vTaskStartScheduler+0xa0>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <vTaskStartScheduler+0xa4>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a50:	f001 f892 	bl	8007b78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a54:	e004      	b.n	8006a60 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <vTaskStartScheduler+0x88>
 8006a5c:	b672      	cpsid	i
 8006a5e:	e7fe      	b.n	8006a5e <vTaskStartScheduler+0x86>
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b005      	add	sp, #20
 8006a66:	bd90      	pop	{r4, r7, pc}
 8006a68:	08008a8c 	.word	0x08008a8c
 8006a6c:	080070ed 	.word	0x080070ed
 8006a70:	20000e8c 	.word	0x20000e8c
 8006a74:	20000e88 	.word	0x20000e88
 8006a78:	20000e74 	.word	0x20000e74
 8006a7c:	20000e6c 	.word	0x20000e6c

08006a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <vTaskSuspendAll+0x14>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <vTaskSuspendAll+0x14>)
 8006a8c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000e90 	.word	0x20000e90

08006a98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006aa6:	4b3a      	ldr	r3, [pc, #232]	; (8006b90 <xTaskResumeAll+0xf8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <xTaskResumeAll+0x1a>
 8006aae:	b672      	cpsid	i
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ab2:	f001 f895 	bl	8007be0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ab6:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <xTaskResumeAll+0xf8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	1e5a      	subs	r2, r3, #1
 8006abc:	4b34      	ldr	r3, [pc, #208]	; (8006b90 <xTaskResumeAll+0xf8>)
 8006abe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac0:	4b33      	ldr	r3, [pc, #204]	; (8006b90 <xTaskResumeAll+0xf8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d15b      	bne.n	8006b80 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ac8:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <xTaskResumeAll+0xfc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d057      	beq.n	8006b80 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ad0:	e02f      	b.n	8006b32 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad2:	4b31      	ldr	r3, [pc, #196]	; (8006b98 <xTaskResumeAll+0x100>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3318      	adds	r3, #24
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7ff f97f 	bl	8005de2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7ff f97a 	bl	8005de2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <xTaskResumeAll+0x104>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d903      	bls.n	8006b02 <xTaskResumeAll+0x6a>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	4b27      	ldr	r3, [pc, #156]	; (8006b9c <xTaskResumeAll+0x104>)
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	0013      	movs	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	189b      	adds	r3, r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a24      	ldr	r2, [pc, #144]	; (8006ba0 <xTaskResumeAll+0x108>)
 8006b10:	189a      	adds	r2, r3, r2
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3304      	adds	r3, #4
 8006b16:	0019      	movs	r1, r3
 8006b18:	0010      	movs	r0, r2
 8006b1a:	f7ff f90a 	bl	8005d32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <xTaskResumeAll+0x10c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <xTaskResumeAll+0x110>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b32:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <xTaskResumeAll+0x100>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1cb      	bne.n	8006ad2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b40:	f000 fb7e 	bl	8007240 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b44:	4b19      	ldr	r3, [pc, #100]	; (8006bac <xTaskResumeAll+0x114>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00f      	beq.n	8006b70 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b50:	f000 f83c 	bl	8006bcc <xTaskIncrementTick>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d002      	beq.n	8006b5e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <xTaskResumeAll+0x110>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f2      	bne.n	8006b50 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006b6a:	4b10      	ldr	r3, [pc, #64]	; (8006bac <xTaskResumeAll+0x114>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <xTaskResumeAll+0x110>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b7c:	f001 f820 	bl	8007bc0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b80:	f001 f840 	bl	8007c04 <vPortExitCritical>

	return xAlreadyYielded;
 8006b84:	68bb      	ldr	r3, [r7, #8]
}
 8006b86:	0018      	movs	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b004      	add	sp, #16
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	20000e90 	.word	0x20000e90
 8006b94:	20000e68 	.word	0x20000e68
 8006b98:	20000e28 	.word	0x20000e28
 8006b9c:	20000e70 	.word	0x20000e70
 8006ba0:	20000998 	.word	0x20000998
 8006ba4:	20000994 	.word	0x20000994
 8006ba8:	20000e7c 	.word	0x20000e7c
 8006bac:	20000e78 	.word	0x20000e78

08006bb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bb6:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <xTaskGetTickCount+0x18>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bbc:	687b      	ldr	r3, [r7, #4]
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	20000e6c 	.word	0x20000e6c

08006bcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd6:	4b4a      	ldr	r3, [pc, #296]	; (8006d00 <xTaskIncrementTick+0x134>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d000      	beq.n	8006be0 <xTaskIncrementTick+0x14>
 8006bde:	e07e      	b.n	8006cde <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006be0:	4b48      	ldr	r3, [pc, #288]	; (8006d04 <xTaskIncrementTick+0x138>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006be8:	4b46      	ldr	r3, [pc, #280]	; (8006d04 <xTaskIncrementTick+0x138>)
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d117      	bne.n	8006c24 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bf4:	4b44      	ldr	r3, [pc, #272]	; (8006d08 <xTaskIncrementTick+0x13c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <xTaskIncrementTick+0x36>
 8006bfe:	b672      	cpsid	i
 8006c00:	e7fe      	b.n	8006c00 <xTaskIncrementTick+0x34>
 8006c02:	4b41      	ldr	r3, [pc, #260]	; (8006d08 <xTaskIncrementTick+0x13c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	4b40      	ldr	r3, [pc, #256]	; (8006d0c <xTaskIncrementTick+0x140>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	; (8006d08 <xTaskIncrementTick+0x13c>)
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	4b3e      	ldr	r3, [pc, #248]	; (8006d0c <xTaskIncrementTick+0x140>)
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	4b3e      	ldr	r3, [pc, #248]	; (8006d10 <xTaskIncrementTick+0x144>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	4b3c      	ldr	r3, [pc, #240]	; (8006d10 <xTaskIncrementTick+0x144>)
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f000 fb0e 	bl	8007240 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c24:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <xTaskIncrementTick+0x148>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d349      	bcc.n	8006cc2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2e:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <xTaskIncrementTick+0x13c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c38:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <xTaskIncrementTick+0x148>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4252      	negs	r2, r2
 8006c3e:	601a      	str	r2, [r3, #0]
					break;
 8006c40:	e03f      	b.n	8006cc2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c42:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <xTaskIncrementTick+0x13c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d203      	bcs.n	8006c62 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c5a:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <xTaskIncrementTick+0x148>)
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c60:	e02f      	b.n	8006cc2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3304      	adds	r3, #4
 8006c66:	0018      	movs	r0, r3
 8006c68:	f7ff f8bb 	bl	8005de2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3318      	adds	r3, #24
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7ff f8b2 	bl	8005de2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <xTaskIncrementTick+0x14c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d903      	bls.n	8006c92 <xTaskIncrementTick+0xc6>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	4b22      	ldr	r3, [pc, #136]	; (8006d18 <xTaskIncrementTick+0x14c>)
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	0013      	movs	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a1f      	ldr	r2, [pc, #124]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006ca0:	189a      	adds	r2, r3, r2
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	0010      	movs	r0, r2
 8006caa:	f7ff f842 	bl	8005d32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb2:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <xTaskIncrementTick+0x154>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d3b8      	bcc.n	8006c2e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc0:	e7b5      	b.n	8006c2e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <xTaskIncrementTick+0x154>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	4914      	ldr	r1, [pc, #80]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006cca:	0013      	movs	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	585b      	ldr	r3, [r3, r1]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d907      	bls.n	8006ce8 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e004      	b.n	8006ce8 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <xTaskIncrementTick+0x158>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xTaskIncrementTick+0x158>)
 8006ce6:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ce8:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <xTaskIncrementTick+0x15c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006cf4:	697b      	ldr	r3, [r7, #20]
}
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b006      	add	sp, #24
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	20000e90 	.word	0x20000e90
 8006d04:	20000e6c 	.word	0x20000e6c
 8006d08:	20000e20 	.word	0x20000e20
 8006d0c:	20000e24 	.word	0x20000e24
 8006d10:	20000e80 	.word	0x20000e80
 8006d14:	20000e88 	.word	0x20000e88
 8006d18:	20000e70 	.word	0x20000e70
 8006d1c:	20000998 	.word	0x20000998
 8006d20:	20000994 	.word	0x20000994
 8006d24:	20000e78 	.word	0x20000e78
 8006d28:	20000e7c 	.word	0x20000e7c

08006d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d32:	4b22      	ldr	r3, [pc, #136]	; (8006dbc <vTaskSwitchContext+0x90>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d3a:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <vTaskSwitchContext+0x94>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d40:	e037      	b.n	8006db2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006d42:	4b1f      	ldr	r3, [pc, #124]	; (8006dc0 <vTaskSwitchContext+0x94>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d48:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <vTaskSwitchContext+0x98>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	e007      	b.n	8006d60 <vTaskSwitchContext+0x34>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <vTaskSwitchContext+0x2e>
 8006d56:	b672      	cpsid	i
 8006d58:	e7fe      	b.n	8006d58 <vTaskSwitchContext+0x2c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	4919      	ldr	r1, [pc, #100]	; (8006dc8 <vTaskSwitchContext+0x9c>)
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	0013      	movs	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	189b      	adds	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	585b      	ldr	r3, [r3, r1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ee      	beq.n	8006d50 <vTaskSwitchContext+0x24>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	0013      	movs	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	189b      	adds	r3, r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4a12      	ldr	r2, [pc, #72]	; (8006dc8 <vTaskSwitchContext+0x9c>)
 8006d7e:	189b      	adds	r3, r3, r2
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	605a      	str	r2, [r3, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d104      	bne.n	8006da2 <vTaskSwitchContext+0x76>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <vTaskSwitchContext+0xa0>)
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <vTaskSwitchContext+0x98>)
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b002      	add	sp, #8
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	20000e90 	.word	0x20000e90
 8006dc0:	20000e7c 	.word	0x20000e7c
 8006dc4:	20000e70 	.word	0x20000e70
 8006dc8:	20000998 	.word	0x20000998
 8006dcc:	20000994 	.word	0x20000994

08006dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <vTaskPlaceOnEventList+0x14>
 8006de0:	b672      	cpsid	i
 8006de2:	e7fe      	b.n	8006de2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <vTaskPlaceOnEventList+0x38>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3318      	adds	r3, #24
 8006dea:	001a      	movs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	0011      	movs	r1, r2
 8006df0:	0018      	movs	r0, r3
 8006df2:	f7fe ffc0 	bl	8005d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2101      	movs	r1, #1
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f000 facc 	bl	8007398 <prvAddCurrentTaskToDelayedList>
}
 8006e00:	46c0      	nop			; (mov r8, r8)
 8006e02:	46bd      	mov	sp, r7
 8006e04:	b002      	add	sp, #8
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000994 	.word	0x20000994

08006e0c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <vTaskPlaceOnUnorderedEventList+0x16>
 8006e1e:	b672      	cpsid	i
 8006e20:	e7fe      	b.n	8006e20 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <vTaskPlaceOnUnorderedEventList+0x22>
 8006e2a:	b672      	cpsid	i
 8006e2c:	e7fe      	b.n	8006e2c <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <vTaskPlaceOnUnorderedEventList+0x58>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	0609      	lsls	r1, r1, #24
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <vTaskPlaceOnUnorderedEventList+0x58>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3318      	adds	r3, #24
 8006e42:	001a      	movs	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	0011      	movs	r1, r2
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f7fe ff72 	bl	8005d32 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2101      	movs	r1, #1
 8006e52:	0018      	movs	r0, r3
 8006e54:	f000 faa0 	bl	8007398 <prvAddCurrentTaskToDelayedList>
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b004      	add	sp, #16
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000e90 	.word	0x20000e90
 8006e64:	20000994 	.word	0x20000994

08006e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <vTaskPlaceOnEventListRestricted+0x16>
 8006e7a:	b672      	cpsid	i
 8006e7c:	e7fe      	b.n	8006e7c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <vTaskPlaceOnEventListRestricted+0x48>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3318      	adds	r3, #24
 8006e84:	001a      	movs	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	0011      	movs	r1, r2
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7fe ff51 	bl	8005d32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006e96:	2301      	movs	r3, #1
 8006e98:	425b      	negs	r3, r3
 8006e9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	0011      	movs	r1, r2
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 fa78 	bl	8007398 <prvAddCurrentTaskToDelayedList>
	}
 8006ea8:	46c0      	nop			; (mov r8, r8)
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b004      	add	sp, #16
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000994 	.word	0x20000994

08006eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <xTaskRemoveFromEventList+0x1a>
 8006eca:	b672      	cpsid	i
 8006ecc:	e7fe      	b.n	8006ecc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	3318      	adds	r3, #24
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7fe ff85 	bl	8005de2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <xTaskRemoveFromEventList+0xa0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11d      	bne.n	8006f1c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7fe ff7c 	bl	8005de2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <xTaskRemoveFromEventList+0xa4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d903      	bls.n	8006efe <xTaskRemoveFromEventList+0x4a>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <xTaskRemoveFromEventList+0xa4>)
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f02:	0013      	movs	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4a14      	ldr	r2, [pc, #80]	; (8006f5c <xTaskRemoveFromEventList+0xa8>)
 8006f0c:	189a      	adds	r2, r3, r2
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	3304      	adds	r3, #4
 8006f12:	0019      	movs	r1, r3
 8006f14:	0010      	movs	r0, r2
 8006f16:	f7fe ff0c 	bl	8005d32 <vListInsertEnd>
 8006f1a:	e007      	b.n	8006f2c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3318      	adds	r3, #24
 8006f20:	001a      	movs	r2, r3
 8006f22:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <xTaskRemoveFromEventList+0xac>)
 8006f24:	0011      	movs	r1, r2
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7fe ff03 	bl	8005d32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <xTaskRemoveFromEventList+0xb0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d905      	bls.n	8006f46 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <xTaskRemoveFromEventList+0xb4>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e001      	b.n	8006f4a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b004      	add	sp, #16
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000e90 	.word	0x20000e90
 8006f58:	20000e70 	.word	0x20000e70
 8006f5c:	20000998 	.word	0x20000998
 8006f60:	20000e28 	.word	0x20000e28
 8006f64:	20000994 	.word	0x20000994
 8006f68:	20000e7c 	.word	0x20000e7c

08006f6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006f76:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <vTaskRemoveFromUnorderedEventList+0x90>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <vTaskRemoveFromUnorderedEventList+0x16>
 8006f7e:	b672      	cpsid	i
 8006f80:	e7fe      	b.n	8006f80 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2280      	movs	r2, #128	; 0x80
 8006f86:	0612      	lsls	r2, r2, #24
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <vTaskRemoveFromUnorderedEventList+0x32>
 8006f9a:	b672      	cpsid	i
 8006f9c:	e7fe      	b.n	8006f9c <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7fe ff1e 	bl	8005de2 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7fe ff19 	bl	8005de2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <vTaskRemoveFromUnorderedEventList+0x94>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d903      	bls.n	8006fc4 <vTaskRemoveFromUnorderedEventList+0x58>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <vTaskRemoveFromUnorderedEventList+0x94>)
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	0013      	movs	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <vTaskRemoveFromUnorderedEventList+0x98>)
 8006fd2:	189a      	adds	r2, r3, r2
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	0019      	movs	r1, r3
 8006fda:	0010      	movs	r0, r2
 8006fdc:	f7fe fea9 	bl	8005d32 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe4:	4b08      	ldr	r3, [pc, #32]	; (8007008 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d902      	bls.n	8006ff4 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
	}
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b004      	add	sp, #16
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000e90 	.word	0x20000e90
 8007000:	20000e70 	.word	0x20000e70
 8007004:	20000998 	.word	0x20000998
 8007008:	20000994 	.word	0x20000994
 800700c:	20000e7c 	.word	0x20000e7c

08007010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <vTaskInternalSetTimeOutState+0x20>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <vTaskInternalSetTimeOutState+0x24>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
}
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b002      	add	sp, #8
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000e80 	.word	0x20000e80
 8007034:	20000e6c 	.word	0x20000e6c

08007038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <xTaskCheckForTimeOut+0x14>
 8007048:	b672      	cpsid	i
 800704a:	e7fe      	b.n	800704a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <xTaskCheckForTimeOut+0x1e>
 8007052:	b672      	cpsid	i
 8007054:	e7fe      	b.n	8007054 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007056:	f000 fdc3 	bl	8007be0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800705a:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <xTaskCheckForTimeOut+0x98>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3301      	adds	r3, #1
 8007070:	d102      	bne.n	8007078 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	e024      	b.n	80070c2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <xTaskCheckForTimeOut+0x9c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d007      	beq.n	8007094 <xTaskCheckForTimeOut+0x5c>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800708e:	2301      	movs	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e016      	b.n	80070c2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	429a      	cmp	r2, r3
 800709c:	d20c      	bcs.n	80070b8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1ad2      	subs	r2, r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7ff ffaf 	bl	8007010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e004      	b.n	80070c2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80070c2:	f000 fd9f 	bl	8007c04 <vPortExitCritical>

	return xReturn;
 80070c6:	697b      	ldr	r3, [r7, #20]
}
 80070c8:	0018      	movs	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b006      	add	sp, #24
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000e6c 	.word	0x20000e6c
 80070d4:	20000e80 	.word	0x20000e80

080070d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <vTaskMissedYield+0x10>)
 80070de:	2201      	movs	r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000e7c 	.word	0x20000e7c

080070ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070f4:	f000 f84e 	bl	8007194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <prvIdleTask+0x1c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d9f9      	bls.n	80070f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007100:	f000 fd5e 	bl	8007bc0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007104:	e7f6      	b.n	80070f4 <prvIdleTask+0x8>
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	20000998 	.word	0x20000998

0800710c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	e00c      	b.n	8007132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	0013      	movs	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	189b      	adds	r3, r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4a14      	ldr	r2, [pc, #80]	; (8007174 <prvInitialiseTaskLists+0x68>)
 8007124:	189b      	adds	r3, r3, r2
 8007126:	0018      	movs	r0, r3
 8007128:	f7fe fdda 	bl	8005ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3301      	adds	r3, #1
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b37      	cmp	r3, #55	; 0x37
 8007136:	d9ef      	bls.n	8007118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <prvInitialiseTaskLists+0x6c>)
 800713a:	0018      	movs	r0, r3
 800713c:	f7fe fdd0 	bl	8005ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007140:	4b0e      	ldr	r3, [pc, #56]	; (800717c <prvInitialiseTaskLists+0x70>)
 8007142:	0018      	movs	r0, r3
 8007144:	f7fe fdcc 	bl	8005ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007148:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <prvInitialiseTaskLists+0x74>)
 800714a:	0018      	movs	r0, r3
 800714c:	f7fe fdc8 	bl	8005ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007150:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <prvInitialiseTaskLists+0x78>)
 8007152:	0018      	movs	r0, r3
 8007154:	f7fe fdc4 	bl	8005ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007158:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <prvInitialiseTaskLists+0x7c>)
 800715a:	0018      	movs	r0, r3
 800715c:	f7fe fdc0 	bl	8005ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <prvInitialiseTaskLists+0x80>)
 8007162:	4a05      	ldr	r2, [pc, #20]	; (8007178 <prvInitialiseTaskLists+0x6c>)
 8007164:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <prvInitialiseTaskLists+0x84>)
 8007168:	4a04      	ldr	r2, [pc, #16]	; (800717c <prvInitialiseTaskLists+0x70>)
 800716a:	601a      	str	r2, [r3, #0]
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b002      	add	sp, #8
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000998 	.word	0x20000998
 8007178:	20000df8 	.word	0x20000df8
 800717c:	20000e0c 	.word	0x20000e0c
 8007180:	20000e28 	.word	0x20000e28
 8007184:	20000e3c 	.word	0x20000e3c
 8007188:	20000e54 	.word	0x20000e54
 800718c:	20000e20 	.word	0x20000e20
 8007190:	20000e24 	.word	0x20000e24

08007194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800719a:	e01a      	b.n	80071d2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800719c:	f000 fd20 	bl	8007be0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a0:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <prvCheckTasksWaitingTermination+0x50>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7fe fe18 	bl	8005de2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <prvCheckTasksWaitingTermination+0x54>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <prvCheckTasksWaitingTermination+0x54>)
 80071ba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	1e5a      	subs	r2, r3, #1
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071c4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80071c6:	f000 fd1d 	bl	8007c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	0018      	movs	r0, r3
 80071ce:	f000 f80f 	bl	80071f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e0      	bne.n	800719c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b002      	add	sp, #8
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000e3c 	.word	0x20000e3c
 80071e8:	20000e68 	.word	0x20000e68
 80071ec:	20000e50 	.word	0x20000e50

080071f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2259      	movs	r2, #89	; 0x59
 80071fc:	5c9b      	ldrb	r3, [r3, r2]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d109      	bne.n	8007216 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	0018      	movs	r0, r3
 8007208:	f000 fe28 	bl	8007e5c <vPortFree>
				vPortFree( pxTCB );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0018      	movs	r0, r3
 8007210:	f000 fe24 	bl	8007e5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007214:	e010      	b.n	8007238 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2259      	movs	r2, #89	; 0x59
 800721a:	5c9b      	ldrb	r3, [r3, r2]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d104      	bne.n	800722a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	0018      	movs	r0, r3
 8007224:	f000 fe1a 	bl	8007e5c <vPortFree>
	}
 8007228:	e006      	b.n	8007238 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2259      	movs	r2, #89	; 0x59
 800722e:	5c9b      	ldrb	r3, [r3, r2]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d001      	beq.n	8007238 <prvDeleteTCB+0x48>
 8007234:	b672      	cpsid	i
 8007236:	e7fe      	b.n	8007236 <prvDeleteTCB+0x46>
	}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b002      	add	sp, #8
 800723e:	bd80      	pop	{r7, pc}

08007240 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <prvResetNextTaskUnblockTime+0x34>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <prvResetNextTaskUnblockTime+0x38>)
 8007252:	2201      	movs	r2, #1
 8007254:	4252      	negs	r2, r2
 8007256:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007258:	e008      	b.n	800726c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <prvResetNextTaskUnblockTime+0x34>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	4b03      	ldr	r3, [pc, #12]	; (8007278 <prvResetNextTaskUnblockTime+0x38>)
 800726a:	601a      	str	r2, [r3, #0]
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	46bd      	mov	sp, r7
 8007270:	b002      	add	sp, #8
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000e20 	.word	0x20000e20
 8007278:	20000e88 	.word	0x20000e88

0800727c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007282:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <xTaskGetSchedulerState+0x30>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800728a:	2301      	movs	r3, #1
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e008      	b.n	80072a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007290:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <xTaskGetSchedulerState+0x34>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007298:	2302      	movs	r3, #2
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	e001      	b.n	80072a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072a2:	687b      	ldr	r3, [r7, #4]
	}
 80072a4:	0018      	movs	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000e74 	.word	0x20000e74
 80072b0:	20000e90 	.word	0x20000e90

080072b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d044      	beq.n	8007354 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072ca:	4b25      	ldr	r3, [pc, #148]	; (8007360 <xTaskPriorityDisinherit+0xac>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <xTaskPriorityDisinherit+0x24>
 80072d4:	b672      	cpsid	i
 80072d6:	e7fe      	b.n	80072d6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <xTaskPriorityDisinherit+0x30>
 80072e0:	b672      	cpsid	i
 80072e2:	e7fe      	b.n	80072e2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d02c      	beq.n	8007354 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d128      	bne.n	8007354 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	3304      	adds	r3, #4
 8007306:	0018      	movs	r0, r3
 8007308:	f7fe fd6b 	bl	8005de2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	2238      	movs	r2, #56	; 0x38
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007324:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <xTaskPriorityDisinherit+0xb0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d903      	bls.n	8007334 <xTaskPriorityDisinherit+0x80>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <xTaskPriorityDisinherit+0xb0>)
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007338:	0013      	movs	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	189b      	adds	r3, r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4a09      	ldr	r2, [pc, #36]	; (8007368 <xTaskPriorityDisinherit+0xb4>)
 8007342:	189a      	adds	r2, r3, r2
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3304      	adds	r3, #4
 8007348:	0019      	movs	r1, r3
 800734a:	0010      	movs	r0, r2
 800734c:	f7fe fcf1 	bl	8005d32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007354:	68fb      	ldr	r3, [r7, #12]
	}
 8007356:	0018      	movs	r0, r3
 8007358:	46bd      	mov	sp, r7
 800735a:	b004      	add	sp, #16
 800735c:	bd80      	pop	{r7, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	20000994 	.word	0x20000994
 8007364:	20000e70 	.word	0x20000e70
 8007368:	20000998 	.word	0x20000998

0800736c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <uxTaskResetEventItemValue+0x28>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <uxTaskResetEventItemValue+0x28>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <uxTaskResetEventItemValue+0x28>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2138      	movs	r1, #56	; 0x38
 8007386:	1a8a      	subs	r2, r1, r2
 8007388:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800738a:	687b      	ldr	r3, [r7, #4]
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b002      	add	sp, #8
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000994 	.word	0x20000994

08007398 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073a2:	4b21      	ldr	r3, [pc, #132]	; (8007428 <prvAddCurrentTaskToDelayedList+0x90>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a8:	4b20      	ldr	r3, [pc, #128]	; (800742c <prvAddCurrentTaskToDelayedList+0x94>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	0018      	movs	r0, r3
 80073b0:	f7fe fd17 	bl	8005de2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3301      	adds	r3, #1
 80073b8:	d10b      	bne.n	80073d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c0:	4b1a      	ldr	r3, [pc, #104]	; (800742c <prvAddCurrentTaskToDelayedList+0x94>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <prvAddCurrentTaskToDelayedList+0x98>)
 80073c8:	0011      	movs	r1, r2
 80073ca:	0018      	movs	r0, r3
 80073cc:	f7fe fcb1 	bl	8005d32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073d0:	e026      	b.n	8007420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	18d3      	adds	r3, r2, r3
 80073d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <prvAddCurrentTaskToDelayedList+0x94>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d209      	bcs.n	80073fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ea:	4b12      	ldr	r3, [pc, #72]	; (8007434 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <prvAddCurrentTaskToDelayedList+0x94>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3304      	adds	r3, #4
 80073f4:	0019      	movs	r1, r3
 80073f6:	0010      	movs	r0, r2
 80073f8:	f7fe fcbd 	bl	8005d76 <vListInsert>
}
 80073fc:	e010      	b.n	8007420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073fe:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <prvAddCurrentTaskToDelayedList+0x94>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3304      	adds	r3, #4
 8007408:	0019      	movs	r1, r3
 800740a:	0010      	movs	r0, r2
 800740c:	f7fe fcb3 	bl	8005d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	d202      	bcs.n	8007420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <prvAddCurrentTaskToDelayedList+0xa4>)
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	601a      	str	r2, [r3, #0]
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	b004      	add	sp, #16
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000e6c 	.word	0x20000e6c
 800742c:	20000994 	.word	0x20000994
 8007430:	20000e54 	.word	0x20000e54
 8007434:	20000e24 	.word	0x20000e24
 8007438:	20000e20 	.word	0x20000e20
 800743c:	20000e88 	.word	0x20000e88

08007440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b089      	sub	sp, #36	; 0x24
 8007444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800744a:	f000 fac9 	bl	80079e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800744e:	4b17      	ldr	r3, [pc, #92]	; (80074ac <xTimerCreateTimerTask+0x6c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d020      	beq.n	8007498 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800745e:	003a      	movs	r2, r7
 8007460:	1d39      	adds	r1, r7, #4
 8007462:	2308      	movs	r3, #8
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	0018      	movs	r0, r3
 8007468:	f7fe fa7e 	bl	8005968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800746c:	683c      	ldr	r4, [r7, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	490f      	ldr	r1, [pc, #60]	; (80074b0 <xTimerCreateTimerTask+0x70>)
 8007474:	480f      	ldr	r0, [pc, #60]	; (80074b4 <xTimerCreateTimerTask+0x74>)
 8007476:	9202      	str	r2, [sp, #8]
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	2302      	movs	r3, #2
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	0022      	movs	r2, r4
 8007482:	f7ff f900 	bl	8006686 <xTaskCreateStatic>
 8007486:	0002      	movs	r2, r0
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <xTimerCreateTimerTask+0x78>)
 800748a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <xTimerCreateTimerTask+0x78>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007494:	2301      	movs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <xTimerCreateTimerTask+0x62>
 800749e:	b672      	cpsid	i
 80074a0:	e7fe      	b.n	80074a0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	0018      	movs	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b005      	add	sp, #20
 80074aa:	bd90      	pop	{r4, r7, pc}
 80074ac:	20000ec4 	.word	0x20000ec4
 80074b0:	08008a94 	.word	0x08008a94
 80074b4:	080075d9 	.word	0x080075d9
 80074b8:	20000ec8 	.word	0x20000ec8

080074bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b08b      	sub	sp, #44	; 0x2c
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <xTimerGenericCommand+0x1c>
 80074d4:	b672      	cpsid	i
 80074d6:	e7fe      	b.n	80074d6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <xTimerGenericCommand+0x90>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d030      	beq.n	8007542 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074e0:	2414      	movs	r4, #20
 80074e2:	193b      	adds	r3, r7, r4
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074e8:	193b      	adds	r3, r7, r4
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074ee:	193b      	adds	r3, r7, r4
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	dc19      	bgt.n	800752e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074fa:	f7ff febf 	bl	800727c <xTaskGetSchedulerState>
 80074fe:	0003      	movs	r3, r0
 8007500:	2b02      	cmp	r3, #2
 8007502:	d109      	bne.n	8007518 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007504:	4b11      	ldr	r3, [pc, #68]	; (800754c <xTimerGenericCommand+0x90>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750a:	1939      	adds	r1, r7, r4
 800750c:	2300      	movs	r3, #0
 800750e:	f7fe fd57 	bl	8005fc0 <xQueueGenericSend>
 8007512:	0003      	movs	r3, r0
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
 8007516:	e014      	b.n	8007542 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007518:	4b0c      	ldr	r3, [pc, #48]	; (800754c <xTimerGenericCommand+0x90>)
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	2314      	movs	r3, #20
 800751e:	18f9      	adds	r1, r7, r3
 8007520:	2300      	movs	r3, #0
 8007522:	2200      	movs	r2, #0
 8007524:	f7fe fd4c 	bl	8005fc0 <xQueueGenericSend>
 8007528:	0003      	movs	r3, r0
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
 800752c:	e009      	b.n	8007542 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800752e:	4b07      	ldr	r3, [pc, #28]	; (800754c <xTimerGenericCommand+0x90>)
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	2314      	movs	r3, #20
 8007536:	18f9      	adds	r1, r7, r3
 8007538:	2300      	movs	r3, #0
 800753a:	f7fe fe05 	bl	8006148 <xQueueGenericSendFromISR>
 800753e:	0003      	movs	r3, r0
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	b00b      	add	sp, #44	; 0x2c
 800754a:	bd90      	pop	{r4, r7, pc}
 800754c:	20000ec4 	.word	0x20000ec4

08007550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755a:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <prvProcessExpiredTimer+0x84>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3304      	adds	r3, #4
 8007568:	0018      	movs	r0, r3
 800756a:	f7fe fc3a 	bl	8005de2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2228      	movs	r2, #40	; 0x28
 8007572:	5c9b      	ldrb	r3, [r3, r2]
 8007574:	001a      	movs	r2, r3
 8007576:	2304      	movs	r3, #4
 8007578:	4013      	ands	r3, r2
 800757a:	d019      	beq.n	80075b0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	18d1      	adds	r1, r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f8c3 	bl	8007714 <prvInsertTimerInActiveList>
 800758e:	1e03      	subs	r3, r0, #0
 8007590:	d017      	beq.n	80075c2 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	2300      	movs	r3, #0
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	2300      	movs	r3, #0
 800759c:	2100      	movs	r1, #0
 800759e:	f7ff ff8d 	bl	80074bc <xTimerGenericCommand>
 80075a2:	0003      	movs	r3, r0
 80075a4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <prvProcessExpiredTimer+0x72>
 80075ac:	b672      	cpsid	i
 80075ae:	e7fe      	b.n	80075ae <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2228      	movs	r2, #40	; 0x28
 80075b4:	5c9b      	ldrb	r3, [r3, r2]
 80075b6:	2201      	movs	r2, #1
 80075b8:	4393      	bics	r3, r2
 80075ba:	b2d9      	uxtb	r1, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2228      	movs	r2, #40	; 0x28
 80075c0:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	0010      	movs	r0, r2
 80075ca:	4798      	blx	r3
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b004      	add	sp, #16
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000ebc 	.word	0x20000ebc

080075d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075e0:	2308      	movs	r3, #8
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	0018      	movs	r0, r3
 80075e6:	f000 f853 	bl	8007690 <prvGetNextExpireTime>
 80075ea:	0003      	movs	r3, r0
 80075ec:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	0011      	movs	r1, r2
 80075f4:	0018      	movs	r0, r3
 80075f6:	f000 f803 	bl	8007600 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075fa:	f000 f8cd 	bl	8007798 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075fe:	e7ef      	b.n	80075e0 <prvTimerTask+0x8>

08007600 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800760a:	f7ff fa39 	bl	8006a80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800760e:	2308      	movs	r3, #8
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	0018      	movs	r0, r3
 8007614:	f000 f85e 	bl	80076d4 <prvSampleTimeNow>
 8007618:	0003      	movs	r3, r0
 800761a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d12b      	bne.n	800767a <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10c      	bne.n	8007642 <prvProcessTimerOrBlockTask+0x42>
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	429a      	cmp	r2, r3
 800762e:	d808      	bhi.n	8007642 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007630:	f7ff fa32 	bl	8006a98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	0011      	movs	r1, r2
 800763a:	0018      	movs	r0, r3
 800763c:	f7ff ff88 	bl	8007550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007640:	e01d      	b.n	800767e <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007648:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <prvProcessTimerOrBlockTask+0x88>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <prvProcessTimerOrBlockTask+0x56>
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <prvProcessTimerOrBlockTask+0x58>
 8007656:	2300      	movs	r3, #0
 8007658:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <prvProcessTimerOrBlockTask+0x8c>)
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	0019      	movs	r1, r3
 8007668:	f7fe ffda 	bl	8006620 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800766c:	f7ff fa14 	bl	8006a98 <xTaskResumeAll>
 8007670:	1e03      	subs	r3, r0, #0
 8007672:	d104      	bne.n	800767e <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8007674:	f000 faa4 	bl	8007bc0 <vPortYield>
}
 8007678:	e001      	b.n	800767e <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800767a:	f7ff fa0d 	bl	8006a98 <xTaskResumeAll>
}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b004      	add	sp, #16
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	20000ec0 	.word	0x20000ec0
 800768c:	20000ec4 	.word	0x20000ec4

08007690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <prvGetNextExpireTime+0x40>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <prvGetNextExpireTime+0x16>
 80076a2:	2201      	movs	r2, #1
 80076a4:	e000      	b.n	80076a8 <prvGetNextExpireTime+0x18>
 80076a6:	2200      	movs	r2, #0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <prvGetNextExpireTime+0x40>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	e001      	b.n	80076c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076c4:	68fb      	ldr	r3, [r7, #12]
}
 80076c6:	0018      	movs	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b004      	add	sp, #16
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	20000ebc 	.word	0x20000ebc

080076d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076dc:	f7ff fa68 	bl	8006bb0 <xTaskGetTickCount>
 80076e0:	0003      	movs	r3, r0
 80076e2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <prvSampleTimeNow+0x3c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d205      	bcs.n	80076fa <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80076ee:	f000 f919 	bl	8007924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e002      	b.n	8007700 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007700:	4b03      	ldr	r3, [pc, #12]	; (8007710 <prvSampleTimeNow+0x3c>)
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	0018      	movs	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	b004      	add	sp, #16
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000ecc 	.word	0x20000ecc

08007714 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d812      	bhi.n	8007760 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	429a      	cmp	r2, r3
 8007746:	d302      	bcc.n	800774e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e01b      	b.n	8007786 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <prvInsertTimerInActiveList+0x7c>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3304      	adds	r3, #4
 8007756:	0019      	movs	r1, r3
 8007758:	0010      	movs	r0, r2
 800775a:	f7fe fb0c 	bl	8005d76 <vListInsert>
 800775e:	e012      	b.n	8007786 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d206      	bcs.n	8007776 <prvInsertTimerInActiveList+0x62>
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d302      	bcc.n	8007776 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e007      	b.n	8007786 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <prvInsertTimerInActiveList+0x80>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3304      	adds	r3, #4
 800777e:	0019      	movs	r1, r3
 8007780:	0010      	movs	r0, r2
 8007782:	f7fe faf8 	bl	8005d76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007786:	697b      	ldr	r3, [r7, #20]
}
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b006      	add	sp, #24
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000ec0 	.word	0x20000ec0
 8007794:	20000ebc 	.word	0x20000ebc

08007798 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b08d      	sub	sp, #52	; 0x34
 800779c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800779e:	e0ac      	b.n	80078fa <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077a0:	2208      	movs	r2, #8
 80077a2:	18bb      	adds	r3, r7, r2
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da0f      	bge.n	80077ca <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077aa:	18bb      	adds	r3, r7, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <prvProcessReceivedCommands+0x22>
 80077b6:	b672      	cpsid	i
 80077b8:	e7fe      	b.n	80077b8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	6858      	ldr	r0, [r3, #4]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	0019      	movs	r1, r3
 80077c8:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077ca:	2208      	movs	r2, #8
 80077cc:	18bb      	adds	r3, r7, r2
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da00      	bge.n	80077d6 <prvProcessReceivedCommands+0x3e>
 80077d4:	e090      	b.n	80078f8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077d6:	18bb      	adds	r3, r7, r2
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	3304      	adds	r3, #4
 80077e8:	0018      	movs	r0, r3
 80077ea:	f7fe fafa 	bl	8005de2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077ee:	1d3b      	adds	r3, r7, #4
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7ff ff6f 	bl	80076d4 <prvSampleTimeNow>
 80077f6:	0003      	movs	r3, r0
 80077f8:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80077fa:	2308      	movs	r3, #8
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b09      	cmp	r3, #9
 8007802:	d900      	bls.n	8007806 <prvProcessReceivedCommands+0x6e>
 8007804:	e079      	b.n	80078fa <prvProcessReceivedCommands+0x162>
 8007806:	009a      	lsls	r2, r3, #2
 8007808:	4b44      	ldr	r3, [pc, #272]	; (800791c <prvProcessReceivedCommands+0x184>)
 800780a:	18d3      	adds	r3, r2, r3
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	2228      	movs	r2, #40	; 0x28
 8007814:	5c9b      	ldrb	r3, [r3, r2]
 8007816:	2201      	movs	r2, #1
 8007818:	4313      	orrs	r3, r2
 800781a:	b2d9      	uxtb	r1, r3
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	2228      	movs	r2, #40	; 0x28
 8007820:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007822:	2408      	movs	r4, #8
 8007824:	193b      	adds	r3, r7, r4
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	18d1      	adds	r1, r2, r3
 800782e:	193b      	adds	r3, r7, r4
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	6a38      	ldr	r0, [r7, #32]
 8007836:	f7ff ff6d 	bl	8007714 <prvInsertTimerInActiveList>
 800783a:	1e03      	subs	r3, r0, #0
 800783c:	d05d      	beq.n	80078fa <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	0010      	movs	r0, r2
 8007846:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	2228      	movs	r2, #40	; 0x28
 800784c:	5c9b      	ldrb	r3, [r3, r2]
 800784e:	001a      	movs	r2, r3
 8007850:	2304      	movs	r3, #4
 8007852:	4013      	ands	r3, r2
 8007854:	d051      	beq.n	80078fa <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007856:	193b      	adds	r3, r7, r4
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	18d2      	adds	r2, r2, r3
 8007860:	6a38      	ldr	r0, [r7, #32]
 8007862:	2300      	movs	r3, #0
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	2100      	movs	r1, #0
 800786a:	f7ff fe27 	bl	80074bc <xTimerGenericCommand>
 800786e:	0003      	movs	r3, r0
 8007870:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d140      	bne.n	80078fa <prvProcessReceivedCommands+0x162>
 8007878:	b672      	cpsid	i
 800787a:	e7fe      	b.n	800787a <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	2228      	movs	r2, #40	; 0x28
 8007880:	5c9b      	ldrb	r3, [r3, r2]
 8007882:	2201      	movs	r2, #1
 8007884:	4393      	bics	r3, r2
 8007886:	b2d9      	uxtb	r1, r3
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	2228      	movs	r2, #40	; 0x28
 800788c:	5499      	strb	r1, [r3, r2]
					break;
 800788e:	e034      	b.n	80078fa <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2228      	movs	r2, #40	; 0x28
 8007894:	5c9b      	ldrb	r3, [r3, r2]
 8007896:	2201      	movs	r2, #1
 8007898:	4313      	orrs	r3, r2
 800789a:	b2d9      	uxtb	r1, r3
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	2228      	movs	r2, #40	; 0x28
 80078a0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078a2:	2308      	movs	r3, #8
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <prvProcessReceivedCommands+0x120>
 80078b4:	b672      	cpsid	i
 80078b6:	e7fe      	b.n	80078b6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	699a      	ldr	r2, [r3, #24]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	18d1      	adds	r1, r2, r3
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	6a38      	ldr	r0, [r7, #32]
 80078c6:	f7ff ff25 	bl	8007714 <prvInsertTimerInActiveList>
					break;
 80078ca:	e016      	b.n	80078fa <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2228      	movs	r2, #40	; 0x28
 80078d0:	5c9b      	ldrb	r3, [r3, r2]
 80078d2:	001a      	movs	r2, r3
 80078d4:	2302      	movs	r3, #2
 80078d6:	4013      	ands	r3, r2
 80078d8:	d104      	bne.n	80078e4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	0018      	movs	r0, r3
 80078de:	f000 fabd 	bl	8007e5c <vPortFree>
 80078e2:	e00a      	b.n	80078fa <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	2228      	movs	r2, #40	; 0x28
 80078e8:	5c9b      	ldrb	r3, [r3, r2]
 80078ea:	2201      	movs	r2, #1
 80078ec:	4393      	bics	r3, r2
 80078ee:	b2d9      	uxtb	r1, r3
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	2228      	movs	r2, #40	; 0x28
 80078f4:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078f6:	e000      	b.n	80078fa <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078f8:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <prvProcessReceivedCommands+0x188>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2208      	movs	r2, #8
 8007900:	18b9      	adds	r1, r7, r2
 8007902:	2200      	movs	r2, #0
 8007904:	0018      	movs	r0, r3
 8007906:	f7fe fc90 	bl	800622a <xQueueReceive>
 800790a:	1e03      	subs	r3, r0, #0
 800790c:	d000      	beq.n	8007910 <prvProcessReceivedCommands+0x178>
 800790e:	e747      	b.n	80077a0 <prvProcessReceivedCommands+0x8>
	}
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	46bd      	mov	sp, r7
 8007916:	b00b      	add	sp, #44	; 0x2c
 8007918:	bd90      	pop	{r4, r7, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	08008b7c 	.word	0x08008b7c
 8007920:	20000ec4 	.word	0x20000ec4

08007924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800792a:	e041      	b.n	80079b0 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800792c:	4b2a      	ldr	r3, [pc, #168]	; (80079d8 <prvSwitchTimerLists+0xb4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <prvSwitchTimerLists+0xb4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3304      	adds	r3, #4
 8007944:	0018      	movs	r0, r3
 8007946:	f7fe fa4c 	bl	8005de2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	0010      	movs	r0, r2
 8007952:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2228      	movs	r2, #40	; 0x28
 8007958:	5c9b      	ldrb	r3, [r3, r2]
 800795a:	001a      	movs	r2, r3
 800795c:	2304      	movs	r3, #4
 800795e:	4013      	ands	r3, r2
 8007960:	d026      	beq.n	80079b0 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	18d3      	adds	r3, r2, r3
 800796a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d90e      	bls.n	8007992 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007980:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <prvSwitchTimerLists+0xb4>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3304      	adds	r3, #4
 8007988:	0019      	movs	r1, r3
 800798a:	0010      	movs	r0, r2
 800798c:	f7fe f9f3 	bl	8005d76 <vListInsert>
 8007990:	e00e      	b.n	80079b0 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2300      	movs	r3, #0
 800799c:	2100      	movs	r1, #0
 800799e:	f7ff fd8d 	bl	80074bc <xTimerGenericCommand>
 80079a2:	0003      	movs	r3, r0
 80079a4:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <prvSwitchTimerLists+0x8c>
 80079ac:	b672      	cpsid	i
 80079ae:	e7fe      	b.n	80079ae <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <prvSwitchTimerLists+0xb4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1b8      	bne.n	800792c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <prvSwitchTimerLists+0xb4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079c0:	4b06      	ldr	r3, [pc, #24]	; (80079dc <prvSwitchTimerLists+0xb8>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <prvSwitchTimerLists+0xb4>)
 80079c6:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <prvSwitchTimerLists+0xb8>)
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	601a      	str	r2, [r3, #0]
}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	46bd      	mov	sp, r7
 80079d2:	b006      	add	sp, #24
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	20000ebc 	.word	0x20000ebc
 80079dc:	20000ec0 	.word	0x20000ec0

080079e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079e6:	f000 f8fb 	bl	8007be0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <prvCheckForValidListAndQueue+0x64>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d123      	bne.n	8007a3a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <prvCheckForValidListAndQueue+0x68>)
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7fe f973 	bl	8005ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <prvCheckForValidListAndQueue+0x6c>)
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7fe f96f 	bl	8005ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a02:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <prvCheckForValidListAndQueue+0x70>)
 8007a04:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <prvCheckForValidListAndQueue+0x68>)
 8007a06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a08:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <prvCheckForValidListAndQueue+0x74>)
 8007a0a:	4a10      	ldr	r2, [pc, #64]	; (8007a4c <prvCheckForValidListAndQueue+0x6c>)
 8007a0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a0e:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <prvCheckForValidListAndQueue+0x78>)
 8007a10:	4a12      	ldr	r2, [pc, #72]	; (8007a5c <prvCheckForValidListAndQueue+0x7c>)
 8007a12:	2100      	movs	r1, #0
 8007a14:	9100      	str	r1, [sp, #0]
 8007a16:	2110      	movs	r1, #16
 8007a18:	200a      	movs	r0, #10
 8007a1a:	f7fe fa5e 	bl	8005eda <xQueueGenericCreateStatic>
 8007a1e:	0002      	movs	r2, r0
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <prvCheckForValidListAndQueue+0x64>)
 8007a22:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a24:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <prvCheckForValidListAndQueue+0x64>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <prvCheckForValidListAndQueue+0x64>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0b      	ldr	r2, [pc, #44]	; (8007a60 <prvCheckForValidListAndQueue+0x80>)
 8007a32:	0011      	movs	r1, r2
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7fe fdcb 	bl	80065d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a3a:	f000 f8e3 	bl	8007c04 <vPortExitCritical>
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000ec4 	.word	0x20000ec4
 8007a48:	20000e94 	.word	0x20000e94
 8007a4c:	20000ea8 	.word	0x20000ea8
 8007a50:	20000ebc 	.word	0x20000ebc
 8007a54:	20000ec0 	.word	0x20000ec0
 8007a58:	20000f70 	.word	0x20000f70
 8007a5c:	20000ed0 	.word	0x20000ed0
 8007a60:	08008a9c 	.word	0x08008a9c

08007a64 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007a72:	2114      	movs	r1, #20
 8007a74:	187b      	adds	r3, r7, r1
 8007a76:	2202      	movs	r2, #2
 8007a78:	4252      	negs	r2, r2
 8007a7a:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007a7c:	187b      	adds	r3, r7, r1
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007a82:	187b      	adds	r3, r7, r1
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007a88:	187b      	adds	r3, r7, r1
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a8e:	4b07      	ldr	r3, [pc, #28]	; (8007aac <xTimerPendFunctionCallFromISR+0x48>)
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	1879      	adds	r1, r7, r1
 8007a96:	2300      	movs	r3, #0
 8007a98:	f7fe fb56 	bl	8006148 <xQueueGenericSendFromISR>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b00a      	add	sp, #40	; 0x28
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	20000ec4 	.word	0x20000ec4

08007ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2280      	movs	r2, #128	; 0x80
 8007ac6:	0452      	lsls	r2, r2, #17
 8007ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007adc:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <pxPortInitialiseStack+0x50>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b14      	subs	r3, #20
 8007ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b20      	subs	r3, #32
 8007af2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	0018      	movs	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	b004      	add	sp, #16
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	08007b05 	.word	0x08007b05

08007b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b0e:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <prvTaskExitError+0x2c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	d001      	beq.n	8007b1a <prvTaskExitError+0x16>
 8007b16:	b672      	cpsid	i
 8007b18:	e7fe      	b.n	8007b18 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007b1a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0fc      	beq.n	8007b1e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b002      	add	sp, #8
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	20000010 	.word	0x20000010

08007b34 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007b40:	4a0b      	ldr	r2, [pc, #44]	; (8007b70 <pxCurrentTCBConst2>)
 8007b42:	6813      	ldr	r3, [r2, #0]
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	3020      	adds	r0, #32
 8007b48:	f380 8809 	msr	PSP, r0
 8007b4c:	2002      	movs	r0, #2
 8007b4e:	f380 8814 	msr	CONTROL, r0
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007b58:	46ae      	mov	lr, r5
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	bc04      	pop	{r2}
 8007b5e:	b662      	cpsie	i
 8007b60:	4718      	bx	r3
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	46c0      	nop			; (mov r8, r8)
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	46c0      	nop			; (mov r8, r8)
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	46c0      	nop			; (mov r8, r8)
 8007b6e:	46c0      	nop			; (mov r8, r8)

08007b70 <pxCurrentTCBConst2>:
 8007b70:	20000994 	.word	0x20000994
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	46c0      	nop			; (mov r8, r8)

08007b78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <xPortStartScheduler+0x40>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <xPortStartScheduler+0x40>)
 8007b82:	21ff      	movs	r1, #255	; 0xff
 8007b84:	0409      	lsls	r1, r1, #16
 8007b86:	430a      	orrs	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <xPortStartScheduler+0x40>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <xPortStartScheduler+0x40>)
 8007b90:	21ff      	movs	r1, #255	; 0xff
 8007b92:	0609      	lsls	r1, r1, #24
 8007b94:	430a      	orrs	r2, r1
 8007b96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007b98:	f000 f898 	bl	8007ccc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <xPortStartScheduler+0x44>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007ba2:	f7ff ffcd 	bl	8007b40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ba6:	f7ff f8c1 	bl	8006d2c <vTaskSwitchContext>
	prvTaskExitError();
 8007baa:	f7ff ffab 	bl	8007b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	e000ed20 	.word	0xe000ed20
 8007bbc:	20000010 	.word	0x20000010

08007bc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <vPortYield+0x1c>)
 8007bc6:	2280      	movs	r2, #128	; 0x80
 8007bc8:	0552      	lsls	r2, r2, #21
 8007bca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007bcc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007bd0:	f3bf 8f6f 	isb	sy
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007be4:	b672      	cpsid	i
    uxCriticalNesting++;
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <vPortEnterCritical+0x20>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <vPortEnterCritical+0x20>)
 8007bee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007bf0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007bf4:	f3bf 8f6f 	isb	sy
}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	20000010 	.word	0x20000010

08007c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c08:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <vPortExitCritical+0x2c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <vPortExitCritical+0x10>
 8007c10:	b672      	cpsid	i
 8007c12:	e7fe      	b.n	8007c12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <vPortExitCritical+0x2c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	1e5a      	subs	r2, r3, #1
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <vPortExitCritical+0x2c>)
 8007c1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <vPortExitCritical+0x2c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d100      	bne.n	8007c28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007c26:	b662      	cpsie	i
    }
}
 8007c28:	46c0      	nop			; (mov r8, r8)
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	20000010 	.word	0x20000010

08007c34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007c34:	f3ef 8010 	mrs	r0, PRIMASK
 8007c38:	b672      	cpsid	i
 8007c3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8007c3c:	46c0      	nop			; (mov r8, r8)
 8007c3e:	0018      	movs	r0, r3

08007c40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007c40:	f380 8810 	msr	PRIMASK, r0
 8007c44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007c46:	46c0      	nop			; (mov r8, r8)
	...

08007c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c50:	f3ef 8009 	mrs	r0, PSP
 8007c54:	4b0e      	ldr	r3, [pc, #56]	; (8007c90 <pxCurrentTCBConst>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	3820      	subs	r0, #32
 8007c5a:	6010      	str	r0, [r2, #0]
 8007c5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007c5e:	4644      	mov	r4, r8
 8007c60:	464d      	mov	r5, r9
 8007c62:	4656      	mov	r6, sl
 8007c64:	465f      	mov	r7, fp
 8007c66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007c68:	b508      	push	{r3, lr}
 8007c6a:	b672      	cpsid	i
 8007c6c:	f7ff f85e 	bl	8006d2c <vTaskSwitchContext>
 8007c70:	b662      	cpsie	i
 8007c72:	bc0c      	pop	{r2, r3}
 8007c74:	6811      	ldr	r1, [r2, #0]
 8007c76:	6808      	ldr	r0, [r1, #0]
 8007c78:	3010      	adds	r0, #16
 8007c7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007c7c:	46a0      	mov	r8, r4
 8007c7e:	46a9      	mov	r9, r5
 8007c80:	46b2      	mov	sl, r6
 8007c82:	46bb      	mov	fp, r7
 8007c84:	f380 8809 	msr	PSP, r0
 8007c88:	3820      	subs	r0, #32
 8007c8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007c8c:	4718      	bx	r3
 8007c8e:	46c0      	nop			; (mov r8, r8)

08007c90 <pxCurrentTCBConst>:
 8007c90:	20000994 	.word	0x20000994
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007c94:	46c0      	nop			; (mov r8, r8)
 8007c96:	46c0      	nop			; (mov r8, r8)

08007c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c9e:	f7ff ffc9 	bl	8007c34 <ulSetInterruptMaskFromISR>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ca6:	f7fe ff91 	bl	8006bcc <xTaskIncrementTick>
 8007caa:	1e03      	subs	r3, r0, #0
 8007cac:	d003      	beq.n	8007cb6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8007cae:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <xPortSysTickHandler+0x30>)
 8007cb0:	2280      	movs	r2, #128	; 0x80
 8007cb2:	0552      	lsls	r2, r2, #21
 8007cb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f7ff ffc1 	bl	8007c40 <vClearInterruptMaskFromISR>
}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b002      	add	sp, #8
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <prvSetupTimerInterrupt+0x34>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <prvSetupTimerInterrupt+0x38>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <prvSetupTimerInterrupt+0x3c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	22fa      	movs	r2, #250	; 0xfa
 8007ce2:	0091      	lsls	r1, r2, #2
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7f8 fa21 	bl	800012c <__udivsi3>
 8007cea:	0003      	movs	r3, r0
 8007cec:	001a      	movs	r2, r3
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <prvSetupTimerInterrupt+0x40>)
 8007cf0:	3a01      	subs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007cf4:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <prvSetupTimerInterrupt+0x34>)
 8007cf6:	2207      	movs	r2, #7
 8007cf8:	601a      	str	r2, [r3, #0]
}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	e000e010 	.word	0xe000e010
 8007d04:	e000e018 	.word	0xe000e018
 8007d08:	20000004 	.word	0x20000004
 8007d0c:	e000e014 	.word	0xe000e014

08007d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007d1c:	f7fe feb0 	bl	8006a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d20:	4b49      	ldr	r3, [pc, #292]	; (8007e48 <pvPortMalloc+0x138>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d28:	f000 f8e0 	bl	8007eec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d2c:	4b47      	ldr	r3, [pc, #284]	; (8007e4c <pvPortMalloc+0x13c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4013      	ands	r3, r2
 8007d34:	d000      	beq.n	8007d38 <pvPortMalloc+0x28>
 8007d36:	e079      	b.n	8007e2c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d012      	beq.n	8007d64 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007d3e:	2208      	movs	r2, #8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	189b      	adds	r3, r3, r2
 8007d44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2207      	movs	r2, #7
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	d00a      	beq.n	8007d64 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2207      	movs	r2, #7
 8007d52:	4393      	bics	r3, r2
 8007d54:	3308      	adds	r3, #8
 8007d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2207      	movs	r2, #7
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	d001      	beq.n	8007d64 <pvPortMalloc+0x54>
 8007d60:	b672      	cpsid	i
 8007d62:	e7fe      	b.n	8007d62 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d060      	beq.n	8007e2c <pvPortMalloc+0x11c>
 8007d6a:	4b39      	ldr	r3, [pc, #228]	; (8007e50 <pvPortMalloc+0x140>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d85b      	bhi.n	8007e2c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d74:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <pvPortMalloc+0x144>)
 8007d76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007d78:	4b36      	ldr	r3, [pc, #216]	; (8007e54 <pvPortMalloc+0x144>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d7e:	e004      	b.n	8007d8a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d903      	bls.n	8007d9c <pvPortMalloc+0x8c>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1f1      	bne.n	8007d80 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d9c:	4b2a      	ldr	r3, [pc, #168]	; (8007e48 <pvPortMalloc+0x138>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d042      	beq.n	8007e2c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2208      	movs	r2, #8
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d916      	bls.n	8007df6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	18d3      	adds	r3, r2, r3
 8007dce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2207      	movs	r2, #7
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d001      	beq.n	8007ddc <pvPortMalloc+0xcc>
 8007dd8:	b672      	cpsid	i
 8007dda:	e7fe      	b.n	8007dda <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 f8db 	bl	8007fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007df6:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <pvPortMalloc+0x140>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <pvPortMalloc+0x140>)
 8007e02:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <pvPortMalloc+0x140>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <pvPortMalloc+0x148>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d203      	bcs.n	8007e18 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e10:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <pvPortMalloc+0x140>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	4b10      	ldr	r3, [pc, #64]	; (8007e58 <pvPortMalloc+0x148>)
 8007e16:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <pvPortMalloc+0x13c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e2c:	f7fe fe34 	bl	8006a98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2207      	movs	r2, #7
 8007e34:	4013      	ands	r3, r2
 8007e36:	d001      	beq.n	8007e3c <pvPortMalloc+0x12c>
 8007e38:	b672      	cpsid	i
 8007e3a:	e7fe      	b.n	8007e3a <pvPortMalloc+0x12a>
	return pvReturn;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	0018      	movs	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b006      	add	sp, #24
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	20001bc8 	.word	0x20001bc8
 8007e4c:	20001bd4 	.word	0x20001bd4
 8007e50:	20001bcc 	.word	0x20001bcc
 8007e54:	20001bc0 	.word	0x20001bc0
 8007e58:	20001bd0 	.word	0x20001bd0

08007e5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d035      	beq.n	8007eda <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e6e:	2308      	movs	r3, #8
 8007e70:	425b      	negs	r3, r3
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	18d3      	adds	r3, r2, r3
 8007e76:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <vPortFree+0x88>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4013      	ands	r3, r2
 8007e86:	d101      	bne.n	8007e8c <vPortFree+0x30>
 8007e88:	b672      	cpsid	i
 8007e8a:	e7fe      	b.n	8007e8a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <vPortFree+0x3c>
 8007e94:	b672      	cpsid	i
 8007e96:	e7fe      	b.n	8007e96 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <vPortFree+0x88>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d01a      	beq.n	8007eda <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d116      	bne.n	8007eda <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <vPortFree+0x88>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	43db      	mvns	r3, r3
 8007eb6:	401a      	ands	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ebc:	f7fe fde0 	bl	8006a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <vPortFree+0x8c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	18d2      	adds	r2, r2, r3
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <vPortFree+0x8c>)
 8007ecc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f000 f86b 	bl	8007fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ed6:	f7fe fddf 	bl	8006a98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	46c0      	nop			; (mov r8, r8)
 8007ee4:	20001bd4 	.word	0x20001bd4
 8007ee8:	20001bcc 	.word	0x20001bcc

08007eec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ef2:	23c0      	movs	r3, #192	; 0xc0
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ef8:	4b26      	ldr	r3, [pc, #152]	; (8007f94 <prvHeapInit+0xa8>)
 8007efa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2207      	movs	r2, #7
 8007f00:	4013      	ands	r3, r2
 8007f02:	d00c      	beq.n	8007f1e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3307      	adds	r3, #7
 8007f08:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2207      	movs	r2, #7
 8007f0e:	4393      	bics	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <prvHeapInit+0xa8>)
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f22:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <prvHeapInit+0xac>)
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f28:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <prvHeapInit+0xac>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	18d3      	adds	r3, r2, r3
 8007f34:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f36:	2208      	movs	r2, #8
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2207      	movs	r2, #7
 8007f42:	4393      	bics	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <prvHeapInit+0xb0>)
 8007f4a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007f4c:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <prvHeapInit+0xb0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2200      	movs	r2, #0
 8007f52:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <prvHeapInit+0xb0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	1ad2      	subs	r2, r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <prvHeapInit+0xb0>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <prvHeapInit+0xb4>)
 8007f78:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <prvHeapInit+0xb8>)
 8007f80:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <prvHeapInit+0xbc>)
 8007f84:	2280      	movs	r2, #128	; 0x80
 8007f86:	0612      	lsls	r2, r2, #24
 8007f88:	601a      	str	r2, [r3, #0]
}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b004      	add	sp, #16
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	20000fc0 	.word	0x20000fc0
 8007f98:	20001bc0 	.word	0x20001bc0
 8007f9c:	20001bc8 	.word	0x20001bc8
 8007fa0:	20001bd0 	.word	0x20001bd0
 8007fa4:	20001bcc 	.word	0x20001bcc
 8007fa8:	20001bd4 	.word	0x20001bd4

08007fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fb4:	4b27      	ldr	r3, [pc, #156]	; (8008054 <prvInsertBlockIntoFreeList+0xa8>)
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	e002      	b.n	8007fc0 <prvInsertBlockIntoFreeList+0x14>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d8f7      	bhi.n	8007fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	18d3      	adds	r3, r2, r3
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d108      	bne.n	8007fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	18d2      	adds	r2, r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	18d2      	adds	r2, r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d118      	bne.n	8008034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <prvInsertBlockIntoFreeList+0xac>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d00d      	beq.n	800802a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	18d2      	adds	r2, r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	e008      	b.n	800803c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <prvInsertBlockIntoFreeList+0xac>)
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e003      	b.n	800803c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d002      	beq.n	800804a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	46bd      	mov	sp, r7
 800804e:	b004      	add	sp, #16
 8008050:	bd80      	pop	{r7, pc}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	20001bc0 	.word	0x20001bc0
 8008058:	20001bc8 	.word	0x20001bc8

0800805c <__errno>:
 800805c:	4b01      	ldr	r3, [pc, #4]	; (8008064 <__errno+0x8>)
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	4770      	bx	lr
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	20000014 	.word	0x20000014

08008068 <__libc_init_array>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	2600      	movs	r6, #0
 800806c:	4d0c      	ldr	r5, [pc, #48]	; (80080a0 <__libc_init_array+0x38>)
 800806e:	4c0d      	ldr	r4, [pc, #52]	; (80080a4 <__libc_init_array+0x3c>)
 8008070:	1b64      	subs	r4, r4, r5
 8008072:	10a4      	asrs	r4, r4, #2
 8008074:	42a6      	cmp	r6, r4
 8008076:	d109      	bne.n	800808c <__libc_init_array+0x24>
 8008078:	2600      	movs	r6, #0
 800807a:	f000 fc8b 	bl	8008994 <_init>
 800807e:	4d0a      	ldr	r5, [pc, #40]	; (80080a8 <__libc_init_array+0x40>)
 8008080:	4c0a      	ldr	r4, [pc, #40]	; (80080ac <__libc_init_array+0x44>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	42a6      	cmp	r6, r4
 8008088:	d105      	bne.n	8008096 <__libc_init_array+0x2e>
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	00b3      	lsls	r3, r6, #2
 800808e:	58eb      	ldr	r3, [r5, r3]
 8008090:	4798      	blx	r3
 8008092:	3601      	adds	r6, #1
 8008094:	e7ee      	b.n	8008074 <__libc_init_array+0xc>
 8008096:	00b3      	lsls	r3, r6, #2
 8008098:	58eb      	ldr	r3, [r5, r3]
 800809a:	4798      	blx	r3
 800809c:	3601      	adds	r6, #1
 800809e:	e7f2      	b.n	8008086 <__libc_init_array+0x1e>
 80080a0:	08008be0 	.word	0x08008be0
 80080a4:	08008be0 	.word	0x08008be0
 80080a8:	08008be0 	.word	0x08008be0
 80080ac:	08008be4 	.word	0x08008be4

080080b0 <memcpy>:
 80080b0:	2300      	movs	r3, #0
 80080b2:	b510      	push	{r4, lr}
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d100      	bne.n	80080ba <memcpy+0xa>
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	5ccc      	ldrb	r4, [r1, r3]
 80080bc:	54c4      	strb	r4, [r0, r3]
 80080be:	3301      	adds	r3, #1
 80080c0:	e7f8      	b.n	80080b4 <memcpy+0x4>

080080c2 <memset>:
 80080c2:	0003      	movs	r3, r0
 80080c4:	1882      	adds	r2, r0, r2
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d100      	bne.n	80080cc <memset+0xa>
 80080ca:	4770      	bx	lr
 80080cc:	7019      	strb	r1, [r3, #0]
 80080ce:	3301      	adds	r3, #1
 80080d0:	e7f9      	b.n	80080c6 <memset+0x4>
	...

080080d4 <siprintf>:
 80080d4:	b40e      	push	{r1, r2, r3}
 80080d6:	b500      	push	{lr}
 80080d8:	490b      	ldr	r1, [pc, #44]	; (8008108 <siprintf+0x34>)
 80080da:	b09c      	sub	sp, #112	; 0x70
 80080dc:	ab1d      	add	r3, sp, #116	; 0x74
 80080de:	9002      	str	r0, [sp, #8]
 80080e0:	9006      	str	r0, [sp, #24]
 80080e2:	9107      	str	r1, [sp, #28]
 80080e4:	9104      	str	r1, [sp, #16]
 80080e6:	4809      	ldr	r0, [pc, #36]	; (800810c <siprintf+0x38>)
 80080e8:	4909      	ldr	r1, [pc, #36]	; (8008110 <siprintf+0x3c>)
 80080ea:	cb04      	ldmia	r3!, {r2}
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	a902      	add	r1, sp, #8
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	f000 f870 	bl	80081d8 <_svfiprintf_r>
 80080f8:	2300      	movs	r3, #0
 80080fa:	9a02      	ldr	r2, [sp, #8]
 80080fc:	7013      	strb	r3, [r2, #0]
 80080fe:	b01c      	add	sp, #112	; 0x70
 8008100:	bc08      	pop	{r3}
 8008102:	b003      	add	sp, #12
 8008104:	4718      	bx	r3
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	7fffffff 	.word	0x7fffffff
 800810c:	20000014 	.word	0x20000014
 8008110:	ffff0208 	.word	0xffff0208

08008114 <__ssputs_r>:
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	688e      	ldr	r6, [r1, #8]
 8008118:	b085      	sub	sp, #20
 800811a:	0007      	movs	r7, r0
 800811c:	000c      	movs	r4, r1
 800811e:	9203      	str	r2, [sp, #12]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	429e      	cmp	r6, r3
 8008124:	d83c      	bhi.n	80081a0 <__ssputs_r+0x8c>
 8008126:	2390      	movs	r3, #144	; 0x90
 8008128:	898a      	ldrh	r2, [r1, #12]
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	421a      	tst	r2, r3
 800812e:	d034      	beq.n	800819a <__ssputs_r+0x86>
 8008130:	6909      	ldr	r1, [r1, #16]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	6960      	ldr	r0, [r4, #20]
 8008136:	1a5b      	subs	r3, r3, r1
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	2303      	movs	r3, #3
 800813c:	4343      	muls	r3, r0
 800813e:	0fdd      	lsrs	r5, r3, #31
 8008140:	18ed      	adds	r5, r5, r3
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	9802      	ldr	r0, [sp, #8]
 8008146:	3301      	adds	r3, #1
 8008148:	181b      	adds	r3, r3, r0
 800814a:	106d      	asrs	r5, r5, #1
 800814c:	42ab      	cmp	r3, r5
 800814e:	d900      	bls.n	8008152 <__ssputs_r+0x3e>
 8008150:	001d      	movs	r5, r3
 8008152:	0553      	lsls	r3, r2, #21
 8008154:	d532      	bpl.n	80081bc <__ssputs_r+0xa8>
 8008156:	0029      	movs	r1, r5
 8008158:	0038      	movs	r0, r7
 800815a:	f000 fb49 	bl	80087f0 <_malloc_r>
 800815e:	1e06      	subs	r6, r0, #0
 8008160:	d109      	bne.n	8008176 <__ssputs_r+0x62>
 8008162:	230c      	movs	r3, #12
 8008164:	603b      	str	r3, [r7, #0]
 8008166:	2340      	movs	r3, #64	; 0x40
 8008168:	2001      	movs	r0, #1
 800816a:	89a2      	ldrh	r2, [r4, #12]
 800816c:	4240      	negs	r0, r0
 800816e:	4313      	orrs	r3, r2
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	b005      	add	sp, #20
 8008174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008176:	9a02      	ldr	r2, [sp, #8]
 8008178:	6921      	ldr	r1, [r4, #16]
 800817a:	f7ff ff99 	bl	80080b0 <memcpy>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	4a14      	ldr	r2, [pc, #80]	; (80081d4 <__ssputs_r+0xc0>)
 8008182:	401a      	ands	r2, r3
 8008184:	2380      	movs	r3, #128	; 0x80
 8008186:	4313      	orrs	r3, r2
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	9b02      	ldr	r3, [sp, #8]
 800818c:	6126      	str	r6, [r4, #16]
 800818e:	18f6      	adds	r6, r6, r3
 8008190:	6026      	str	r6, [r4, #0]
 8008192:	6165      	str	r5, [r4, #20]
 8008194:	9e01      	ldr	r6, [sp, #4]
 8008196:	1aed      	subs	r5, r5, r3
 8008198:	60a5      	str	r5, [r4, #8]
 800819a:	9b01      	ldr	r3, [sp, #4]
 800819c:	429e      	cmp	r6, r3
 800819e:	d900      	bls.n	80081a2 <__ssputs_r+0x8e>
 80081a0:	9e01      	ldr	r6, [sp, #4]
 80081a2:	0032      	movs	r2, r6
 80081a4:	9903      	ldr	r1, [sp, #12]
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	f000 faa3 	bl	80086f2 <memmove>
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	2000      	movs	r0, #0
 80081b0:	1b9b      	subs	r3, r3, r6
 80081b2:	60a3      	str	r3, [r4, #8]
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	199e      	adds	r6, r3, r6
 80081b8:	6026      	str	r6, [r4, #0]
 80081ba:	e7da      	b.n	8008172 <__ssputs_r+0x5e>
 80081bc:	002a      	movs	r2, r5
 80081be:	0038      	movs	r0, r7
 80081c0:	f000 fb8c 	bl	80088dc <_realloc_r>
 80081c4:	1e06      	subs	r6, r0, #0
 80081c6:	d1e0      	bne.n	800818a <__ssputs_r+0x76>
 80081c8:	0038      	movs	r0, r7
 80081ca:	6921      	ldr	r1, [r4, #16]
 80081cc:	f000 faa4 	bl	8008718 <_free_r>
 80081d0:	e7c7      	b.n	8008162 <__ssputs_r+0x4e>
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	fffffb7f 	.word	0xfffffb7f

080081d8 <_svfiprintf_r>:
 80081d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081da:	b0a1      	sub	sp, #132	; 0x84
 80081dc:	9003      	str	r0, [sp, #12]
 80081de:	001d      	movs	r5, r3
 80081e0:	898b      	ldrh	r3, [r1, #12]
 80081e2:	000f      	movs	r7, r1
 80081e4:	0016      	movs	r6, r2
 80081e6:	061b      	lsls	r3, r3, #24
 80081e8:	d511      	bpl.n	800820e <_svfiprintf_r+0x36>
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10e      	bne.n	800820e <_svfiprintf_r+0x36>
 80081f0:	2140      	movs	r1, #64	; 0x40
 80081f2:	f000 fafd 	bl	80087f0 <_malloc_r>
 80081f6:	6038      	str	r0, [r7, #0]
 80081f8:	6138      	str	r0, [r7, #16]
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d105      	bne.n	800820a <_svfiprintf_r+0x32>
 80081fe:	230c      	movs	r3, #12
 8008200:	9a03      	ldr	r2, [sp, #12]
 8008202:	3801      	subs	r0, #1
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	b021      	add	sp, #132	; 0x84
 8008208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800820a:	2340      	movs	r3, #64	; 0x40
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	2300      	movs	r3, #0
 8008210:	ac08      	add	r4, sp, #32
 8008212:	6163      	str	r3, [r4, #20]
 8008214:	3320      	adds	r3, #32
 8008216:	7663      	strb	r3, [r4, #25]
 8008218:	3310      	adds	r3, #16
 800821a:	76a3      	strb	r3, [r4, #26]
 800821c:	9507      	str	r5, [sp, #28]
 800821e:	0035      	movs	r5, r6
 8008220:	782b      	ldrb	r3, [r5, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <_svfiprintf_r+0x52>
 8008226:	2b25      	cmp	r3, #37	; 0x25
 8008228:	d147      	bne.n	80082ba <_svfiprintf_r+0xe2>
 800822a:	1bab      	subs	r3, r5, r6
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	42b5      	cmp	r5, r6
 8008230:	d00c      	beq.n	800824c <_svfiprintf_r+0x74>
 8008232:	0032      	movs	r2, r6
 8008234:	0039      	movs	r1, r7
 8008236:	9803      	ldr	r0, [sp, #12]
 8008238:	f7ff ff6c 	bl	8008114 <__ssputs_r>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d100      	bne.n	8008242 <_svfiprintf_r+0x6a>
 8008240:	e0ae      	b.n	80083a0 <_svfiprintf_r+0x1c8>
 8008242:	6962      	ldr	r2, [r4, #20]
 8008244:	9b05      	ldr	r3, [sp, #20]
 8008246:	4694      	mov	ip, r2
 8008248:	4463      	add	r3, ip
 800824a:	6163      	str	r3, [r4, #20]
 800824c:	782b      	ldrb	r3, [r5, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d100      	bne.n	8008254 <_svfiprintf_r+0x7c>
 8008252:	e0a5      	b.n	80083a0 <_svfiprintf_r+0x1c8>
 8008254:	2201      	movs	r2, #1
 8008256:	2300      	movs	r3, #0
 8008258:	4252      	negs	r2, r2
 800825a:	6062      	str	r2, [r4, #4]
 800825c:	a904      	add	r1, sp, #16
 800825e:	3254      	adds	r2, #84	; 0x54
 8008260:	1852      	adds	r2, r2, r1
 8008262:	1c6e      	adds	r6, r5, #1
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	60e3      	str	r3, [r4, #12]
 8008268:	60a3      	str	r3, [r4, #8]
 800826a:	7013      	strb	r3, [r2, #0]
 800826c:	65a3      	str	r3, [r4, #88]	; 0x58
 800826e:	2205      	movs	r2, #5
 8008270:	7831      	ldrb	r1, [r6, #0]
 8008272:	4854      	ldr	r0, [pc, #336]	; (80083c4 <_svfiprintf_r+0x1ec>)
 8008274:	f000 fa32 	bl	80086dc <memchr>
 8008278:	1c75      	adds	r5, r6, #1
 800827a:	2800      	cmp	r0, #0
 800827c:	d11f      	bne.n	80082be <_svfiprintf_r+0xe6>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	06d3      	lsls	r3, r2, #27
 8008282:	d504      	bpl.n	800828e <_svfiprintf_r+0xb6>
 8008284:	2353      	movs	r3, #83	; 0x53
 8008286:	a904      	add	r1, sp, #16
 8008288:	185b      	adds	r3, r3, r1
 800828a:	2120      	movs	r1, #32
 800828c:	7019      	strb	r1, [r3, #0]
 800828e:	0713      	lsls	r3, r2, #28
 8008290:	d504      	bpl.n	800829c <_svfiprintf_r+0xc4>
 8008292:	2353      	movs	r3, #83	; 0x53
 8008294:	a904      	add	r1, sp, #16
 8008296:	185b      	adds	r3, r3, r1
 8008298:	212b      	movs	r1, #43	; 0x2b
 800829a:	7019      	strb	r1, [r3, #0]
 800829c:	7833      	ldrb	r3, [r6, #0]
 800829e:	2b2a      	cmp	r3, #42	; 0x2a
 80082a0:	d016      	beq.n	80082d0 <_svfiprintf_r+0xf8>
 80082a2:	0035      	movs	r5, r6
 80082a4:	2100      	movs	r1, #0
 80082a6:	200a      	movs	r0, #10
 80082a8:	68e3      	ldr	r3, [r4, #12]
 80082aa:	782a      	ldrb	r2, [r5, #0]
 80082ac:	1c6e      	adds	r6, r5, #1
 80082ae:	3a30      	subs	r2, #48	; 0x30
 80082b0:	2a09      	cmp	r2, #9
 80082b2:	d94e      	bls.n	8008352 <_svfiprintf_r+0x17a>
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d111      	bne.n	80082dc <_svfiprintf_r+0x104>
 80082b8:	e017      	b.n	80082ea <_svfiprintf_r+0x112>
 80082ba:	3501      	adds	r5, #1
 80082bc:	e7b0      	b.n	8008220 <_svfiprintf_r+0x48>
 80082be:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <_svfiprintf_r+0x1ec>)
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	1ac0      	subs	r0, r0, r3
 80082c4:	2301      	movs	r3, #1
 80082c6:	4083      	lsls	r3, r0
 80082c8:	4313      	orrs	r3, r2
 80082ca:	002e      	movs	r6, r5
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	e7ce      	b.n	800826e <_svfiprintf_r+0x96>
 80082d0:	9b07      	ldr	r3, [sp, #28]
 80082d2:	1d19      	adds	r1, r3, #4
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	9107      	str	r1, [sp, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	db01      	blt.n	80082e0 <_svfiprintf_r+0x108>
 80082dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082de:	e004      	b.n	80082ea <_svfiprintf_r+0x112>
 80082e0:	425b      	negs	r3, r3
 80082e2:	60e3      	str	r3, [r4, #12]
 80082e4:	2302      	movs	r3, #2
 80082e6:	4313      	orrs	r3, r2
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	782b      	ldrb	r3, [r5, #0]
 80082ec:	2b2e      	cmp	r3, #46	; 0x2e
 80082ee:	d10a      	bne.n	8008306 <_svfiprintf_r+0x12e>
 80082f0:	786b      	ldrb	r3, [r5, #1]
 80082f2:	2b2a      	cmp	r3, #42	; 0x2a
 80082f4:	d135      	bne.n	8008362 <_svfiprintf_r+0x18a>
 80082f6:	9b07      	ldr	r3, [sp, #28]
 80082f8:	3502      	adds	r5, #2
 80082fa:	1d1a      	adds	r2, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	9207      	str	r2, [sp, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	db2b      	blt.n	800835c <_svfiprintf_r+0x184>
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	4e30      	ldr	r6, [pc, #192]	; (80083c8 <_svfiprintf_r+0x1f0>)
 8008308:	2203      	movs	r2, #3
 800830a:	0030      	movs	r0, r6
 800830c:	7829      	ldrb	r1, [r5, #0]
 800830e:	f000 f9e5 	bl	80086dc <memchr>
 8008312:	2800      	cmp	r0, #0
 8008314:	d006      	beq.n	8008324 <_svfiprintf_r+0x14c>
 8008316:	2340      	movs	r3, #64	; 0x40
 8008318:	1b80      	subs	r0, r0, r6
 800831a:	4083      	lsls	r3, r0
 800831c:	6822      	ldr	r2, [r4, #0]
 800831e:	3501      	adds	r5, #1
 8008320:	4313      	orrs	r3, r2
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	7829      	ldrb	r1, [r5, #0]
 8008326:	2206      	movs	r2, #6
 8008328:	4828      	ldr	r0, [pc, #160]	; (80083cc <_svfiprintf_r+0x1f4>)
 800832a:	1c6e      	adds	r6, r5, #1
 800832c:	7621      	strb	r1, [r4, #24]
 800832e:	f000 f9d5 	bl	80086dc <memchr>
 8008332:	2800      	cmp	r0, #0
 8008334:	d03c      	beq.n	80083b0 <_svfiprintf_r+0x1d8>
 8008336:	4b26      	ldr	r3, [pc, #152]	; (80083d0 <_svfiprintf_r+0x1f8>)
 8008338:	2b00      	cmp	r3, #0
 800833a:	d125      	bne.n	8008388 <_svfiprintf_r+0x1b0>
 800833c:	2207      	movs	r2, #7
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	3307      	adds	r3, #7
 8008342:	4393      	bics	r3, r2
 8008344:	3308      	adds	r3, #8
 8008346:	9307      	str	r3, [sp, #28]
 8008348:	6963      	ldr	r3, [r4, #20]
 800834a:	9a04      	ldr	r2, [sp, #16]
 800834c:	189b      	adds	r3, r3, r2
 800834e:	6163      	str	r3, [r4, #20]
 8008350:	e765      	b.n	800821e <_svfiprintf_r+0x46>
 8008352:	4343      	muls	r3, r0
 8008354:	0035      	movs	r5, r6
 8008356:	2101      	movs	r1, #1
 8008358:	189b      	adds	r3, r3, r2
 800835a:	e7a6      	b.n	80082aa <_svfiprintf_r+0xd2>
 800835c:	2301      	movs	r3, #1
 800835e:	425b      	negs	r3, r3
 8008360:	e7d0      	b.n	8008304 <_svfiprintf_r+0x12c>
 8008362:	2300      	movs	r3, #0
 8008364:	200a      	movs	r0, #10
 8008366:	001a      	movs	r2, r3
 8008368:	3501      	adds	r5, #1
 800836a:	6063      	str	r3, [r4, #4]
 800836c:	7829      	ldrb	r1, [r5, #0]
 800836e:	1c6e      	adds	r6, r5, #1
 8008370:	3930      	subs	r1, #48	; 0x30
 8008372:	2909      	cmp	r1, #9
 8008374:	d903      	bls.n	800837e <_svfiprintf_r+0x1a6>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0c5      	beq.n	8008306 <_svfiprintf_r+0x12e>
 800837a:	9209      	str	r2, [sp, #36]	; 0x24
 800837c:	e7c3      	b.n	8008306 <_svfiprintf_r+0x12e>
 800837e:	4342      	muls	r2, r0
 8008380:	0035      	movs	r5, r6
 8008382:	2301      	movs	r3, #1
 8008384:	1852      	adds	r2, r2, r1
 8008386:	e7f1      	b.n	800836c <_svfiprintf_r+0x194>
 8008388:	ab07      	add	r3, sp, #28
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	003a      	movs	r2, r7
 800838e:	0021      	movs	r1, r4
 8008390:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <_svfiprintf_r+0x1fc>)
 8008392:	9803      	ldr	r0, [sp, #12]
 8008394:	e000      	b.n	8008398 <_svfiprintf_r+0x1c0>
 8008396:	bf00      	nop
 8008398:	9004      	str	r0, [sp, #16]
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	3301      	adds	r3, #1
 800839e:	d1d3      	bne.n	8008348 <_svfiprintf_r+0x170>
 80083a0:	89bb      	ldrh	r3, [r7, #12]
 80083a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80083a4:	065b      	lsls	r3, r3, #25
 80083a6:	d400      	bmi.n	80083aa <_svfiprintf_r+0x1d2>
 80083a8:	e72d      	b.n	8008206 <_svfiprintf_r+0x2e>
 80083aa:	2001      	movs	r0, #1
 80083ac:	4240      	negs	r0, r0
 80083ae:	e72a      	b.n	8008206 <_svfiprintf_r+0x2e>
 80083b0:	ab07      	add	r3, sp, #28
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	003a      	movs	r2, r7
 80083b6:	0021      	movs	r1, r4
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <_svfiprintf_r+0x1fc>)
 80083ba:	9803      	ldr	r0, [sp, #12]
 80083bc:	f000 f87c 	bl	80084b8 <_printf_i>
 80083c0:	e7ea      	b.n	8008398 <_svfiprintf_r+0x1c0>
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	08008ba4 	.word	0x08008ba4
 80083c8:	08008baa 	.word	0x08008baa
 80083cc:	08008bae 	.word	0x08008bae
 80083d0:	00000000 	.word	0x00000000
 80083d4:	08008115 	.word	0x08008115

080083d8 <_printf_common>:
 80083d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083da:	0015      	movs	r5, r2
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	688a      	ldr	r2, [r1, #8]
 80083e0:	690b      	ldr	r3, [r1, #16]
 80083e2:	000c      	movs	r4, r1
 80083e4:	9000      	str	r0, [sp, #0]
 80083e6:	4293      	cmp	r3, r2
 80083e8:	da00      	bge.n	80083ec <_printf_common+0x14>
 80083ea:	0013      	movs	r3, r2
 80083ec:	0022      	movs	r2, r4
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	3243      	adds	r2, #67	; 0x43
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	2a00      	cmp	r2, #0
 80083f6:	d001      	beq.n	80083fc <_printf_common+0x24>
 80083f8:	3301      	adds	r3, #1
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	069b      	lsls	r3, r3, #26
 8008400:	d502      	bpl.n	8008408 <_printf_common+0x30>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	3302      	adds	r3, #2
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	2306      	movs	r3, #6
 800840c:	0017      	movs	r7, r2
 800840e:	401f      	ands	r7, r3
 8008410:	421a      	tst	r2, r3
 8008412:	d027      	beq.n	8008464 <_printf_common+0x8c>
 8008414:	0023      	movs	r3, r4
 8008416:	3343      	adds	r3, #67	; 0x43
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	1e5a      	subs	r2, r3, #1
 800841c:	4193      	sbcs	r3, r2
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	0692      	lsls	r2, r2, #26
 8008422:	d430      	bmi.n	8008486 <_printf_common+0xae>
 8008424:	0022      	movs	r2, r4
 8008426:	9901      	ldr	r1, [sp, #4]
 8008428:	9800      	ldr	r0, [sp, #0]
 800842a:	9e08      	ldr	r6, [sp, #32]
 800842c:	3243      	adds	r2, #67	; 0x43
 800842e:	47b0      	blx	r6
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d025      	beq.n	8008480 <_printf_common+0xa8>
 8008434:	2306      	movs	r3, #6
 8008436:	6820      	ldr	r0, [r4, #0]
 8008438:	682a      	ldr	r2, [r5, #0]
 800843a:	68e1      	ldr	r1, [r4, #12]
 800843c:	2500      	movs	r5, #0
 800843e:	4003      	ands	r3, r0
 8008440:	2b04      	cmp	r3, #4
 8008442:	d103      	bne.n	800844c <_printf_common+0x74>
 8008444:	1a8d      	subs	r5, r1, r2
 8008446:	43eb      	mvns	r3, r5
 8008448:	17db      	asrs	r3, r3, #31
 800844a:	401d      	ands	r5, r3
 800844c:	68a3      	ldr	r3, [r4, #8]
 800844e:	6922      	ldr	r2, [r4, #16]
 8008450:	4293      	cmp	r3, r2
 8008452:	dd01      	ble.n	8008458 <_printf_common+0x80>
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	18ed      	adds	r5, r5, r3
 8008458:	2700      	movs	r7, #0
 800845a:	42bd      	cmp	r5, r7
 800845c:	d120      	bne.n	80084a0 <_printf_common+0xc8>
 800845e:	2000      	movs	r0, #0
 8008460:	e010      	b.n	8008484 <_printf_common+0xac>
 8008462:	3701      	adds	r7, #1
 8008464:	68e3      	ldr	r3, [r4, #12]
 8008466:	682a      	ldr	r2, [r5, #0]
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	42bb      	cmp	r3, r7
 800846c:	ddd2      	ble.n	8008414 <_printf_common+0x3c>
 800846e:	0022      	movs	r2, r4
 8008470:	2301      	movs	r3, #1
 8008472:	9901      	ldr	r1, [sp, #4]
 8008474:	9800      	ldr	r0, [sp, #0]
 8008476:	9e08      	ldr	r6, [sp, #32]
 8008478:	3219      	adds	r2, #25
 800847a:	47b0      	blx	r6
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d1f0      	bne.n	8008462 <_printf_common+0x8a>
 8008480:	2001      	movs	r0, #1
 8008482:	4240      	negs	r0, r0
 8008484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008486:	2030      	movs	r0, #48	; 0x30
 8008488:	18e1      	adds	r1, r4, r3
 800848a:	3143      	adds	r1, #67	; 0x43
 800848c:	7008      	strb	r0, [r1, #0]
 800848e:	0021      	movs	r1, r4
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	3145      	adds	r1, #69	; 0x45
 8008494:	7809      	ldrb	r1, [r1, #0]
 8008496:	18a2      	adds	r2, r4, r2
 8008498:	3243      	adds	r2, #67	; 0x43
 800849a:	3302      	adds	r3, #2
 800849c:	7011      	strb	r1, [r2, #0]
 800849e:	e7c1      	b.n	8008424 <_printf_common+0x4c>
 80084a0:	0022      	movs	r2, r4
 80084a2:	2301      	movs	r3, #1
 80084a4:	9901      	ldr	r1, [sp, #4]
 80084a6:	9800      	ldr	r0, [sp, #0]
 80084a8:	9e08      	ldr	r6, [sp, #32]
 80084aa:	321a      	adds	r2, #26
 80084ac:	47b0      	blx	r6
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	d0e6      	beq.n	8008480 <_printf_common+0xa8>
 80084b2:	3701      	adds	r7, #1
 80084b4:	e7d1      	b.n	800845a <_printf_common+0x82>
	...

080084b8 <_printf_i>:
 80084b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ba:	b08b      	sub	sp, #44	; 0x2c
 80084bc:	9206      	str	r2, [sp, #24]
 80084be:	000a      	movs	r2, r1
 80084c0:	3243      	adds	r2, #67	; 0x43
 80084c2:	9307      	str	r3, [sp, #28]
 80084c4:	9005      	str	r0, [sp, #20]
 80084c6:	9204      	str	r2, [sp, #16]
 80084c8:	7e0a      	ldrb	r2, [r1, #24]
 80084ca:	000c      	movs	r4, r1
 80084cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ce:	2a78      	cmp	r2, #120	; 0x78
 80084d0:	d807      	bhi.n	80084e2 <_printf_i+0x2a>
 80084d2:	2a62      	cmp	r2, #98	; 0x62
 80084d4:	d809      	bhi.n	80084ea <_printf_i+0x32>
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	d100      	bne.n	80084dc <_printf_i+0x24>
 80084da:	e0c1      	b.n	8008660 <_printf_i+0x1a8>
 80084dc:	2a58      	cmp	r2, #88	; 0x58
 80084de:	d100      	bne.n	80084e2 <_printf_i+0x2a>
 80084e0:	e08c      	b.n	80085fc <_printf_i+0x144>
 80084e2:	0026      	movs	r6, r4
 80084e4:	3642      	adds	r6, #66	; 0x42
 80084e6:	7032      	strb	r2, [r6, #0]
 80084e8:	e022      	b.n	8008530 <_printf_i+0x78>
 80084ea:	0010      	movs	r0, r2
 80084ec:	3863      	subs	r0, #99	; 0x63
 80084ee:	2815      	cmp	r0, #21
 80084f0:	d8f7      	bhi.n	80084e2 <_printf_i+0x2a>
 80084f2:	f7f7 fe11 	bl	8000118 <__gnu_thumb1_case_shi>
 80084f6:	0016      	.short	0x0016
 80084f8:	fff6001f 	.word	0xfff6001f
 80084fc:	fff6fff6 	.word	0xfff6fff6
 8008500:	001ffff6 	.word	0x001ffff6
 8008504:	fff6fff6 	.word	0xfff6fff6
 8008508:	fff6fff6 	.word	0xfff6fff6
 800850c:	003600a8 	.word	0x003600a8
 8008510:	fff6009a 	.word	0xfff6009a
 8008514:	00b9fff6 	.word	0x00b9fff6
 8008518:	0036fff6 	.word	0x0036fff6
 800851c:	fff6fff6 	.word	0xfff6fff6
 8008520:	009e      	.short	0x009e
 8008522:	0026      	movs	r6, r4
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	3642      	adds	r6, #66	; 0x42
 8008528:	1d11      	adds	r1, r2, #4
 800852a:	6019      	str	r1, [r3, #0]
 800852c:	6813      	ldr	r3, [r2, #0]
 800852e:	7033      	strb	r3, [r6, #0]
 8008530:	2301      	movs	r3, #1
 8008532:	e0a7      	b.n	8008684 <_printf_i+0x1cc>
 8008534:	6808      	ldr	r0, [r1, #0]
 8008536:	6819      	ldr	r1, [r3, #0]
 8008538:	1d0a      	adds	r2, r1, #4
 800853a:	0605      	lsls	r5, r0, #24
 800853c:	d50b      	bpl.n	8008556 <_printf_i+0x9e>
 800853e:	680d      	ldr	r5, [r1, #0]
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	2d00      	cmp	r5, #0
 8008544:	da03      	bge.n	800854e <_printf_i+0x96>
 8008546:	232d      	movs	r3, #45	; 0x2d
 8008548:	9a04      	ldr	r2, [sp, #16]
 800854a:	426d      	negs	r5, r5
 800854c:	7013      	strb	r3, [r2, #0]
 800854e:	4b61      	ldr	r3, [pc, #388]	; (80086d4 <_printf_i+0x21c>)
 8008550:	270a      	movs	r7, #10
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	e01b      	b.n	800858e <_printf_i+0xd6>
 8008556:	680d      	ldr	r5, [r1, #0]
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	0641      	lsls	r1, r0, #25
 800855c:	d5f1      	bpl.n	8008542 <_printf_i+0x8a>
 800855e:	b22d      	sxth	r5, r5
 8008560:	e7ef      	b.n	8008542 <_printf_i+0x8a>
 8008562:	680d      	ldr	r5, [r1, #0]
 8008564:	6819      	ldr	r1, [r3, #0]
 8008566:	1d08      	adds	r0, r1, #4
 8008568:	6018      	str	r0, [r3, #0]
 800856a:	062e      	lsls	r6, r5, #24
 800856c:	d501      	bpl.n	8008572 <_printf_i+0xba>
 800856e:	680d      	ldr	r5, [r1, #0]
 8008570:	e003      	b.n	800857a <_printf_i+0xc2>
 8008572:	066d      	lsls	r5, r5, #25
 8008574:	d5fb      	bpl.n	800856e <_printf_i+0xb6>
 8008576:	680d      	ldr	r5, [r1, #0]
 8008578:	b2ad      	uxth	r5, r5
 800857a:	4b56      	ldr	r3, [pc, #344]	; (80086d4 <_printf_i+0x21c>)
 800857c:	2708      	movs	r7, #8
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	2a6f      	cmp	r2, #111	; 0x6f
 8008582:	d000      	beq.n	8008586 <_printf_i+0xce>
 8008584:	3702      	adds	r7, #2
 8008586:	0023      	movs	r3, r4
 8008588:	2200      	movs	r2, #0
 800858a:	3343      	adds	r3, #67	; 0x43
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	6863      	ldr	r3, [r4, #4]
 8008590:	60a3      	str	r3, [r4, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	db03      	blt.n	800859e <_printf_i+0xe6>
 8008596:	2204      	movs	r2, #4
 8008598:	6821      	ldr	r1, [r4, #0]
 800859a:	4391      	bics	r1, r2
 800859c:	6021      	str	r1, [r4, #0]
 800859e:	2d00      	cmp	r5, #0
 80085a0:	d102      	bne.n	80085a8 <_printf_i+0xf0>
 80085a2:	9e04      	ldr	r6, [sp, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <_printf_i+0x10a>
 80085a8:	9e04      	ldr	r6, [sp, #16]
 80085aa:	0028      	movs	r0, r5
 80085ac:	0039      	movs	r1, r7
 80085ae:	f7f7 fe43 	bl	8000238 <__aeabi_uidivmod>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	3e01      	subs	r6, #1
 80085b6:	5c5b      	ldrb	r3, [r3, r1]
 80085b8:	7033      	strb	r3, [r6, #0]
 80085ba:	002b      	movs	r3, r5
 80085bc:	0005      	movs	r5, r0
 80085be:	429f      	cmp	r7, r3
 80085c0:	d9f3      	bls.n	80085aa <_printf_i+0xf2>
 80085c2:	2f08      	cmp	r7, #8
 80085c4:	d109      	bne.n	80085da <_printf_i+0x122>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	07db      	lsls	r3, r3, #31
 80085ca:	d506      	bpl.n	80085da <_printf_i+0x122>
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	6922      	ldr	r2, [r4, #16]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	dc02      	bgt.n	80085da <_printf_i+0x122>
 80085d4:	2330      	movs	r3, #48	; 0x30
 80085d6:	3e01      	subs	r6, #1
 80085d8:	7033      	strb	r3, [r6, #0]
 80085da:	9b04      	ldr	r3, [sp, #16]
 80085dc:	1b9b      	subs	r3, r3, r6
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	9b07      	ldr	r3, [sp, #28]
 80085e2:	0021      	movs	r1, r4
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	9805      	ldr	r0, [sp, #20]
 80085e8:	9b06      	ldr	r3, [sp, #24]
 80085ea:	aa09      	add	r2, sp, #36	; 0x24
 80085ec:	f7ff fef4 	bl	80083d8 <_printf_common>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d14c      	bne.n	800868e <_printf_i+0x1d6>
 80085f4:	2001      	movs	r0, #1
 80085f6:	4240      	negs	r0, r0
 80085f8:	b00b      	add	sp, #44	; 0x2c
 80085fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085fc:	3145      	adds	r1, #69	; 0x45
 80085fe:	700a      	strb	r2, [r1, #0]
 8008600:	4a34      	ldr	r2, [pc, #208]	; (80086d4 <_printf_i+0x21c>)
 8008602:	9203      	str	r2, [sp, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	6821      	ldr	r1, [r4, #0]
 8008608:	ca20      	ldmia	r2!, {r5}
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	0608      	lsls	r0, r1, #24
 800860e:	d516      	bpl.n	800863e <_printf_i+0x186>
 8008610:	07cb      	lsls	r3, r1, #31
 8008612:	d502      	bpl.n	800861a <_printf_i+0x162>
 8008614:	2320      	movs	r3, #32
 8008616:	4319      	orrs	r1, r3
 8008618:	6021      	str	r1, [r4, #0]
 800861a:	2710      	movs	r7, #16
 800861c:	2d00      	cmp	r5, #0
 800861e:	d1b2      	bne.n	8008586 <_printf_i+0xce>
 8008620:	2320      	movs	r3, #32
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	439a      	bics	r2, r3
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	e7ad      	b.n	8008586 <_printf_i+0xce>
 800862a:	2220      	movs	r2, #32
 800862c:	6809      	ldr	r1, [r1, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	0022      	movs	r2, r4
 8008634:	2178      	movs	r1, #120	; 0x78
 8008636:	3245      	adds	r2, #69	; 0x45
 8008638:	7011      	strb	r1, [r2, #0]
 800863a:	4a27      	ldr	r2, [pc, #156]	; (80086d8 <_printf_i+0x220>)
 800863c:	e7e1      	b.n	8008602 <_printf_i+0x14a>
 800863e:	0648      	lsls	r0, r1, #25
 8008640:	d5e6      	bpl.n	8008610 <_printf_i+0x158>
 8008642:	b2ad      	uxth	r5, r5
 8008644:	e7e4      	b.n	8008610 <_printf_i+0x158>
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	680d      	ldr	r5, [r1, #0]
 800864a:	1d10      	adds	r0, r2, #4
 800864c:	6949      	ldr	r1, [r1, #20]
 800864e:	6018      	str	r0, [r3, #0]
 8008650:	6813      	ldr	r3, [r2, #0]
 8008652:	062e      	lsls	r6, r5, #24
 8008654:	d501      	bpl.n	800865a <_printf_i+0x1a2>
 8008656:	6019      	str	r1, [r3, #0]
 8008658:	e002      	b.n	8008660 <_printf_i+0x1a8>
 800865a:	066d      	lsls	r5, r5, #25
 800865c:	d5fb      	bpl.n	8008656 <_printf_i+0x19e>
 800865e:	8019      	strh	r1, [r3, #0]
 8008660:	2300      	movs	r3, #0
 8008662:	9e04      	ldr	r6, [sp, #16]
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	e7bb      	b.n	80085e0 <_printf_i+0x128>
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	1d11      	adds	r1, r2, #4
 800866c:	6019      	str	r1, [r3, #0]
 800866e:	6816      	ldr	r6, [r2, #0]
 8008670:	2100      	movs	r1, #0
 8008672:	0030      	movs	r0, r6
 8008674:	6862      	ldr	r2, [r4, #4]
 8008676:	f000 f831 	bl	80086dc <memchr>
 800867a:	2800      	cmp	r0, #0
 800867c:	d001      	beq.n	8008682 <_printf_i+0x1ca>
 800867e:	1b80      	subs	r0, r0, r6
 8008680:	6060      	str	r0, [r4, #4]
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	2300      	movs	r3, #0
 8008688:	9a04      	ldr	r2, [sp, #16]
 800868a:	7013      	strb	r3, [r2, #0]
 800868c:	e7a8      	b.n	80085e0 <_printf_i+0x128>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	0032      	movs	r2, r6
 8008692:	9906      	ldr	r1, [sp, #24]
 8008694:	9805      	ldr	r0, [sp, #20]
 8008696:	9d07      	ldr	r5, [sp, #28]
 8008698:	47a8      	blx	r5
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d0aa      	beq.n	80085f4 <_printf_i+0x13c>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	079b      	lsls	r3, r3, #30
 80086a2:	d415      	bmi.n	80086d0 <_printf_i+0x218>
 80086a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a6:	68e0      	ldr	r0, [r4, #12]
 80086a8:	4298      	cmp	r0, r3
 80086aa:	daa5      	bge.n	80085f8 <_printf_i+0x140>
 80086ac:	0018      	movs	r0, r3
 80086ae:	e7a3      	b.n	80085f8 <_printf_i+0x140>
 80086b0:	0022      	movs	r2, r4
 80086b2:	2301      	movs	r3, #1
 80086b4:	9906      	ldr	r1, [sp, #24]
 80086b6:	9805      	ldr	r0, [sp, #20]
 80086b8:	9e07      	ldr	r6, [sp, #28]
 80086ba:	3219      	adds	r2, #25
 80086bc:	47b0      	blx	r6
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d098      	beq.n	80085f4 <_printf_i+0x13c>
 80086c2:	3501      	adds	r5, #1
 80086c4:	68e3      	ldr	r3, [r4, #12]
 80086c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	42ab      	cmp	r3, r5
 80086cc:	dcf0      	bgt.n	80086b0 <_printf_i+0x1f8>
 80086ce:	e7e9      	b.n	80086a4 <_printf_i+0x1ec>
 80086d0:	2500      	movs	r5, #0
 80086d2:	e7f7      	b.n	80086c4 <_printf_i+0x20c>
 80086d4:	08008bb5 	.word	0x08008bb5
 80086d8:	08008bc6 	.word	0x08008bc6

080086dc <memchr>:
 80086dc:	b2c9      	uxtb	r1, r1
 80086de:	1882      	adds	r2, r0, r2
 80086e0:	4290      	cmp	r0, r2
 80086e2:	d101      	bne.n	80086e8 <memchr+0xc>
 80086e4:	2000      	movs	r0, #0
 80086e6:	4770      	bx	lr
 80086e8:	7803      	ldrb	r3, [r0, #0]
 80086ea:	428b      	cmp	r3, r1
 80086ec:	d0fb      	beq.n	80086e6 <memchr+0xa>
 80086ee:	3001      	adds	r0, #1
 80086f0:	e7f6      	b.n	80086e0 <memchr+0x4>

080086f2 <memmove>:
 80086f2:	b510      	push	{r4, lr}
 80086f4:	4288      	cmp	r0, r1
 80086f6:	d902      	bls.n	80086fe <memmove+0xc>
 80086f8:	188b      	adds	r3, r1, r2
 80086fa:	4298      	cmp	r0, r3
 80086fc:	d303      	bcc.n	8008706 <memmove+0x14>
 80086fe:	2300      	movs	r3, #0
 8008700:	e007      	b.n	8008712 <memmove+0x20>
 8008702:	5c8b      	ldrb	r3, [r1, r2]
 8008704:	5483      	strb	r3, [r0, r2]
 8008706:	3a01      	subs	r2, #1
 8008708:	d2fb      	bcs.n	8008702 <memmove+0x10>
 800870a:	bd10      	pop	{r4, pc}
 800870c:	5ccc      	ldrb	r4, [r1, r3]
 800870e:	54c4      	strb	r4, [r0, r3]
 8008710:	3301      	adds	r3, #1
 8008712:	429a      	cmp	r2, r3
 8008714:	d1fa      	bne.n	800870c <memmove+0x1a>
 8008716:	e7f8      	b.n	800870a <memmove+0x18>

08008718 <_free_r>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	0005      	movs	r5, r0
 800871c:	2900      	cmp	r1, #0
 800871e:	d010      	beq.n	8008742 <_free_r+0x2a>
 8008720:	1f0c      	subs	r4, r1, #4
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	da00      	bge.n	800872a <_free_r+0x12>
 8008728:	18e4      	adds	r4, r4, r3
 800872a:	0028      	movs	r0, r5
 800872c:	f000 f918 	bl	8008960 <__malloc_lock>
 8008730:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <_free_r+0x90>)
 8008732:	6813      	ldr	r3, [r2, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <_free_r+0x2c>
 8008738:	6063      	str	r3, [r4, #4]
 800873a:	6014      	str	r4, [r2, #0]
 800873c:	0028      	movs	r0, r5
 800873e:	f000 f917 	bl	8008970 <__malloc_unlock>
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	42a3      	cmp	r3, r4
 8008746:	d908      	bls.n	800875a <_free_r+0x42>
 8008748:	6821      	ldr	r1, [r4, #0]
 800874a:	1860      	adds	r0, r4, r1
 800874c:	4283      	cmp	r3, r0
 800874e:	d1f3      	bne.n	8008738 <_free_r+0x20>
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	1841      	adds	r1, r0, r1
 8008756:	6021      	str	r1, [r4, #0]
 8008758:	e7ee      	b.n	8008738 <_free_r+0x20>
 800875a:	001a      	movs	r2, r3
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <_free_r+0x4e>
 8008762:	42a3      	cmp	r3, r4
 8008764:	d9f9      	bls.n	800875a <_free_r+0x42>
 8008766:	6811      	ldr	r1, [r2, #0]
 8008768:	1850      	adds	r0, r2, r1
 800876a:	42a0      	cmp	r0, r4
 800876c:	d10b      	bne.n	8008786 <_free_r+0x6e>
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	1809      	adds	r1, r1, r0
 8008772:	1850      	adds	r0, r2, r1
 8008774:	6011      	str	r1, [r2, #0]
 8008776:	4283      	cmp	r3, r0
 8008778:	d1e0      	bne.n	800873c <_free_r+0x24>
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	1841      	adds	r1, r0, r1
 8008780:	6011      	str	r1, [r2, #0]
 8008782:	6053      	str	r3, [r2, #4]
 8008784:	e7da      	b.n	800873c <_free_r+0x24>
 8008786:	42a0      	cmp	r0, r4
 8008788:	d902      	bls.n	8008790 <_free_r+0x78>
 800878a:	230c      	movs	r3, #12
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	e7d5      	b.n	800873c <_free_r+0x24>
 8008790:	6821      	ldr	r1, [r4, #0]
 8008792:	1860      	adds	r0, r4, r1
 8008794:	4283      	cmp	r3, r0
 8008796:	d103      	bne.n	80087a0 <_free_r+0x88>
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	1841      	adds	r1, r0, r1
 800879e:	6021      	str	r1, [r4, #0]
 80087a0:	6063      	str	r3, [r4, #4]
 80087a2:	6054      	str	r4, [r2, #4]
 80087a4:	e7ca      	b.n	800873c <_free_r+0x24>
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	20001bd8 	.word	0x20001bd8

080087ac <sbrk_aligned>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	4e0f      	ldr	r6, [pc, #60]	; (80087ec <sbrk_aligned+0x40>)
 80087b0:	000d      	movs	r5, r1
 80087b2:	6831      	ldr	r1, [r6, #0]
 80087b4:	0004      	movs	r4, r0
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d102      	bne.n	80087c0 <sbrk_aligned+0x14>
 80087ba:	f000 f8bf 	bl	800893c <_sbrk_r>
 80087be:	6030      	str	r0, [r6, #0]
 80087c0:	0029      	movs	r1, r5
 80087c2:	0020      	movs	r0, r4
 80087c4:	f000 f8ba 	bl	800893c <_sbrk_r>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d00a      	beq.n	80087e2 <sbrk_aligned+0x36>
 80087cc:	2303      	movs	r3, #3
 80087ce:	1cc5      	adds	r5, r0, #3
 80087d0:	439d      	bics	r5, r3
 80087d2:	42a8      	cmp	r0, r5
 80087d4:	d007      	beq.n	80087e6 <sbrk_aligned+0x3a>
 80087d6:	1a29      	subs	r1, r5, r0
 80087d8:	0020      	movs	r0, r4
 80087da:	f000 f8af 	bl	800893c <_sbrk_r>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	d101      	bne.n	80087e6 <sbrk_aligned+0x3a>
 80087e2:	2501      	movs	r5, #1
 80087e4:	426d      	negs	r5, r5
 80087e6:	0028      	movs	r0, r5
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	20001bdc 	.word	0x20001bdc

080087f0 <_malloc_r>:
 80087f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087f2:	2203      	movs	r2, #3
 80087f4:	1ccb      	adds	r3, r1, #3
 80087f6:	4393      	bics	r3, r2
 80087f8:	3308      	adds	r3, #8
 80087fa:	0006      	movs	r6, r0
 80087fc:	001f      	movs	r7, r3
 80087fe:	2b0c      	cmp	r3, #12
 8008800:	d232      	bcs.n	8008868 <_malloc_r+0x78>
 8008802:	270c      	movs	r7, #12
 8008804:	42b9      	cmp	r1, r7
 8008806:	d831      	bhi.n	800886c <_malloc_r+0x7c>
 8008808:	0030      	movs	r0, r6
 800880a:	f000 f8a9 	bl	8008960 <__malloc_lock>
 800880e:	4d32      	ldr	r5, [pc, #200]	; (80088d8 <_malloc_r+0xe8>)
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	001c      	movs	r4, r3
 8008814:	2c00      	cmp	r4, #0
 8008816:	d12e      	bne.n	8008876 <_malloc_r+0x86>
 8008818:	0039      	movs	r1, r7
 800881a:	0030      	movs	r0, r6
 800881c:	f7ff ffc6 	bl	80087ac <sbrk_aligned>
 8008820:	0004      	movs	r4, r0
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d11e      	bne.n	8008864 <_malloc_r+0x74>
 8008826:	682c      	ldr	r4, [r5, #0]
 8008828:	0025      	movs	r5, r4
 800882a:	2d00      	cmp	r5, #0
 800882c:	d14a      	bne.n	80088c4 <_malloc_r+0xd4>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	0029      	movs	r1, r5
 8008832:	18e3      	adds	r3, r4, r3
 8008834:	0030      	movs	r0, r6
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	f000 f880 	bl	800893c <_sbrk_r>
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	4283      	cmp	r3, r0
 8008840:	d143      	bne.n	80088ca <_malloc_r+0xda>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	3703      	adds	r7, #3
 8008846:	1aff      	subs	r7, r7, r3
 8008848:	2303      	movs	r3, #3
 800884a:	439f      	bics	r7, r3
 800884c:	3708      	adds	r7, #8
 800884e:	2f0c      	cmp	r7, #12
 8008850:	d200      	bcs.n	8008854 <_malloc_r+0x64>
 8008852:	270c      	movs	r7, #12
 8008854:	0039      	movs	r1, r7
 8008856:	0030      	movs	r0, r6
 8008858:	f7ff ffa8 	bl	80087ac <sbrk_aligned>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d034      	beq.n	80088ca <_malloc_r+0xda>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	19df      	adds	r7, r3, r7
 8008864:	6027      	str	r7, [r4, #0]
 8008866:	e013      	b.n	8008890 <_malloc_r+0xa0>
 8008868:	2b00      	cmp	r3, #0
 800886a:	dacb      	bge.n	8008804 <_malloc_r+0x14>
 800886c:	230c      	movs	r3, #12
 800886e:	2500      	movs	r5, #0
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	0028      	movs	r0, r5
 8008874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008876:	6822      	ldr	r2, [r4, #0]
 8008878:	1bd1      	subs	r1, r2, r7
 800887a:	d420      	bmi.n	80088be <_malloc_r+0xce>
 800887c:	290b      	cmp	r1, #11
 800887e:	d917      	bls.n	80088b0 <_malloc_r+0xc0>
 8008880:	19e2      	adds	r2, r4, r7
 8008882:	6027      	str	r7, [r4, #0]
 8008884:	42a3      	cmp	r3, r4
 8008886:	d111      	bne.n	80088ac <_malloc_r+0xbc>
 8008888:	602a      	str	r2, [r5, #0]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	6053      	str	r3, [r2, #4]
 8008890:	0030      	movs	r0, r6
 8008892:	0025      	movs	r5, r4
 8008894:	f000 f86c 	bl	8008970 <__malloc_unlock>
 8008898:	2207      	movs	r2, #7
 800889a:	350b      	adds	r5, #11
 800889c:	1d23      	adds	r3, r4, #4
 800889e:	4395      	bics	r5, r2
 80088a0:	1aea      	subs	r2, r5, r3
 80088a2:	429d      	cmp	r5, r3
 80088a4:	d0e5      	beq.n	8008872 <_malloc_r+0x82>
 80088a6:	1b5b      	subs	r3, r3, r5
 80088a8:	50a3      	str	r3, [r4, r2]
 80088aa:	e7e2      	b.n	8008872 <_malloc_r+0x82>
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	e7ec      	b.n	800888a <_malloc_r+0x9a>
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	42a3      	cmp	r3, r4
 80088b4:	d101      	bne.n	80088ba <_malloc_r+0xca>
 80088b6:	602a      	str	r2, [r5, #0]
 80088b8:	e7ea      	b.n	8008890 <_malloc_r+0xa0>
 80088ba:	605a      	str	r2, [r3, #4]
 80088bc:	e7e8      	b.n	8008890 <_malloc_r+0xa0>
 80088be:	0023      	movs	r3, r4
 80088c0:	6864      	ldr	r4, [r4, #4]
 80088c2:	e7a7      	b.n	8008814 <_malloc_r+0x24>
 80088c4:	002c      	movs	r4, r5
 80088c6:	686d      	ldr	r5, [r5, #4]
 80088c8:	e7af      	b.n	800882a <_malloc_r+0x3a>
 80088ca:	230c      	movs	r3, #12
 80088cc:	0030      	movs	r0, r6
 80088ce:	6033      	str	r3, [r6, #0]
 80088d0:	f000 f84e 	bl	8008970 <__malloc_unlock>
 80088d4:	e7cd      	b.n	8008872 <_malloc_r+0x82>
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	20001bd8 	.word	0x20001bd8

080088dc <_realloc_r>:
 80088dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088de:	0007      	movs	r7, r0
 80088e0:	000e      	movs	r6, r1
 80088e2:	0014      	movs	r4, r2
 80088e4:	2900      	cmp	r1, #0
 80088e6:	d105      	bne.n	80088f4 <_realloc_r+0x18>
 80088e8:	0011      	movs	r1, r2
 80088ea:	f7ff ff81 	bl	80087f0 <_malloc_r>
 80088ee:	0005      	movs	r5, r0
 80088f0:	0028      	movs	r0, r5
 80088f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088f4:	2a00      	cmp	r2, #0
 80088f6:	d103      	bne.n	8008900 <_realloc_r+0x24>
 80088f8:	f7ff ff0e 	bl	8008718 <_free_r>
 80088fc:	0025      	movs	r5, r4
 80088fe:	e7f7      	b.n	80088f0 <_realloc_r+0x14>
 8008900:	f000 f83e 	bl	8008980 <_malloc_usable_size_r>
 8008904:	9001      	str	r0, [sp, #4]
 8008906:	4284      	cmp	r4, r0
 8008908:	d803      	bhi.n	8008912 <_realloc_r+0x36>
 800890a:	0035      	movs	r5, r6
 800890c:	0843      	lsrs	r3, r0, #1
 800890e:	42a3      	cmp	r3, r4
 8008910:	d3ee      	bcc.n	80088f0 <_realloc_r+0x14>
 8008912:	0021      	movs	r1, r4
 8008914:	0038      	movs	r0, r7
 8008916:	f7ff ff6b 	bl	80087f0 <_malloc_r>
 800891a:	1e05      	subs	r5, r0, #0
 800891c:	d0e8      	beq.n	80088f0 <_realloc_r+0x14>
 800891e:	9b01      	ldr	r3, [sp, #4]
 8008920:	0022      	movs	r2, r4
 8008922:	429c      	cmp	r4, r3
 8008924:	d900      	bls.n	8008928 <_realloc_r+0x4c>
 8008926:	001a      	movs	r2, r3
 8008928:	0031      	movs	r1, r6
 800892a:	0028      	movs	r0, r5
 800892c:	f7ff fbc0 	bl	80080b0 <memcpy>
 8008930:	0031      	movs	r1, r6
 8008932:	0038      	movs	r0, r7
 8008934:	f7ff fef0 	bl	8008718 <_free_r>
 8008938:	e7da      	b.n	80088f0 <_realloc_r+0x14>
	...

0800893c <_sbrk_r>:
 800893c:	2300      	movs	r3, #0
 800893e:	b570      	push	{r4, r5, r6, lr}
 8008940:	4d06      	ldr	r5, [pc, #24]	; (800895c <_sbrk_r+0x20>)
 8008942:	0004      	movs	r4, r0
 8008944:	0008      	movs	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f8 fe20 	bl	800158c <_sbrk>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d103      	bne.n	8008958 <_sbrk_r+0x1c>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d000      	beq.n	8008958 <_sbrk_r+0x1c>
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	bd70      	pop	{r4, r5, r6, pc}
 800895a:	46c0      	nop			; (mov r8, r8)
 800895c:	20001be0 	.word	0x20001be0

08008960 <__malloc_lock>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4802      	ldr	r0, [pc, #8]	; (800896c <__malloc_lock+0xc>)
 8008964:	f000 f814 	bl	8008990 <__retarget_lock_acquire_recursive>
 8008968:	bd10      	pop	{r4, pc}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	20001be4 	.word	0x20001be4

08008970 <__malloc_unlock>:
 8008970:	b510      	push	{r4, lr}
 8008972:	4802      	ldr	r0, [pc, #8]	; (800897c <__malloc_unlock+0xc>)
 8008974:	f000 f80d 	bl	8008992 <__retarget_lock_release_recursive>
 8008978:	bd10      	pop	{r4, pc}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	20001be4 	.word	0x20001be4

08008980 <_malloc_usable_size_r>:
 8008980:	1f0b      	subs	r3, r1, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	1f18      	subs	r0, r3, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	da01      	bge.n	800898e <_malloc_usable_size_r+0xe>
 800898a:	580b      	ldr	r3, [r1, r0]
 800898c:	18c0      	adds	r0, r0, r3
 800898e:	4770      	bx	lr

08008990 <__retarget_lock_acquire_recursive>:
 8008990:	4770      	bx	lr

08008992 <__retarget_lock_release_recursive>:
 8008992:	4770      	bx	lr

08008994 <_init>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899a:	bc08      	pop	{r3}
 800899c:	469e      	mov	lr, r3
 800899e:	4770      	bx	lr

080089a0 <_fini>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr
